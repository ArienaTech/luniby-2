{"version":3,"file":"static/js/431.aefc5e28.chunk.js","mappings":"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","sources":["services/openaiService.js","components/TriageStatus.js"],"sourcesContent":["// OpenAI/AI service for triage and analysis\nimport axios from 'axios';\n\nconst openaiService = {\n  // Analyze symptoms using AI\n  async analyzeSymptoms(symptoms, petInfo) {\n    try {\n      // Note: This would typically call your backend API that interfaces with OpenAI\n      // For now, return a mock response\n      const response = {\n        success: true,\n        data: {\n          urgency: 'moderate',\n          recommendations: [\n            'Monitor your pet closely for the next 24 hours',\n            'Contact a veterinarian if symptoms worsen',\n            'Ensure your pet stays hydrated'\n          ],\n          possibleCauses: ['Infection', 'Dietary issue', 'Stress'],\n          nextSteps: 'Schedule a veterinary consultation within 48 hours'\n        }\n      };\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Failed to analyze symptoms'\n      };\n    }\n  },\n\n  // Generate health report\n  async generateHealthReport(triageData) {\n    try {\n      // Mock health report generation\n      return {\n        success: true,\n        data: {\n          report: 'Health report generated successfully',\n          timestamp: new Date().toISOString()\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Failed to generate health report'\n      };\n    }\n  },\n\n  // Get triage recommendation\n  async getTriageRecommendation(symptoms, petDetails) {\n    try {\n      // Mock triage recommendation\n      return {\n        success: true,\n        data: {\n          urgency: 'routine',\n          recommendation: 'Schedule a routine checkup',\n          confidence: 0.85\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Failed to get recommendation'\n      };\n    }\n  }\n};\n\nexport default openaiService;\n","import { useEffect, useState } from 'react';\nimport openaiService from '../services/openaiService';\n\nconst TriageStatus = () => {\n  const [status, setStatus] = useState({\n    apiKeyPresent: false,\n    apiKeyPreview: '',\n    environment: '',\n    timestamp: new Date().toISOString()\n  });\n\n  const [testResult, setTestResult] = useState(null);\n  const [testing, setTesting] = useState(false);\n\n  useEffect(() => {\n    // Check environment variables\n    const apiKeyPresent = !!process.env.REACT_APP_OPENAI_API_KEY;\n    const apiKeyPreview = process.env.REACT_APP_OPENAI_API_KEY \n      ? process.env.REACT_APP_OPENAI_API_KEY.substring(0, 20) + '...'\n      : 'Not found';\n\n    setStatus({\n      apiKeyPresent,\n      apiKeyPreview,\n      environment: process.env.NODE_ENV || 'unknown',\n      timestamp: new Date().toISOString()\n    });\n\n\n  }, []);\n\n  const testTriageSystem = async () => {\n    setTesting(true);\n    setTestResult(null);\n\n    try {\n      const testMessages = [\n        {\n          id: '1',\n          type: 'user',\n          content: 'My dog is sick',\n          timestamp: new Date().toISOString()\n        }\n      ];\n\n      const region = {\n        name: 'Australia',\n        currency: 'AUD',\n        guidelines: 'Australian Veterinary Guidelines',\n        terminology: 'Australian veterinary terminology'\n      };\n\n      const response = await openaiService.generateTriageResponse(testMessages, region);\n      \n      setTestResult({\n        success: true,\n        message: 'Triage system working correctly!',\n        response: response.content.substring(0, 200) + '...',\n        analysis: response.analysis\n      });\n\n    } catch (error) {\n      console.error('Triage test failed:', error);\n      setTestResult({\n        success: false,\n        message: 'Triage system test failed',\n        error: error.message,\n        details: {\n          status: error.response?.status,\n          data: error.response?.data\n        }\n      });\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg\">\n      <h2 className=\"text-2xl font-bold mb-6 text-gray-800\">🎯 Luni Triage System Status</h2>\n      \n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* API Configuration */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"text-lg font-semibold mb-3 text-gray-700\">🔑 API Configuration</h3>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">OpenAI API Key:</span>\n              <span className={`text-sm font-medium ${status.apiKeyPresent ? 'text-green-600' : 'text-red-600'}`}>\n                {status.apiKeyPresent ? '✅ Present' : '❌ Missing'}\n              </span>\n            </div>\n            {status.apiKeyPresent && (\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Key Preview:</span>\n                <span className=\"text-xs font-mono text-gray-500\">{status.apiKeyPreview}</span>\n              </div>\n            )}\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Environment:</span>\n              <span className=\"text-sm font-medium text-blue-600\">{status.environment}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* System Status */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"text-lg font-semibold mb-3 text-gray-700\">⚡ System Status</h3>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Triage Mode:</span>\n              <span className={`text-sm font-medium ${status.apiKeyPresent ? 'text-green-600' : 'text-red-600'}`}>\n                {status.apiKeyPresent ? '🤖 AI-Powered' : '❌ Unavailable'}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">6-Criteria System:</span>\n              <span className=\"text-sm font-medium text-green-600\">✅ Active</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Emergency Override:</span>\n              <span className=\"text-sm font-medium text-green-600\">✅ Active</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Regional Support:</span>\n              <span className=\"text-sm font-medium text-green-600\">✅ AU/NZ</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Current Issue Explanation */}\n      {!status.apiKeyPresent && (\n        <div className=\"mt-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n          <h4 className=\"text-lg font-semibold text-red-800 mb-2\">❌ System Unavailable</h4>\n          <div className=\"text-sm text-red-700 space-y-2\">\n            <p><strong>Issue:</strong> OpenAI API key is not detected in the React environment.</p>\n            <p><strong>Current Behavior:</strong> Triage system is non-functional without API key.</p>\n            <p><strong>Required for Operation:</strong></p>\n            <ul className=\"list-disc list-inside ml-4 space-y-1\">\n              <li>❌ Valid OpenAI API key</li>\n              <li>❌ GPT-4 model access</li>\n              <li>❌ Internet connectivity</li>\n              <li>❌ Proper environment configuration</li>\n            </ul>\n            <p className=\"mt-3\"><strong>Note:</strong> Mock responses have been removed for production use.</p>\n          </div>\n        </div>\n      )}\n\n      {status.apiKeyPresent && (\n        <div className=\"mt-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\n          <h4 className=\"text-lg font-semibold text-green-800 mb-2\">🎯 AI-Powered Mode Active</h4>\n          <div className=\"text-sm text-green-700\">\n            <p><strong>Status:</strong> OpenAI GPT-4 integration is active and ready.</p>\n            <p><strong>Features:</strong> Full AI-powered triage with real-time OpenAI responses.</p>\n          </div>\n        </div>\n              )}\n\n        {/* Test Button */}\n        {status.apiKeyPresent && (\n          <div className=\"mt-6 p-4 bg-gray-50 border border-gray-200 rounded-lg\">\n            <h4 className=\"text-lg font-semibold text-gray-800 mb-3\">🧪 System Test</h4>\n            <button\n              onClick={testTriageSystem}\n              disabled={testing}\n              className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n            >\n              {testing ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Testing...\n                </>\n              ) : (\n                'Test Triage System'\n              )}\n            </button>\n            \n            {testResult && (\n              <div className={`mt-4 p-3 rounded-lg ${\n                testResult.success ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'\n              }`}>\n                <h5 className={`font-medium mb-2 ${\n                  testResult.success ? 'text-green-800' : 'text-red-800'\n                }`}>\n                  {testResult.success ? '✅ Test Passed' : '❌ Test Failed'}\n                </h5>\n                <p className={`text-sm mb-2 ${\n                  testResult.success ? 'text-green-700' : 'text-red-700'\n                }`}>\n                  {testResult.message}\n                </p>\n                \n                {testResult.success && testResult.response && (\n                  <div className=\"mt-2\">\n                    <p className=\"text-xs text-green-600 font-medium\">AI Response:</p>\n                    <p className=\"text-xs text-green-700 bg-green-100 p-2 rounded mt-1\">\n                      {testResult.response}\n                    </p>\n                  </div>\n                )}\n                \n                {!testResult.success && (\n                  <div className=\"mt-2\">\n                    <p className=\"text-xs text-red-600 font-medium\">Error Details:</p>\n                    <p className=\"text-xs text-red-700 bg-red-100 p-2 rounded mt-1 font-mono\">\n                      {testResult.error}\n                    </p>\n                    {testResult.details && (\n                      <pre className=\"text-xs text-red-600 bg-red-50 p-2 rounded mt-1 overflow-auto\">\n                        {JSON.stringify(testResult.details, null, 2)}\n                      </pre>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Troubleshooting */}\n      <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n        <h4 className=\"text-lg font-semibold text-blue-800 mb-2\">🛠️ Troubleshooting</h4>\n        <div className=\"text-sm text-blue-700 space-y-2\">\n          <p><strong>If system is unavailable:</strong></p>\n          <ol className=\"list-decimal list-inside ml-4 space-y-1\">\n            <li>Ensure .env file exists in project root</li>\n            <li>Verify REACT_APP_OPENAI_API_KEY is set in .env</li>\n            <li>Restart the React development server (npm start)</li>\n            <li>Check browser console for debug messages</li>\n            <li>Verify OpenAI API key has sufficient credits</li>\n            <li>Test API connectivity</li>\n          </ol>\n          <p className=\"mt-3\"><strong>Note:</strong> System requires valid OpenAI API key to function.</p>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div className=\"mt-6 pt-4 border-t border-gray-200 text-center\">\n        <p className=\"text-xs text-gray-500\">\n          Last checked: {new Date(status.timestamp).toLocaleString()}\n        </p>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          Enhanced Luni Triage System v2.0 - 6-Criteria Assessment\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default TriageStatus;"],"names":["analyzeSymptoms","symptoms","petInfo","success","data","urgency","recommendations","possibleCauses","nextSteps","error","message","generateHealthReport","triageData","report","timestamp","Date","toISOString","getTriageRecommendation","petDetails","recommendation","confidence","TriageStatus","status","setStatus","useState","apiKeyPresent","apiKeyPreview","environment","testResult","setTestResult","testing","setTesting","useEffect","process","REACT_APP_OPENAI_API_KEY","substring","_jsxs","className","children","_jsx","onClick","async","testMessages","id","type","content","region","name","currency","guidelines","terminology","response","openaiService","generateTriageResponse","analysis","_error$response","_error$response2","console","details","disabled","_Fragment","JSON","stringify","toLocaleString"],"sourceRoot":""}