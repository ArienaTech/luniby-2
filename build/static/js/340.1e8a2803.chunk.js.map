{"version":3,"file":"static/js/340.1e8a2803.chunk.js","mappings":"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","sources":["components/PetsDiagnostic.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst PetsDiagnostic = () => {\n  const [pets, setPets] = useState([]);\n  const [healthRecords, setHealthRecords] = useState([]);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadDiagnosticData();\n  }, []);\n\n  const loadDiagnosticData = async () => {\n    try {\n      // Get current user\n      const { data: { user }, error: userError } = await supabase.auth.getUser();\n      if (userError || !user) {\n        console.log('No user found');\n        setLoading(false);\n        return;\n      }\n      setUser(user);\n\n      // Get pets for this user\n      const { data: petsData, error: petsError } = await supabase\n        .from('pets')\n        .select('*')\n        .eq('owner_id', user.id)\n        .order('created_at', { ascending: false });\n\n      if (petsError) {\n        console.error('Error loading pets:', petsError);\n      } else {\n        setPets(petsData || []);\n      }\n\n      // Get health records\n      const { data: healthData, error: healthError } = await supabase\n        .from('health_records')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(10);\n\n      if (healthError) {\n        console.error('Error loading health records:', healthError);\n      } else {\n        setHealthRecords(healthData || []);\n      }\n\n    } catch (error) {\n      console.error('Error loading diagnostic data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const testHealthRecordCreation = async (petId) => {\n    try {\n      console.log('Testing health record creation for pet:', petId);\n      \n      const testData = {\n        record_type: 'checkup',\n        title: 'Test Health Record',\n        description: 'This is a test record',\n        date_performed: new Date().toISOString().split('T')[0],\n        notes: 'Test notes'\n      };\n\n      const { data, error } = await supabase\n        .from('health_records')\n        .insert([{\n          pet_id: petId,\n          ...testData,\n          created_at: new Date().toISOString()\n        }])\n        .select()\n        .single();\n\n      if (error) {\n        alert(`‚ùå Test failed: ${error.message}`);\n        console.error('Test error:', error);\n      } else {\n        alert('‚úÖ Test successful! Health record created.');\n        console.log('Test success:', data);\n        loadDiagnosticData(); // Refresh data\n      }\n    } catch (error) {\n      alert(`‚ùå Exception: ${error.message}`);\n      console.error('Test exception:', error);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"p-6\">Loading diagnostic data...</div>;\n  }\n\n  if (!user) {\n    return <div className=\"p-6\">Please sign in to run diagnostics.</div>;\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <div className=\"bg-white rounded-xl shadow-lg p-6\">\n        <h2 className=\"text-2xl font-bold mb-6 text-gray-900\">\n          üî¨ Pets & Health Records Diagnostic\n        </h2>\n\n        {/* User Info */}\n        <div className=\"mb-6 p-4 bg-blue-50 rounded-lg\">\n          <h3 className=\"font-semibold text-blue-900 mb-2\">Current User</h3>\n          <p className=\"text-blue-700\">Email: {user.email}</p>\n          <p className=\"text-blue-700\">ID: {user.id}</p>\n        </div>\n\n        {/* Pets Table */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Your Pets ({pets.length})\n            </h3>\n            <button\n              onClick={loadDiagnosticData}\n              className=\"bg-gray-600 text-white px-3 py-1 rounded text-sm hover:bg-gray-700\"\n            >\n              Refresh\n            </button>\n          </div>\n          \n          {pets.length === 0 ? (\n            <div className=\"p-4 bg-yellow-50 rounded-lg\">\n              <p className=\"text-yellow-800\">No pets found. This might be the issue!</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">ID</th>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Name</th>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Species</th>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Owner ID</th>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Created</th>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Test</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200\">\n                  {pets.map((pet) => (\n                    <tr key={pet.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-4 py-2 text-sm font-mono text-gray-900\">{pet.id}</td>\n                      <td className=\"px-4 py-2 text-sm text-gray-900\">{pet.name}</td>\n                      <td className=\"px-4 py-2 text-sm text-gray-900\">{pet.species}</td>\n                      <td className=\"px-4 py-2 text-sm font-mono text-gray-500\">{pet.owner_id}</td>\n                      <td className=\"px-4 py-2 text-sm text-gray-500\">\n                        {new Date(pet.created_at).toLocaleDateString()}\n                      </td>\n                      <td className=\"px-4 py-2\">\n                        <button\n                          onClick={() => testHealthRecordCreation(pet.id)}\n                          className=\"bg-green-600 text-white px-2 py-1 rounded text-xs hover:bg-green-700\"\n                        >\n                          Test Health Record\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n\n        {/* Health Records Table */}\n        <div className=\"mb-8\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Recent Health Records ({healthRecords.length})\n          </h3>\n          \n          {healthRecords.length === 0 ? (\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <p className=\"text-gray-600\">No health records found.</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">ID</th>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Pet ID</th>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Title</th>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Type</th>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Date</th>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Created</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200\">\n                  {healthRecords.map((record) => {\n                    const petExists = pets.find(p => p.id === record.pet_id);\n                    return (\n                      <tr key={record.id} className={`hover:bg-gray-50 ${!petExists ? 'bg-red-50' : ''}`}>\n                        <td className=\"px-4 py-2 text-sm font-mono text-gray-900\">{record.id}</td>\n                        <td className=\"px-4 py-2 text-sm font-mono text-gray-900\">\n                          {record.pet_id}\n                          {!petExists && <span className=\"text-red-600 ml-2\">‚ùå</span>}\n                        </td>\n                        <td className=\"px-4 py-2 text-sm text-gray-900\">{record.title}</td>\n                        <td className=\"px-4 py-2 text-sm text-gray-900\">{record.record_type}</td>\n                        <td className=\"px-4 py-2 text-sm text-gray-500\">\n                          {record.date_performed ? new Date(record.date_performed).toLocaleDateString() : 'N/A'}\n                        </td>\n                        <td className=\"px-4 py-2 text-sm text-gray-500\">\n                          {new Date(record.created_at).toLocaleDateString()}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n\n        {/* Diagnostic Info */}\n        <div className=\"bg-gray-50 rounded-lg p-4\">\n          <h4 className=\"font-semibold text-gray-900 mb-2\">Diagnostic Info</h4>\n          <ul className=\"text-sm text-gray-700 space-y-1\">\n            <li>‚Ä¢ Total pets found: {pets.length}</li>\n            <li>‚Ä¢ Total health records: {healthRecords.length}</li>\n            <li>‚Ä¢ Orphaned health records: {healthRecords.filter(r => !pets.find(p => p.id === r.pet_id)).length}</li>\n            <li>‚Ä¢ User ID: {user.id}</li>\n          </ul>\n        </div>\n\n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"font-semibold text-blue-900 mb-2\">Troubleshooting Steps:</h4>\n          <ol className=\"text-sm text-blue-700 space-y-1 list-decimal list-inside\">\n            <li>Check if you have any pets in the table above</li>\n            <li>If no pets, create a pet first in the dashboard</li>\n            <li>Use the \"Test Health Record\" button to verify foreign key works</li>\n            <li>Check browser console for detailed error messages</li>\n            <li>Refresh this page after creating/updating pets</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PetsDiagnostic;"],"names":["PetsDiagnostic","pets","setPets","useState","healthRecords","setHealthRecords","user","setUser","loading","setLoading","useEffect","loadDiagnosticData","async","data","error","userError","supabase","auth","getUser","console","log","petsData","petsError","from","select","eq","id","order","ascending","healthData","healthError","limit","_jsx","className","children","_jsxs","email","length","onClick","map","pet","name","species","owner_id","Date","created_at","toLocaleDateString","petId","testData","record_type","title","description","date_performed","toISOString","split","notes","insert","pet_id","single","alert","message","testHealthRecordCreation","record","petExists","find","p","filter","r"],"sourceRoot":""}