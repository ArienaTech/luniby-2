{"version":3,"file":"static/js/911.7e0c0da6.chunk.js","mappings":"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","sources":["components/SignIn.js","utils/roleUtils.js"],"sourcesContent":["import { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { supabase } from '../lib/supabase.js';\nimport { signInWithRetry, handleSupabaseError } from '../lib/supabase-utils.js';\nimport { getDashboardRoute } from '../utils/roleUtils.js';\n\nconst SignIn = () => {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [pendingMessage, setPendingMessage] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n    // Clear error and pending message when user starts typing\n    if (error) setError('');\n    if (pendingMessage) setPendingMessage('');\n  };\n\n  // New feature: Anonymous sign-in (from Supabase GA Week updates)\n  const handleAnonymousSignIn = async () => {\n    setLoading(true);\n    setError('');\n    setPendingMessage('');\n\n    try {\n      const { error } = await supabase.auth.signInAnonymously();\n      \n      if (error) {\n        setError(error.message);\n        return;\n      }\n\n      // Navigate to marketplace for anonymous users\n      navigate('/marketplace');\n    } catch (err) {\n      setError('Failed to sign in anonymously. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setPendingMessage('');\n\n    try {\n      // Use enhanced sign-in with retry logic\n      await signInWithRetry({\n        email: formData.email,\n        password: formData.password,\n      });\n\n      // Get user profile to check role and validate authentication\n      const { data: { user: currentUser }, error: userError } = await supabase.auth.getUser();\n      \n      if (userError) {\n        console.error('SignIn Debug - Error getting user:', userError);\n        setError('Authentication failed. Please try again.');\n        setLoading(false);\n        return;\n      }\n\n      if (!currentUser) {\n        console.log('SignIn Debug - No authenticated user found');\n        setError('Authentication failed. Please try signing in again.');\n        setLoading(false);\n        return;\n      }\n\n      console.log('SignIn Debug - Authenticated user:', currentUser.email);\n\n      // Try to get user profile\n      const { data: profile, error: profileError } = await supabase\n        .from('profiles')\n        .select('role, email, id')\n        .eq('id', currentUser.id)\n        .single();\n\n      if (profileError && profileError.code !== 'PGRST116') {\n        // PGRST116 = no rows returned, other errors are actual problems\n        console.error('SignIn Debug - Profile query error:', profileError);\n        setError('Error loading user profile. Please try again.');\n        setLoading(false);\n        return;\n      }\n\n      if (profile) {\n        // Profile exists - validate role\n        console.log('SignIn Debug - Profile found:', profile);\n        console.log('SignIn Debug - Role:', profile.role);\n        console.log('SignIn Debug - User email:', currentUser.email);\n        \n        // Check if user has trainer role or is a known trainer\n        if (currentUser.email === 'tim-davis909@gmail.com' || profile?.role === 'trainer') {\n          console.log('🔄 SignIn Debug - Trainer detected, redirecting to trainer dashboard');\n          navigate('/trainer-dashboard');\n          return;\n        }\n        \n        if (!profile.role) {\n          console.log('SignIn Debug - Profile exists but no role assigned');\n          setError('Your account is not properly configured. Please contact support.');\n          setLoading(false);\n          return;\n        }\n\n        // Valid profile with role - redirect based on role\n        console.log('SignIn Debug - Checking role for redirect:', profile.role);\n        \n        // Check for admin role first (highest priority)\n        if (profile.role === 'admin') {\n          console.log('👑 SignIn Debug - ADMIN DETECTED - Redirecting to admin dashboard');\n          navigate('/admin');\n          return;\n        }\n        \n        // Check user_type from user metadata first (like navbar does)\n        const userTypeFromMetadata = currentUser?.user_metadata?.user_type;\n        console.log('SignIn Debug - User type from metadata:', userTypeFromMetadata);\n        \n        // Use user_type from metadata as the primary role source\n        let effectiveRole = userTypeFromMetadata || profile.role;\n        console.log('SignIn Debug - Effective role after metadata check:', effectiveRole);\n        \n        // Always check provider type to handle trainer accounts correctly\n        console.log('SignIn Debug - Checking provider_type for user...');\n        const { data: providerData, error: providerError } = await supabase\n          .from('providers')\n          .select('provider_type')\n          .eq('user_id', currentUser.id)\n          .single();\n        \n        console.log('SignIn Debug - Provider query result:', { providerData, providerError });\n        console.log('SignIn Debug - Provider type found:', providerData?.provider_type);\n        \n        // Override role based on provider_type for specific cases\n        if (providerData?.provider_type === 'groomer') {\n          effectiveRole = 'groomer';\n          console.log('SignIn Debug - Setting effectiveRole to groomer based on provider_type');\n        } else if (providerData?.provider_type === 'trainer') {\n          effectiveRole = 'trainer';\n          console.log('SignIn Debug - Setting effectiveRole to trainer based on provider_type');\n        } else if (providerData?.provider_type === 'breeder') {\n          effectiveRole = 'breeder';\n          console.log('SignIn Debug - Setting effectiveRole to breeder based on provider_type');\n        } else if (providerData?.provider_type === 'nutritionist') {\n          effectiveRole = 'nutritionist';\n          console.log('SignIn Debug - Setting effectiveRole to nutritionist based on provider_type');\n        } else if (providerData?.provider_type === 'pet_business') {\n          effectiveRole = 'pet_business';\n          console.log('SignIn Debug - Setting effectiveRole to pet_business based on provider_type');\n        } else if (providerData?.provider_type === 'holistic_care') {\n          effectiveRole = 'holistic_care';\n          console.log('SignIn Debug - Setting effectiveRole to holistic_care based on provider_type');\n        } else if (providerData?.provider_type) {\n          console.log('SignIn Debug - Found provider_type but no specific mapping:', providerData.provider_type);\n          // For other provider types, keep the original profile role or set to provider\n          if (profile.role === 'pet_owner' || !profile.role) {\n            effectiveRole = 'provider';\n            console.log('SignIn Debug - Upgrading pet_owner to provider based on provider_type');\n          }\n        } else {\n          console.log('SignIn Debug - No provider record found, using profile role:', profile.role);\n        }\n        \n        // Use getDashboardRoute for consistent role-based routing\n        const dashboardRoute = getDashboardRoute(effectiveRole);\n        \n        console.log('SignIn Debug - Final routing decision:');\n        console.log('  - Original profile role:', profile.role);\n        console.log('  - Provider type:', providerData?.provider_type);\n        console.log('  - Effective role:', effectiveRole);\n        console.log('  - Dashboard route:', dashboardRoute);\n        console.log('  - User email:', currentUser.email);\n        \n        // Special handling for veterinarian role (redirect to veterinarian-portal instead of dashboard)\n        if (effectiveRole === 'veterinarian') {\n          console.log('🏥 SignIn Debug - VETERINARIAN DETECTED - Redirecting to /veterinarian-portal');\n          navigate('/veterinarian-portal');\n        } else {\n          console.log(`✅ SignIn Debug - Redirecting user '${currentUser.email}' with effectiveRole '${effectiveRole}' to ${dashboardRoute}`);\n          navigate(dashboardRoute);\n        }\n      } else {\n        // No profile found - check user metadata first, then provider record\n        console.log('SignIn Debug - No profile found for user:', currentUser.email);\n        \n        // Check user_type from user metadata first (like navbar does)\n        const userTypeFromMetadata = currentUser?.user_metadata?.user_type;\n        console.log('SignIn Debug - User type from metadata:', userTypeFromMetadata);\n        \n        if (userTypeFromMetadata) {\n          // User has role in metadata, route them to appropriate dashboard\n          const dashboardRoute = getDashboardRoute(userTypeFromMetadata);\n          console.log('SignIn Debug - Routing based on metadata to:', dashboardRoute);\n          navigate(dashboardRoute);\n          return;\n        }\n        \n        // Check if this user has a provider record to determine their role\n        try {\n          const { data: providerData, error: providerError } = await supabase\n            .from('providers')\n            .select('provider_type')\n            .eq('user_id', currentUser.id)\n            .single();\n          \n          if (providerData?.provider_type) {\n            console.log('SignIn Debug - Found provider type:', providerData.provider_type);\n            \n            let effectiveRole = 'pet_owner'; // Default fallback\n            if (providerData.provider_type === 'groomer') {\n              effectiveRole = 'groomer';\n            } else if (providerData.provider_type === 'trainer') {\n              effectiveRole = 'trainer';\n            } else if (providerData.provider_type === 'breeder') {\n              effectiveRole = 'breeder';\n            } else if (providerData.provider_type === 'nutritionist') {\n              effectiveRole = 'nutritionist';\n            } else if (providerData.provider_type === 'pet_business') {\n              effectiveRole = 'pet_business';\n            } else if (providerData.provider_type === 'holistic_care') {\n              effectiveRole = 'holistic_care';\n            }\n            \n            const dashboardRoute = getDashboardRoute(effectiveRole);\n            console.log('SignIn Debug - Redirecting provider to:', dashboardRoute);\n            navigate(dashboardRoute);\n          } else {\n            console.log('SignIn Debug - No provider record found, defaulting to pet owner dashboard');\n            navigate('/pet-owner-dashboard');\n          }\n        } catch (error) {\n          console.log('SignIn Debug - Error checking provider record, defaulting to pet owner dashboard');\n          navigate('/pet-owner-dashboard');\n        }\n      }\n\n    } catch (error) {\n      const supabaseError = handleSupabaseError(error, 'sign in');\n      setError(supabaseError.message);\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    setLoading(true);\n    setError('');\n\n    try {\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${window.location.origin}/auth/callback`\n        }\n      });\n\n      if (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    } catch (error) {\n      setError('Failed to sign in with Google. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  const handleForgotPassword = async () => {\n    if (!formData.email) {\n      setError('Please enter your email address first.');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(formData.email, {\n        redirectTo: `${window.location.origin}/reset-password`,\n      });\n\n      if (error) {\n        setError(error.message);\n      } else {\n        setError('Password reset email sent! Check your inbox.');\n      }\n    } catch (error) {\n      setError('Failed to send reset email. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <h2 className=\"text-center text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900 font-montserrat leading-tight\">\n          Sign in to your account\n        </h2>\n        <p className=\"mt-2 text-center text-sm text-gray-600 font-montserrat\">\n          Or{' '}\n          <Link\n            to=\"/signup\"\n            className=\"font-medium text-[#5EB47C] hover:text-[#4A9A64] transition-colors\"\n          >\n            create a new account\n          </Link>\n        </p>\n      </div>\n\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-white py-8 px-4 shadow-lg sm:rounded-2xl sm:px-10 border border-gray-200\">\n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-xl font-montserrat text-sm\">\n                {error}\n              </div>\n            )}\n\n            {pendingMessage && (\n              <div className=\"bg-orange-50 border border-orange-200 text-orange-700 px-4 py-3 rounded-xl font-montserrat text-sm whitespace-pre-line\">\n                {pendingMessage}\n              </div>\n            )}\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                Email address\n              </label>\n              <div className=\"mt-1\">\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={handleChange}\n                  className=\"appearance-none block w-full px-3 py-3 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                Password\n              </label>\n              <div className=\"mt-1 relative\">\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"current-password\"\n                  required\n                  value={formData.password}\n                  onChange={handleChange}\n                  className=\"appearance-none block w-full px-3 py-3 pr-10 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                  placeholder=\"Enter your password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\n                    </svg>\n                  ) : (\n                    <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                    </svg>\n                  )}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <input\n                  id=\"remember-me\"\n                  name=\"remember-me\"\n                  type=\"checkbox\"\n                  className=\"h-4 w-4 text-[#5EB47C] focus:ring-[#5EB47C] border-gray-300 rounded\"\n                />\n                <label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-900 font-montserrat\">\n                  Remember me\n                </label>\n              </div>\n\n              <div className=\"text-sm\">\n                <button\n                  type=\"button\"\n                  onClick={handleForgotPassword}\n                  className=\"font-medium text-[#5EB47C] hover:text-[#4A9A64] transition-colors font-montserrat\"\n                >\n                  Forgot your password?\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className=\"group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-xl text-white bg-[#5EB47C] hover:bg-[#4A9A64] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#5EB47C] disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-montserrat\"\n              >\n                {loading ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Signing in...\n                  </div>\n                ) : (\n                  'Sign in'\n                )}\n              </button>\n            </div>\n\n            <div className=\"mt-6\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-gray-300\" />\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"px-2 bg-white text-gray-500 font-montserrat\">Or continue with</span>\n                </div>\n              </div>\n\n              <div className=\"mt-6 space-y-3\">\n                <button\n                  type=\"button\"\n                  onClick={handleGoogleSignIn}\n                  disabled={loading}\n                  className=\"w-full inline-flex justify-center py-3 px-4 border border-gray-300 rounded-xl shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#5EB47C] disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-montserrat\"\n                >\n                  <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n                    <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                    <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                    <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                    <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                  </svg>\n                  Sign in with Google\n                </button>\n\n                {/* New Anonymous Sign-in Feature */}\n                <button\n                  type=\"button\"\n                  onClick={handleAnonymousSignIn}\n                  disabled={loading}\n                  className=\"w-full inline-flex justify-center py-3 px-4 border border-gray-300 rounded-xl shadow-sm bg-gray-50 text-sm font-medium text-gray-600 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#5EB47C] disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-montserrat\"\n                >\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"/>\n                  </svg>\n                  Browse as Guest\n                </button>\n              </div>\n            </div>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600 font-montserrat\">\n              Are you a pet care provider?{' '}\n              <Link\n                to=\"/provider-signup\"\n                className=\"font-medium text-[#5EB47C] hover:text-[#4A9A64] transition-colors\"\n              >\n                Join as a Provider\n              </Link>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;","// Role-based utility functions\nimport { supabase } from '../lib/supabase';\n\n// User roles constants\nexport const USER_ROLES = {\n  PET_OWNER: 'pet_owner',\n  VETERINARIAN: 'veterinarian',\n  VET_NURSE: 'vet_nurse',\n  GROOMER: 'groomer',\n  TRAINER: 'trainer',\n  BREEDER: 'breeder',\n  NUTRITIONIST: 'nutritionist',\n  PET_BUSINESS: 'pet_business',\n  HOLISTIC_CARE: 'holistic_care',\n  ADMIN: 'admin',\n  SUPPORT: 'support'\n};\n\n// Get dashboard route based on user role\nexport const getDashboardRoute = (role) => {\n  const roleRoutes = {\n    [USER_ROLES.PET_OWNER]: '/pet-owner-dashboard',\n    [USER_ROLES.VETERINARIAN]: '/veterinarian-portal',\n    [USER_ROLES.VET_NURSE]: '/vet-nurse-dashboard',\n    [USER_ROLES.GROOMER]: '/groomer-dashboard',\n    [USER_ROLES.TRAINER]: '/trainer-dashboard',\n    [USER_ROLES.BREEDER]: '/breeder-dashboard',\n    [USER_ROLES.NUTRITIONIST]: '/nutritionist-dashboard',\n    [USER_ROLES.PET_BUSINESS]: '/pet-business-dashboard',\n    [USER_ROLES.HOLISTIC_CARE]: '/holistic-care-dashboard',\n    [USER_ROLES.ADMIN]: '/admin',\n    [USER_ROLES.SUPPORT]: '/support-dashboard'\n  };\n\n  return roleRoutes[role] || '/pet-owner-dashboard'; // Default to pet owner dashboard\n};\n\n// Ensure pet owner access\nexport const ensurePetOwnerAccess = async () => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return {\n        success: false,\n        error: 'Not authenticated',\n        shouldRedirect: true,\n        redirectTo: '/signin'\n      };\n    }\n\n    // Get user role from metadata\n    const userRole = user.user_metadata?.role || user.app_metadata?.role || USER_ROLES.PET_OWNER;\n\n    // Allow access to pet owners and admins\n    if (userRole === USER_ROLES.PET_OWNER || userRole === USER_ROLES.ADMIN) {\n      return {\n        success: true,\n        user,\n        role: userRole\n      };\n    }\n\n    // User has a different role - redirect to their dashboard\n    return {\n      success: false,\n      error: 'Access denied - wrong role',\n      shouldRedirect: true,\n      redirectTo: getDashboardRoute(userRole),\n      role: userRole\n    };\n  } catch (error) {\n    console.error('Error checking pet owner access:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to verify access',\n      shouldRedirect: true,\n      redirectTo: '/signin'\n    };\n  }\n};\n\n// Check if user has specific role\nexport const hasRole = async (requiredRole) => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return false;\n    }\n\n    const userRole = user.user_metadata?.role || user.app_metadata?.role;\n    \n    // Admin has access to everything\n    if (userRole === USER_ROLES.ADMIN) {\n      return true;\n    }\n\n    return userRole === requiredRole;\n  } catch (error) {\n    console.error('Error checking role:', error);\n    return false;\n  }\n};\n\n// Get user role\nexport const getUserRole = async () => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return null;\n    }\n\n    return user.user_metadata?.role || user.app_metadata?.role || USER_ROLES.PET_OWNER;\n  } catch (error) {\n    console.error('Error getting user role:', error);\n    return null;\n  }\n};\n\n// Check if user is admin\nexport const isAdmin = async () => {\n  return await hasRole(USER_ROLES.ADMIN);\n};\n\n// Check if user is provider (any type of service provider)\nexport const isProvider = async () => {\n  const providerRoles = [\n    USER_ROLES.VETERINARIAN,\n    USER_ROLES.VET_NURSE,\n    USER_ROLES.GROOMER,\n    USER_ROLES.TRAINER,\n    USER_ROLES.BREEDER,\n    USER_ROLES.NUTRITIONIST,\n    USER_ROLES.PET_BUSINESS,\n    USER_ROLES.HOLISTIC_CARE\n  ];\n\n  try {\n    const userRole = await getUserRole();\n    return providerRoles.includes(userRole);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport default {\n  USER_ROLES,\n  getDashboardRoute,\n  ensurePetOwnerAccess,\n  hasRole,\n  getUserRole,\n  isAdmin,\n  isProvider\n};\n"],"names":["SignIn","formData","setFormData","useState","email","password","loading","setLoading","error","setError","pendingMessage","setPendingMessage","showPassword","setShowPassword","navigate","useNavigate","handleChange","e","target","name","value","_jsxs","className","children","_jsx","Link","to","onSubmit","async","preventDefault","signInWithRetry","data","user","currentUser","userError","supabase","auth","getUser","console","log","profile","profileError","from","select","eq","id","single","code","_currentUser$user_met","role","userTypeFromMetadata","user_metadata","user_type","effectiveRole","providerData","providerError","provider_type","dashboardRoute","getDashboardRoute","_currentUser$user_met2","supabaseError","handleSupabaseError","message","htmlFor","type","autoComplete","required","onChange","placeholder","onClick","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","resetPasswordForEmail","redirectTo","window","location","origin","disabled","signInWithOAuth","provider","options","signInAnonymously","err","USER_ROLES","PET_OWNER","VETERINARIAN","VET_NURSE","GROOMER","TRAINER","BREEDER","NUTRITIONIST","PET_BUSINESS","HOLISTIC_CARE","ADMIN","SUPPORT","ensurePetOwnerAccess","_user$user_metadata","_user$app_metadata","success","shouldRedirect","userRole","app_metadata"],"sourceRoot":""}