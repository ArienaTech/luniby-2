{"version":3,"file":"static/js/560.24a0bc43.chunk.js","mappings":"0LACO,MAAMA,EAAe,CAE1B,sBAAMC,CAAiBC,EAAOC,GAC5B,IAGE,OADAC,QAAQC,IAAI,4BAA4BH,SAAaC,KAC9C,CACLG,SAAS,EACTC,QAAS,kCAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,+BAAgCA,GACvC,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,+BAE5B,CACF,EAGA,2BAAME,CAAsBP,EAAOQ,GACjC,IAEE,OADAN,QAAQC,IAAI,iCAAiCH,KACtC,CACLI,SAAS,EACTC,QAAS,uCAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,oCAAqCA,GAC5C,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,oCAE5B,CACF,EAGA,4BAAMI,CAAuBT,EAAOU,GAClC,IAEE,OADAR,QAAQC,IAAI,mCAAmCH,KACxC,CACLI,SAAS,EACTC,QAAS,yCAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,sCAAuCA,GAC9C,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,sCAE5B,CACF,EAGA,2BAAMM,CAAsBX,EAAOY,EAASP,GAC1C,IAEE,OADAH,QAAQC,IAAI,iCAAiCH,MAAUY,KAChD,CACLR,SAAS,EACTC,QAAS,uCAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,oCAAqCA,GAC5C,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,oCAE5B,CACF,EAGA,2BAAMQ,CAAsBb,EAAOc,GACjC,IAEE,OADAZ,QAAQC,IAAI,kCAAkCH,KACvC,CACLI,SAAS,EACTC,QAAS,wCAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,qCAAsCA,GAC7C,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,qCAE5B,CACF,EAGA,sCAAMU,CAAiCf,EAAOgB,GAC5C,IAEE,OADAd,QAAQC,IAAI,6CAA6CH,KAClD,CACLI,SAAS,EACTC,QAAS,mDAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,gDAAiDA,GACxD,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,gDAE5B,CACF,GAGF,G,mECtGO,MAAMY,EAAa,CACxBC,UAAW,YACXC,aAAc,eACdC,UAAW,YACXC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,aAAc,eACdC,aAAc,eACdC,cAAe,gBACfC,MAAO,QACPC,QAAS,WAIEC,EAAqBC,IACb,CACjB,CAACb,EAAWC,WAAY,uBACxB,CAACD,EAAWE,cAAe,uBAC3B,CAACF,EAAWG,WAAY,uBACxB,CAACH,EAAWI,SAAU,qBACtB,CAACJ,EAAWK,SAAU,qBACtB,CAACL,EAAWM,SAAU,qBACtB,CAACN,EAAWO,cAAe,0BAC3B,CAACP,EAAWQ,cAAe,0BAC3B,CAACR,EAAWS,eAAgB,2BAC5B,CAACT,EAAWU,OAAQ,SACpB,CAACV,EAAWW,SAAU,sBAGNE,IAAS,wBAIhBC,EAAuBC,UAClC,IAAK,IAADC,EAAAC,EACF,MAAQC,MAAM,KAAEC,GAAM,MAAE9B,SAAgB+B,EAAAA,EAASC,KAAKC,UAEtD,GAAIjC,IAAU8B,EACZ,MAAO,CACLhC,SAAS,EACTE,MAAO,oBACPkC,gBAAgB,EAChBC,WAAY,WAKhB,MAAMC,GAA6B,QAAlBT,EAAAG,EAAKO,qBAAa,IAAAV,OAAA,EAAlBA,EAAoBH,QAAyB,QAArBI,EAAIE,EAAKQ,oBAAY,IAAAV,OAAA,EAAjBA,EAAmBJ,OAAQb,EAAWC,UAGnF,OAAIwB,IAAazB,EAAWC,WAAawB,IAAazB,EAAWU,MACxD,CACLvB,SAAS,EACTgC,OACAN,KAAMY,GAKH,CACLtC,SAAS,EACTE,MAAO,6BACPkC,gBAAgB,EAChBC,WAAYZ,EAAkBa,GAC9BZ,KAAMY,EAEV,CAAE,MAAOpC,GAEP,OADAJ,QAAQI,MAAM,mCAAoCA,GAC3C,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,0BACxBmC,gBAAgB,EAChBC,WAAY,UAEhB,E,wHCxEF,MAqtBA,EArtBuBI,KAAO,IAADC,EAC3B,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CAEvCC,UAAW,GACXC,SAAU,GACVnD,MAAO,GACPoD,SAAU,GACVC,gBAAiB,GACjBC,MAAO,GAGPC,aAAc,GACdC,aAAc,GACdC,cAAe,GACfC,QAAS,GACTC,KAAM,GACNC,QAAS,YAGTC,cAAc,KAETC,EAASC,IAAcd,EAAAA,EAAAA,WAAS,IAChC3C,EAAO0D,IAAYf,EAAAA,EAAAA,UAAS,KAC5BgB,EAAcC,IAAmBjB,EAAAA,EAAAA,WAAS,IAC1CkB,EAAqBC,IAA0BnB,EAAAA,EAAAA,WAAS,GACzDoB,GAAWC,EAAAA,EAAAA,OAGVC,EAAkBC,IAAuBvB,EAAAA,EAAAA,WAAS,IAClDwB,EAAaC,IAAkBzB,EAAAA,EAAAA,WAAS,GAGzC0B,GAAkBC,EAAAA,EAAAA,QAAO,MACzBC,GAAaD,EAAAA,EAAAA,QAAO,MAEpBE,EAAgB,CACpB,CAAEC,QAAS,eAAgBC,MAAO,eAAgBC,YAAa,yDAC/D,CAAEF,QAAS,YAAaC,MAAO,YAAaC,YAAa,sDACzD,CAAEF,QAAS,WAAYC,MAAO,UAAWC,YAAa,qCACtD,CAAEF,QAAS,WAAYC,MAAO,UAAWC,YAAa,sCACtD,CAAEF,QAAS,WAAYC,MAAO,UAAWC,YAAa,yBACtD,CAAEF,QAAS,gBAAiBC,MAAO,eAAgBC,YAAa,sCAChE,CAAEF,QAAS,eAAgBC,MAAO,eAAgBC,YAAa,uCAC/D,CAAEF,QAAS,gBAAiBC,MAAO,gBAAiBC,YAAa,sCAK7DC,EAAgBC,IACpB,MAAM,KAAElF,EAAI,MAAE+E,EAAK,KAAEI,EAAI,QAAEC,GAAYF,EAAEG,OACzCtC,EAAY,IACPD,EACH,CAAC9C,GAAgB,aAATmF,EAAsBC,EAAUL,IAGtC1E,GAAO0D,EAAS,MA0DtBuB,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAsBC,IACtBd,EAAgBe,UAAYf,EAAgBe,QAAQC,SAASF,EAAMH,SACrEd,GAAoB,GAElBK,EAAWa,UAAYb,EAAWa,QAAQC,SAASF,EAAMH,SAC3DZ,GAAe,IAKnB,OADAkB,SAASC,iBAAiB,YAAaL,GAChC,KACLI,SAASE,oBAAoB,YAAaN,KAE3C,IAoMH,OACEO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6EAA4EC,SAAA,EACzFF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mCAAkCC,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,oGAAmGC,SAAC,iCAGlHF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,yDAAwDC,SAAA,CAAC,2BAC3C,KACzBC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CACHC,GAAG,UACHJ,UAAU,sEAAqEC,SAChF,wBAMLC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wCAAuCC,UACpDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8EAA6EC,SAAA,CACzF3F,IACC4F,EAAAA,EAAAA,KAAA,OAAKF,UAAW,6DACd1F,EAAM+F,SAAS,gBACX,8CACA,yCACHJ,SACA3F,KAILyF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,YAAYM,SA/NftE,UAGnB,GAFAmD,EAAEoB,iBAxEiBC,MACnB,IAAKzD,EAASG,UAAUuD,OAEtB,OADAzC,EAAS,4BACF,EAET,IAAKjB,EAASI,SAASsD,OAErB,OADAzC,EAAS,2BACF,EAET,IAAKjB,EAAS/C,MAAMyG,OAElB,OADAzC,EAAS,uBACF,EAET,GAAIjB,EAASK,SAASsD,OAAS,EAE7B,OADA1C,EAAS,iDACF,EAET,GAAIjB,EAASK,WAAaL,EAASM,gBAEjC,OADAW,EAAS,4BACF,EAET,IAAKjB,EAASO,MAAMmD,OAElB,OADAzC,EAAS,8BACF,EAET,IAAKjB,EAASQ,aAEZ,OADAS,EAAS,mCACF,EAET,GAA8B,iBAA1BjB,EAASQ,aAAiC,CAC5C,IAAKR,EAASS,aAAaiD,OAEzB,OADAzC,EAAS,wDACF,EAET,IAAKjB,EAASU,cAAcgD,OAE1B,OADAzC,EAAS,6DACF,EAET,IAAKjB,EAASW,QAAQ+C,OAEpB,OADAzC,EAAS,kDACF,CAEX,CACA,OAAKjB,EAASY,KAAK8C,SAId1D,EAASc,eACZG,EAAS,+DACF,IALPA,EAAS,sBACF,IA6BJwC,GAAL,CAIAzC,GAAW,GACXC,EAAS,IAET,IACE,MAAM,KAAE7B,EAAM7B,MAAOqG,SAAoBtE,EAAAA,EAASC,KAAKsE,OAAO,CAC5D5G,MAAO+C,EAAS/C,MAChBoD,SAAUL,EAASK,SACnByD,QAAS,CACP1E,KAAM,CACJ2E,WAAY/D,EAASG,UACrB6D,UAAWhE,EAASI,SACpB6D,UAAW,GAAGjE,EAASG,aAAaH,EAASI,WAC7C8D,UAAWlE,EAASQ,aACpBD,MAAOP,EAASO,MAChBI,QAASX,EAASW,QAClBC,KAAMZ,EAASY,KACfC,QAASb,EAASa,QAClBsD,cAAenE,EAASS,iBAK9B,GAAImD,EAAW,CACb,MAAMQ,GAAgBC,EAAAA,EAAAA,IAAoBT,EAAW,oBAGrD,OAFA3C,EAASmD,EAAc9G,cACvB0D,GAAW,EAEb,CAGA,GAAI5B,EAAKC,KACP,IAAK,IAADiF,EAAAC,QAEI,IAAIC,QAAQC,GAAWC,WAAWD,EAAS,MAGjDtH,QAAQC,IAAI,wBAAyB,CACnCoD,aAAcR,EAASQ,aACvBtD,KAAM,GAAG8C,EAASG,aAAaH,EAASI,WACxCnD,MAAO+C,EAAS/C,QAIZmC,EAAKC,KAAKsF,GACL3E,EAASG,UAAaH,EAASI,SACjCJ,EAAS/C,MACT+C,EAASO,MACDP,EAASQ,aACiB,iBAA1BR,EAASQ,cAAkCR,EAASS,aACzB,iBAA1BT,EAASQ,cAAkCR,EAASU,cAC3DV,EAASW,QACZX,EAASY,KACNZ,EAASa,SACsD,QAAhEyD,EAAAvC,EAAc6C,KAAKvC,GAAQA,EAAKJ,QAAUjC,EAASQ,qBAAa,IAAA8D,OAAA,EAAhEA,EAAkEtC,UAAWhC,EAASQ,cAGd,QAAhE+D,EAAAxC,EAAc6C,KAAKvC,GAAQA,EAAKJ,QAAUjC,EAASQ,qBAAa,IAAA+D,OAAA,EAAhEA,EAAkEvC,UAAWhC,EAASQ,cAG1F,IAAIqE,MAAOC,eACX,IAAID,MAAOC,cAMzB3H,QAAQC,IAAI,oEAEZ,CAME,MAAM2H,EAAW,CAAC/E,EAASW,QAASX,EAASY,KAAMZ,EAASa,SACzDmE,OAAOC,SACPC,KAAK,MAER/H,QAAQC,IAAI,2CAAkC4C,EAASQ,cACvD,MAAQpB,KAAM+F,EAAa5H,MAAO6H,SAAuB9F,EAAAA,EACtD+F,KAAK,YACLC,OAAO,CACNX,GAAIvF,EAAKC,KAAKsF,GACd1H,MAAO+C,EAAS/C,MAChBgH,UAAW,GAAGjE,EAASG,aAAaH,EAASI,WAC7CG,MAAOP,EAASO,MAChBwE,SAAUA,EACVQ,aAAcvF,EAASS,aACvB1B,KAAMiB,EAASQ,eAEhBgF,SAECJ,EACFjI,QAAQI,MAAM,iCAA6B6H,IAE3CjI,QAAQC,IAAI,iDAA6C4C,EAASQ,cAClErD,QAAQC,IAAI,6BAAoB+H,IAKlC,IAAK,IAADM,EAAAC,QACI3I,EAAAA,aAAa4I,8BAA8B,CAC/CC,cAAe,GAAG5F,EAASG,aAAaH,EAASI,WACjDyF,eAAgB7F,EAAS/C,MACzBsD,MAAOP,EAASO,MAChBuF,eAA+E,QAAhEL,EAAA1D,EAAc6C,KAAKvC,GAAQA,EAAKJ,QAAUjC,EAASQ,qBAAa,IAAAiF,OAAA,EAAhEA,EAAkEzD,UAAWhC,EAASQ,aACrGI,KAAMZ,EAASY,KACfC,QAASb,EAASa,QAClBF,QAASX,EAASW,QAClBoF,IAAK,IAAmE,QAAhEL,EAAA3D,EAAc6C,KAAKvC,GAAQA,EAAKJ,QAAUjC,EAASQ,qBAAa,IAAAkF,OAAA,EAAhEA,EAAkE1D,UAAWhC,EAASQ,wDAC9FwF,YAAY,IAAInB,MAAOC,eAG3B,CAAE,MAAOmB,GAGP,CAEJ,CACF,CAAE,MAAO1I,GAEP,CAKJJ,QAAQC,IAAI,yDACZD,QAAQC,IAAI,8BAAqB4C,EAASQ,cAG1CkE,WAAWzF,UACT,IAEE,MAAQG,KAAM8G,SAAkB5G,EAAAA,EAC7B+F,KAAK,YACLG,OAAO,mBACPW,GAAG,KAAM/G,EAAKC,KAAKsF,IACnByB,SAEHjJ,QAAQC,IAAI,+CAAsC8I,GAGlD,IAAIG,EAAiB,qBAES,YAA1BrG,EAASQ,cACX6F,EAAiB,qBACjBlJ,QAAQC,IAAI,mFACuB,YAA1B4C,EAASQ,aAClB6F,EAAiB,qBACkB,YAA1BrG,EAASQ,aAClB6F,EAAiB,qBACkB,iBAA1BrG,EAASQ,aAClB6F,EAAiB,0BACkB,iBAA1BrG,EAASQ,aAClB6F,EAAiB,0BACkB,kBAA1BrG,EAASQ,aAClB6F,EAAiB,2BACkB,iBAA1BrG,EAASQ,aAClB6F,EAAiB,uBACkB,cAA1BrG,EAASQ,eAClB6F,EAAiB,wBAGnBlJ,QAAQC,IAAI,gDAAuCiJ,GACnD/E,EAAS+E,EAEX,CAAE,MAAO9I,GACPJ,QAAQI,MAAM,0BAA2BA,GAEX,YAA1ByC,EAASQ,aACXc,EAAS,sBAETA,EAAS,uBAEb,GACC,MAEHN,GAAW,EAEb,CAAE,MAAOzD,GAEP0D,EAAS,mDACTD,GAAW,EACb,CA1LA,GA0NyDkC,SAAA,EACjDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wCAAuCC,SAAA,EACpDF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,YAAYrD,UAAU,0DAAyDC,SAAC,kBAG/FC,EAAAA,EAAAA,KAAA,SACEwB,GAAG,YACHzH,KAAK,YACLmF,KAAK,OACLkE,UAAQ,EACRtE,MAAOjC,EAASG,UAChBqG,SAAUrE,EACVc,UAAU,mMACVwD,YAAY,mBAIhBzD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,WAAWrD,UAAU,0DAAyDC,SAAC,iBAG9FC,EAAAA,EAAAA,KAAA,SACEwB,GAAG,WACHzH,KAAK,WACLmF,KAAK,OACLkE,UAAQ,EACRtE,MAAOjC,EAASI,SAChBoG,SAAUrE,EACVc,UAAU,mMACVwD,YAAY,qBAKlBzD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,QAAQrD,UAAU,0DAAyDC,SAAC,qBAG3FC,EAAAA,EAAAA,KAAA,SACEwB,GAAG,QACHzH,KAAK,QACLmF,KAAK,QACLkE,UAAQ,EACRtE,MAAOjC,EAAS/C,MAChBuJ,SAAUrE,EACVc,UAAU,mMACVwD,YAAY,uBAIhBzD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,QAAQrD,UAAU,0DAAyDC,SAAC,oBAG3FC,EAAAA,EAAAA,KAAA,SACEwB,GAAG,QACHzH,KAAK,QACLmF,KAAK,MACLkE,UAAQ,EACRtE,MAAOjC,EAASO,MAChBiG,SAAUrE,EACVc,UAAU,mMACVwD,YAAY,wBAIhBzD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,WAAWrD,UAAU,0DAAyDC,SAAC,gBAG9FF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,SACEwB,GAAG,WACHzH,KAAK,WACLmF,KAAMnB,EAAe,OAAS,WAC9BqF,UAAQ,EACRtE,MAAOjC,EAASK,SAChBmG,SAAUrE,EACVc,UAAU,oMACVwD,YAAY,uBAEdtD,EAAAA,EAAAA,KAAA,UACEd,KAAK,SACLY,UAAU,oDACVyD,QAASA,IAAMvF,GAAiBD,GAAcgC,SAE7ChC,GACCiC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAwB0D,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YAAW3D,UAC1FC,EAAAA,EAAAA,KAAA,QAAM2D,cAAc,QAAQC,eAAe,QAAQC,YAAY,IAAIC,EAAE,2LAGvEjE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAwB0D,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YAAW3D,SAAA,EAC1FC,EAAAA,EAAAA,KAAA,QAAM2D,cAAc,QAAQC,eAAe,QAAQC,YAAY,IAAIC,EAAE,sCACrE9D,EAAAA,EAAAA,KAAA,QAAM2D,cAAc,QAAQC,eAAe,QAAQC,YAAY,IAAIC,EAAE,qIAK7E9D,EAAAA,EAAAA,KAAA,KAAGF,UAAU,6CAA4CC,SAAC,2CAK5DF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,kBAAkBrD,UAAU,0DAAyDC,SAAC,wBAGrGF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,SACEwB,GAAG,kBACHzH,KAAK,kBACLmF,KAAMjB,EAAsB,OAAS,WACrCmF,UAAQ,EACRtE,MAAOjC,EAASM,gBAChBkG,SAAUrE,EACVc,UAAU,oMACVwD,YAAY,2BAEdtD,EAAAA,EAAAA,KAAA,UACEd,KAAK,SACLY,UAAU,oDACVyD,QAASA,IAAMrF,GAAwBD,GAAqB8B,SAE3D9B,GACC+B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAwB0D,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YAAW3D,UAC1FC,EAAAA,EAAAA,KAAA,QAAM2D,cAAc,QAAQC,eAAe,QAAQC,YAAY,IAAIC,EAAE,2LAGvEjE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAwB0D,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YAAW3D,SAAA,EAC1FC,EAAAA,EAAAA,KAAA,QAAM2D,cAAc,QAAQC,eAAe,QAAQC,YAAY,IAAIC,EAAE,sCACrE9D,EAAAA,EAAAA,KAAA,QAAM2D,cAAc,QAAQC,eAAe,QAAQC,YAAY,IAAIC,EAAE,wIAO/EjE,EAAAA,EAAAA,MAAA,OAAKkE,IAAKtF,EAAgBsB,SAAA,EACxBC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,eAAerD,UAAU,0DAAyDC,SAAC,qBAGlGF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,UACEX,KAAK,SACLqE,QAASA,IAAMjF,GAAqBD,GACpCyB,UAAU,oOAAmOC,SAAA,EAE7OC,EAAAA,EAAAA,KAAA,QAAAD,SACGlD,EAASQ,cAC0D,QAAhET,EAAAgC,EAAc6C,KAAKvC,GAAQA,EAAKJ,QAAUjC,EAASQ,qBAAa,IAAAT,OAAA,EAAhEA,EAAkEiC,UAAWhC,EAASQ,aACtF,0BAEN2C,EAAAA,EAAAA,KAAA,OACEF,UAAW,iCAAgCzB,EAAmB,aAAe,IAC7EmF,KAAK,OACLC,OAAO,eACPC,QAAQ,YAAW3D,UAEnBC,EAAAA,EAAAA,KAAA,QAAM2D,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,wBAIxEzF,IACCwB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4KAA2KC,SAAA,EACxLC,EAAAA,EAAAA,KAAA,UACEd,KAAK,SACLqE,QAASA,KACPzG,EAAY,IAAID,EAAUQ,aAAc,KACxCiB,GAAoB,IAEtBwB,UAAW,kFACRjD,EAASQ,aAA+C,gBAAhC,+BACxB0C,SACJ,yBAGAnB,EAAcoF,IAAI9E,IACjBc,EAAAA,EAAAA,KAAA,UAEEd,KAAK,SACLqE,QAASA,KACPzG,EAAY,IAAID,EAAUQ,aAAc6B,EAAKJ,QAC7CR,GAAoB,IAEtBwB,UAAW,yFACTjD,EAASQ,eAAiB6B,EAAKJ,MAAQ,8BAAgC,iBACtEiB,UAEHF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,SAAEb,EAAKL,WACnCmB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAA4BC,SAAEb,EAAKH,kBAZ/CG,EAAKJ,iBAsBK,iBAA1BjC,EAASQ,eACRwC,EAAAA,EAAAA,MAAAoE,EAAAA,SAAA,CAAAlE,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,eAAerD,UAAU,0DAAyDC,SAAC,4BAGlGC,EAAAA,EAAAA,KAAA,SACEwB,GAAG,eACHzH,KAAK,eACLmF,KAAK,OACLkE,UAAQ,EACRtE,MAAOjC,EAASS,aAChB+F,SAAUrE,EACVc,UAAU,mMACVwD,YAAY,qCAIhBzD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,gBAAgBrD,UAAU,0DAAyDC,SAAC,iCAGnGC,EAAAA,EAAAA,KAAA,SACEwB,GAAG,gBACHzH,KAAK,gBACLmF,KAAK,OACLkE,UAAQ,EACRtE,MAAOjC,EAASU,cAChB8F,SAAUrE,EACVc,UAAU,mMACVwD,YAAY,0CAMpBzD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,UAAUrD,UAAU,0DAAyDC,SAC/D,iBAA1BlD,EAASQ,aAAkC,mBAAqB,aAEnD2C,EAAAA,EAAAA,KAAA,SACZwB,GAAG,UACHzH,KAAK,UACLmF,KAAK,OACLkE,SAAoC,iBAA1BvG,EAASQ,aACnByB,MAAOjC,EAASW,QAChB6F,SAAUrE,EACVc,UAAU,mMACVwD,YAAuC,iBAA1BzG,EAASQ,aAAkC,sBAAwB,8BAItFwC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wCAAuCC,SAAA,EACpDF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,OAAOrD,UAAU,0DAAyDC,SAAC,YAG1FC,EAAAA,EAAAA,KAAA,SACEwB,GAAG,OACHzH,KAAK,OACLmF,KAAK,OACLkE,UAAQ,EACRtE,MAAOjC,EAASY,KAChB4F,SAAUrE,EACVc,UAAU,mMACVwD,YAAY,aAIhBzD,EAAAA,EAAAA,MAAA,OAAKkE,IAAKpF,EAAWoB,SAAA,EACnBC,EAAAA,EAAAA,KAAA,SAAOmD,QAAQ,UAAUrD,UAAU,0DAAyDC,SAAC,eAG7FF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,UACEX,KAAK,SACLqE,QAASA,IAAM/E,GAAgBD,GAC/BuB,UAAU,oOAAmOC,SAAA,EAE7OC,EAAAA,EAAAA,KAAA,QAAAD,SACGlD,EAASa,SAAW,oBAEvBsC,EAAAA,EAAAA,KAAA,OACEF,UAAW,iCAAgCvB,EAAc,aAAe,IACxEiF,KAAK,OACLC,OAAO,eACPC,QAAQ,YAAW3D,UAEnBC,EAAAA,EAAAA,KAAA,QAAM2D,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,wBAIxEvF,IACCyB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4KAA2KC,SAxlB1L,CAAC,YAAa,eAylBDiE,IAAI,CAACtG,EAASwG,KACvBlE,EAAAA,EAAAA,KAAA,UAEEd,KAAK,SACLqE,QAASA,KACPzG,EAAY,IAAID,EAAUa,QAASA,IACnCc,GAAe,IAEjBsB,UAAW,iFACTjD,EAASa,UAAYA,EAAU,8BAAgC,mBAC7DwG,EAAQ,EAAI,2BAA6B,KAAKnE,SAEjDrC,GAVIA,gBAmBnBmC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,SACEwB,GAAG,eACHzH,KAAK,eACLmF,KAAK,WACLkE,UAAQ,EACRjE,QAAStC,EAASc,aAClB0F,SAAUrE,EACVc,UAAU,yEAEZD,EAAAA,EAAAA,MAAA,SAAOsD,QAAQ,eAAerD,UAAU,mDAAkDC,SAAA,CAAC,iBAC1E,KACfC,EAAAA,EAAAA,KAAA,UAAQd,KAAK,SAASY,UAAU,kDAAiDC,SAAC,qBAExE,IAAI,MACV,KACJC,EAAAA,EAAAA,KAAA,UAAQd,KAAK,SAASY,UAAU,kDAAiDC,SAAC,0BAMtFC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,UACEd,KAAK,SACLiF,SAAUvG,EACVkC,UAAU,sSAAqSC,SAE9SnC,GACCiC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mEAAuE,+BAIxF,sCAMRE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,wCAAuCC,SAAA,CAAC,gCACrB,KAC9BC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CACHC,GAAG,UACHJ,UAAU,sEAAqEC,SAChF,uC","sources":["lib/email-service.js","utils/roleUtils.js","components/ProviderSignUp.js"],"sourcesContent":["// Email service for sending notifications\nexport const emailService = {\n  // Send welcome email\n  async sendWelcomeEmail(email, name) {\n    try {\n      // In production, this would call your backend API to send email\n      console.log(`Sending welcome email to ${email} for ${name}`);\n      return {\n        success: true,\n        message: 'Welcome email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending welcome email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send welcome email'\n      };\n    }\n  },\n\n  // Send verification email\n  async sendVerificationEmail(email, verificationLink) {\n    try {\n      console.log(`Sending verification email to ${email}`);\n      return {\n        success: true,\n        message: 'Verification email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending verification email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send verification email'\n      };\n    }\n  },\n\n  // Send password reset email\n  async sendPasswordResetEmail(email, resetLink) {\n    try {\n      console.log(`Sending password reset email to ${email}`);\n      return {\n        success: true,\n        message: 'Password reset email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending password reset email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send password reset email'\n      };\n    }\n  },\n\n  // Send notification email\n  async sendNotificationEmail(email, subject, message) {\n    try {\n      console.log(`Sending notification email to ${email}: ${subject}`);\n      return {\n        success: true,\n        message: 'Notification email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending notification email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send notification email'\n      };\n    }\n  },\n\n  // Send triage result email\n  async sendTriageResultEmail(email, triageData) {\n    try {\n      console.log(`Sending triage result email to ${email}`);\n      return {\n        success: true,\n        message: 'Triage result email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending triage result email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send triage result email'\n      };\n    }\n  },\n\n  // Send appointment confirmation email\n  async sendAppointmentConfirmationEmail(email, appointmentData) {\n    try {\n      console.log(`Sending appointment confirmation email to ${email}`);\n      return {\n        success: true,\n        message: 'Appointment confirmation email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending appointment confirmation email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send appointment confirmation email'\n      };\n    }\n  }\n};\n\nexport default emailService;\n","// Role-based utility functions\nimport { supabase } from '../lib/supabase';\n\n// User roles constants\nexport const USER_ROLES = {\n  PET_OWNER: 'pet_owner',\n  VETERINARIAN: 'veterinarian',\n  VET_NURSE: 'vet_nurse',\n  GROOMER: 'groomer',\n  TRAINER: 'trainer',\n  BREEDER: 'breeder',\n  NUTRITIONIST: 'nutritionist',\n  PET_BUSINESS: 'pet_business',\n  HOLISTIC_CARE: 'holistic_care',\n  ADMIN: 'admin',\n  SUPPORT: 'support'\n};\n\n// Get dashboard route based on user role\nexport const getDashboardRoute = (role) => {\n  const roleRoutes = {\n    [USER_ROLES.PET_OWNER]: '/pet-owner-dashboard',\n    [USER_ROLES.VETERINARIAN]: '/veterinarian-portal',\n    [USER_ROLES.VET_NURSE]: '/vet-nurse-dashboard',\n    [USER_ROLES.GROOMER]: '/groomer-dashboard',\n    [USER_ROLES.TRAINER]: '/trainer-dashboard',\n    [USER_ROLES.BREEDER]: '/breeder-dashboard',\n    [USER_ROLES.NUTRITIONIST]: '/nutritionist-dashboard',\n    [USER_ROLES.PET_BUSINESS]: '/pet-business-dashboard',\n    [USER_ROLES.HOLISTIC_CARE]: '/holistic-care-dashboard',\n    [USER_ROLES.ADMIN]: '/admin',\n    [USER_ROLES.SUPPORT]: '/support-dashboard'\n  };\n\n  return roleRoutes[role] || '/pet-owner-dashboard'; // Default to pet owner dashboard\n};\n\n// Ensure pet owner access\nexport const ensurePetOwnerAccess = async () => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return {\n        success: false,\n        error: 'Not authenticated',\n        shouldRedirect: true,\n        redirectTo: '/signin'\n      };\n    }\n\n    // Get user role from metadata\n    const userRole = user.user_metadata?.role || user.app_metadata?.role || USER_ROLES.PET_OWNER;\n\n    // Allow access to pet owners and admins\n    if (userRole === USER_ROLES.PET_OWNER || userRole === USER_ROLES.ADMIN) {\n      return {\n        success: true,\n        user,\n        role: userRole\n      };\n    }\n\n    // User has a different role - redirect to their dashboard\n    return {\n      success: false,\n      error: 'Access denied - wrong role',\n      shouldRedirect: true,\n      redirectTo: getDashboardRoute(userRole),\n      role: userRole\n    };\n  } catch (error) {\n    console.error('Error checking pet owner access:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to verify access',\n      shouldRedirect: true,\n      redirectTo: '/signin'\n    };\n  }\n};\n\n// Check if user has specific role\nexport const hasRole = async (requiredRole) => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return false;\n    }\n\n    const userRole = user.user_metadata?.role || user.app_metadata?.role;\n    \n    // Admin has access to everything\n    if (userRole === USER_ROLES.ADMIN) {\n      return true;\n    }\n\n    return userRole === requiredRole;\n  } catch (error) {\n    console.error('Error checking role:', error);\n    return false;\n  }\n};\n\n// Get user role\nexport const getUserRole = async () => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return null;\n    }\n\n    return user.user_metadata?.role || user.app_metadata?.role || USER_ROLES.PET_OWNER;\n  } catch (error) {\n    console.error('Error getting user role:', error);\n    return null;\n  }\n};\n\n// Check if user is admin\nexport const isAdmin = async () => {\n  return await hasRole(USER_ROLES.ADMIN);\n};\n\n// Check if user is provider (any type of service provider)\nexport const isProvider = async () => {\n  const providerRoles = [\n    USER_ROLES.VETERINARIAN,\n    USER_ROLES.VET_NURSE,\n    USER_ROLES.GROOMER,\n    USER_ROLES.TRAINER,\n    USER_ROLES.BREEDER,\n    USER_ROLES.NUTRITIONIST,\n    USER_ROLES.PET_BUSINESS,\n    USER_ROLES.HOLISTIC_CARE\n  ];\n\n  try {\n    const userRole = await getUserRole();\n    return providerRoles.includes(userRole);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport default {\n  USER_ROLES,\n  getDashboardRoute,\n  ensurePetOwnerAccess,\n  hasRole,\n  getUserRole,\n  isAdmin,\n  isProvider\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { supabase } from '../lib/supabase.js';\nimport { handleSupabaseError } from '../lib/supabase-utils.js';\nimport { emailService } from '../lib/email-service.js';\nimport { getDashboardRoute } from '../utils/roleUtils.js';\n\nconst ProviderSignUp = () => {\n  const [formData, setFormData] = useState({\n    // Personal Info\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    phone: '',\n    \n    // Business Info\n    providerType: '',\n    businessName: '',\n    licenseNumber: '',\n    address: '',\n    city: '',\n    country: 'Australia',\n    \n    // Terms\n    agreeToTerms: false\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const navigate = useNavigate();\n  \n  // Dropdown states\n  const [providerTypeOpen, setProviderTypeOpen] = useState(false);\n  const [countryOpen, setCountryOpen] = useState(false);\n  \n  // Refs for dropdowns\n  const providerTypeRef = useRef(null);\n  const countryRef = useRef(null);\n\n  const providerTypes = [\n    { display: 'Veterinarian', value: 'veterinarian', description: 'Licensed veterinary doctor providing medical services' },\n    { display: 'Vet Nurse', value: 'vet_nurse', description: 'Qualified veterinary nurse providing care services' },\n    { display: 'Groomers', value: 'groomer', description: 'Pet grooming and hygiene services' },\n    { display: 'Trainers', value: 'trainer', description: 'Pet training and behavior services' },\n    { display: 'Breeders', value: 'breeder', description: 'Pet breeding services' },\n    { display: 'Nutritionists', value: 'nutritionist', description: 'Pet nutrition and dietary services' },\n    { display: 'Pet Business', value: 'pet_business', description: 'Other pet-related business services' },\n    { display: 'Holistic Care', value: 'holistic_care', description: 'Alternative and holistic pet care' }\n  ];\n\n  const countries = ['Australia', 'New Zealand'];\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === 'checkbox' ? checked : value\n    });\n    // Clear error when user starts typing\n    if (error) setError('');\n  };\n\n  const validateForm = () => {\n    if (!formData.firstName.trim()) {\n      setError('First name is required.');\n      return false;\n    }\n    if (!formData.lastName.trim()) {\n      setError('Last name is required.');\n      return false;\n    }\n    if (!formData.email.trim()) {\n      setError('Email is required.');\n      return false;\n    }\n    if (formData.password.length < 6) {\n      setError('Password must be at least 6 characters long.');\n      return false;\n    }\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match.');\n      return false;\n    }\n    if (!formData.phone.trim()) {\n      setError('Phone number is required.');\n      return false;\n    }\n    if (!formData.providerType) {\n      setError('Please select a provider type.');\n      return false;\n    }\n    if (formData.providerType === 'veterinarian') {\n      if (!formData.businessName.trim()) {\n        setError('Clinic/Practice name is required for veterinarians.');\n        return false;\n      }\n      if (!formData.licenseNumber.trim()) {\n        setError('Veterinary license number is required for veterinarians.');\n        return false;\n      }\n      if (!formData.address.trim()) {\n        setError('Clinic address is required for veterinarians.');\n        return false;\n      }\n    }\n    if (!formData.city.trim()) {\n      setError('City is required.');\n      return false;\n    }\n    if (!formData.agreeToTerms) {\n      setError('You must agree to the Terms of Service and Privacy Policy.');\n      return false;\n    }\n    return true;\n  };\n\n  // Close dropdowns when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (providerTypeRef.current && !providerTypeRef.current.contains(event.target)) {\n        setProviderTypeOpen(false);\n      }\n      if (countryRef.current && !countryRef.current.contains(event.target)) {\n        setCountryOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const { data, error: authError } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            first_name: formData.firstName,\n            last_name: formData.lastName,\n            full_name: `${formData.firstName} ${formData.lastName}`,\n            user_type: formData.providerType,\n            phone: formData.phone,\n            address: formData.address,\n            city: formData.city,\n            country: formData.country,\n            business_name: formData.businessName\n          }\n        }\n      });\n\n      if (authError) {\n        const supabaseError = handleSupabaseError(authError, 'provider sign up');\n        setError(supabaseError.message);\n        setLoading(false);\n        return;\n      }\n\n      // Create provider listing after successful signup\n      if (data.user) {\n        try {\n          // Wait for the trigger to create the profile\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Debug: Log the form data before insertion\n          console.log('Provider signup data:', {\n            providerType: formData.providerType,\n            name: `${formData.firstName} ${formData.lastName}`,\n            email: formData.email\n          });\n\n          const providerInsertData = {\n            id: data.user.id,\n            name: `${formData.firstName} ${formData.lastName}`,\n            email: formData.email,\n            phone: formData.phone,\n            provider_type: formData.providerType,\n            business_name: formData.providerType === 'veterinarian' ? formData.businessName : null,\n            license_number: formData.providerType === 'veterinarian' ? formData.licenseNumber : null,\n            address: formData.address,\n            city: formData.city,\n            country: formData.country,\n            bio: `${providerTypes.find(type => type.value === formData.providerType)?.display || formData.providerType} professional providing quality services.`,\n            offers_services: true,\n            offers_products: false,\n            service_types: [providerTypes.find(type => type.value === formData.providerType)?.display || formData.providerType],\n            verified: false,\n            is_active: true,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          };\n\n          \n\n          // Provider signup successful - profile created\n          console.log('Provider signup successful - profile created with role: provider');\n          \n          {\n            \n            \n            \n            \n            // Create profile manually since trigger is disabled\n            const location = [formData.address, formData.city, formData.country]\n              .filter(Boolean)\n              .join(', ');\n            \n            console.log('🔧 Creating profile with role:', formData.providerType);\n            const { data: profileData, error: profileError } = await supabase\n              .from('profiles')\n              .insert({\n                id: data.user.id,\n                email: formData.email,\n                full_name: `${formData.firstName} ${formData.lastName}`,\n                phone: formData.phone,\n                location: location,\n                organization: formData.businessName,\n                role: formData.providerType  // Use providerType directly as role\n              })\n              .select();\n            \n            if (profileError) {\n              console.error('❌ Profile creation error:', profileError);\n            } else {\n              console.log('✅ Profile created successfully with role:', formData.providerType);\n              console.log('📋 Profile data:', profileData);\n            }\n            \n            // Send admin notification for new provider application\n            \n            try {\n              await emailService.sendAdminProviderNotification({\n                provider_name: `${formData.firstName} ${formData.lastName}`,\n                provider_email: formData.email,\n                phone: formData.phone,\n                provider_type: providerTypes.find(type => type.value === formData.providerType)?.display || formData.providerType,\n                city: formData.city,\n                country: formData.country,\n                address: formData.address,\n                bio: `${providerTypes.find(type => type.value === formData.providerType)?.display || formData.providerType} professional providing quality services.`,\n                created_at: new Date().toISOString()\n              });\n              \n            } catch (emailError) {\n              \n              \n              // Don't fail signup for this - provider was created successfully\n            }\n          }\n        } catch (error) {\n          \n          // Don't fail signup for this\n        }\n      }\n\n                // Wait for profile creation, then redirect to appropriate dashboard\n      console.log('✅ ProviderSignUp - Signup completed successfully');\n      console.log('📋 Provider type:', formData.providerType);\n      \n      // Wait a moment for the profile to be created, then redirect\n      setTimeout(async () => {\n        try {\n          // Verify the profile was created with correct role\n          const { data: profile } = await supabase\n            .from('profiles')\n            .select('role, full_name')\n            .eq('id', data.user.id)\n            .single();\n\n          console.log('🔍 ProviderSignUp - Profile check:', profile);\n          \n          // Determine redirect based on provider type from form\n          let dashboardRoute = '/trainer-dashboard'; // Default to trainer for now\n          \n          if (formData.providerType === 'trainer') {\n            dashboardRoute = '/trainer-dashboard';\n            console.log('🎯 ProviderSignUp - Trainer signup, redirecting to trainer dashboard');\n          } else if (formData.providerType === 'groomer') {\n            dashboardRoute = '/groomer-dashboard';\n          } else if (formData.providerType === 'breeder') {\n            dashboardRoute = '/breeder-dashboard';\n          } else if (formData.providerType === 'nutritionist') {\n            dashboardRoute = '/nutritionist-dashboard';\n          } else if (formData.providerType === 'pet_business') {\n            dashboardRoute = '/pet-business-dashboard';\n          } else if (formData.providerType === 'holistic_care') {\n            dashboardRoute = '/holistic-care-dashboard';\n          } else if (formData.providerType === 'veterinarian') {\n            dashboardRoute = '/veterinarian-portal';\n          } else if (formData.providerType === 'vet_nurse') {\n            dashboardRoute = '/vet-nurse-dashboard';\n          }\n          \n          console.log('🚀 ProviderSignUp - Redirecting to:', dashboardRoute);\n          navigate(dashboardRoute);\n          \n        } catch (error) {\n          console.error('Error checking profile:', error);\n          // Fallback redirect based on form data\n          if (formData.providerType === 'trainer') {\n            navigate('/trainer-dashboard');\n          } else {\n            navigate('/pet-owner-dashboard');\n          }\n        }\n      }, 1500); // Give time for profile creation\n      \n      setLoading(false);\n\n    } catch (error) {\n      \n      setError('An unexpected error occurred. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <h2 className=\"text-center text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900 font-montserrat leading-tight\">\n          Apply to Join as a Provider\n        </h2>\n        <p className=\"mt-2 text-center text-sm text-gray-600 font-montserrat\">\n          Already have an account?{' '}\n          <Link\n            to=\"/signin\"\n            className=\"font-medium text-[#5EB47C] hover:text-primary-500 transition-colors\"\n          >\n            Sign in here\n          </Link>\n        </p>\n      </div>\n\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-white py-8 px-4 shadow-lg sm:rounded-2xl sm:px-10 border border-gray-200\">\n          {error && (\n            <div className={`mb-6 border px-4 py-3 rounded-xl font-montserrat text-sm ${\n              error.includes('successfully') \n                ? 'bg-green-50 border-green-200 text-green-600'\n                : 'bg-red-50 border-red-200 text-red-600'\n            }`}>\n              {error}\n            </div>\n          )}\n\n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\n            <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n              <div>\n                <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                  First name *\n                </label>\n                <input\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  type=\"text\"\n                  required\n                  value={formData.firstName}\n                  onChange={handleChange}\n                  className=\"mt-1 appearance-none block w-full px-3 py-3 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                  placeholder=\"First name\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                  Last name *\n                </label>\n                <input\n                  id=\"lastName\"\n                  name=\"lastName\"\n                  type=\"text\"\n                  required\n                  value={formData.lastName}\n                  onChange={handleChange}\n                  className=\"mt-1 appearance-none block w-full px-3 py-3 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                  placeholder=\"Last name\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                Email address *\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                required\n                value={formData.email}\n                onChange={handleChange}\n                className=\"mt-1 appearance-none block w-full px-3 py-3 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                placeholder=\"your@email.com\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                Phone number *\n              </label>\n              <input\n                id=\"phone\"\n                name=\"phone\"\n                type=\"tel\"\n                required\n                value={formData.phone}\n                onChange={handleChange}\n                className=\"mt-1 appearance-none block w-full px-3 py-3 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                placeholder=\"+61 4XX XXX XXX\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                Password *\n              </label>\n              <div className=\"mt-1 relative\">\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  required\n                  value={formData.password}\n                  onChange={handleChange}\n                  className=\"appearance-none block w-full px-3 py-3 pr-10 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                  placeholder=\"Create a password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\n                    </svg>\n                  ) : (\n                    <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                    </svg>\n                  )}\n                </button>\n              </div>\n              <p className=\"mt-1 text-xs text-gray-500 font-montserrat\">\n                Must be at least 6 characters long\n              </p>\n            </div>\n\n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                Confirm password *\n              </label>\n              <div className=\"mt-1 relative\">\n                <input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  required\n                  value={formData.confirmPassword}\n                  onChange={handleChange}\n                  className=\"appearance-none block w-full px-3 py-3 pr-10 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                  placeholder=\"Confirm your password\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                >\n                  {showConfirmPassword ? (\n                    <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\n                    </svg>\n                  ) : (\n                    <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                    </svg>\n                  )}\n                </button>\n              </div>\n            </div>\n\n            <div ref={providerTypeRef}>\n              <label htmlFor=\"providerType\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                Provider type *\n              </label>\n              <div className=\"relative mt-1\">\n                <button\n                  type=\"button\"\n                  onClick={() => setProviderTypeOpen(!providerTypeOpen)}\n                  className=\"block w-full px-3 py-3 border border-gray-300 rounded-xl bg-white text-left flex items-center justify-between hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                >\n                  <span>\n                    {formData.providerType \n                      ? providerTypes.find(type => type.value === formData.providerType)?.display || formData.providerType\n                      : 'Select provider type'}\n                  </span>\n                  <svg\n                    className={`w-4 h-4 transition-transform ${providerTypeOpen ? 'rotate-180' : ''}`}\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                </button>\n                \n                {providerTypeOpen && (\n                  <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-xl shadow-xl ring-1 ring-black ring-opacity-5 z-50 overflow-hidden max-h-60 overflow-y-auto\">\n                    <button\n                      type=\"button\"\n                      onClick={() => {\n                        setFormData({...formData, providerType: ''});\n                        setProviderTypeOpen(false);\n                      }}\n                      className={`w-full px-3 py-3 text-left hover:bg-gray-50 flex items-center font-montserrat ${\n                        !formData.providerType ? 'bg-[#E5F4F1] text-[#4A9A64]' : 'text-gray-900'\n                      }`}\n                    >\n                      Select provider type\n                    </button>\n                    {providerTypes.map(type => (\n                      <button\n                        key={type.value}\n                        type=\"button\"\n                        onClick={() => {\n                          setFormData({...formData, providerType: type.value});\n                          setProviderTypeOpen(false);\n                        }}\n                        className={`w-full px-3 py-3 text-left hover:bg-gray-50 border-t border-gray-200 font-montserrat ${\n                          formData.providerType === type.value ? 'bg-[#E5F4F1] text-[#4A9A64]' : 'text-gray-900'\n                        }`}\n                      >\n                        <div>\n                          <div className=\"font-medium\">{type.display}</div>\n                          <div className=\"text-xs text-gray-500 mt-1\">{type.description}</div>\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Conditional fields for veterinarians */}\n            {formData.providerType === 'veterinarian' && (\n              <>\n                <div>\n                  <label htmlFor=\"businessName\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                    Clinic/Practice Name *\n                  </label>\n                  <input\n                    id=\"businessName\"\n                    name=\"businessName\"\n                    type=\"text\"\n                    required\n                    value={formData.businessName}\n                    onChange={handleChange}\n                    className=\"mt-1 appearance-none block w-full px-3 py-3 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                    placeholder=\"Your clinic or practice name\"\n                  />\n                </div>\n\n                <div>\n                  <label htmlFor=\"licenseNumber\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                    Veterinary License Number *\n                  </label>\n                  <input\n                    id=\"licenseNumber\"\n                    name=\"licenseNumber\"\n                    type=\"text\"\n                    required\n                    value={formData.licenseNumber}\n                    onChange={handleChange}\n                    className=\"mt-1 appearance-none block w-full px-3 py-3 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                    placeholder=\"Your veterinary license number\"\n                  />\n                </div>\n              </>\n            )}\n\n            <div>\n              <label htmlFor=\"address\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                {formData.providerType === 'veterinarian' ? 'Clinic Address *' : 'Address'}\n              </label>\n                              <input\n                  id=\"address\"\n                  name=\"address\"\n                  type=\"text\"\n                  required={formData.providerType === 'veterinarian'}\n                  value={formData.address}\n                  onChange={handleChange}\n                  className=\"mt-1 appearance-none block w-full px-3 py-3 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                  placeholder={formData.providerType === 'veterinarian' ? 'Your clinic address' : 'Your business address'}\n                />\n            </div>\n\n            <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n              <div>\n                <label htmlFor=\"city\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                  City *\n                </label>\n                <input\n                  id=\"city\"\n                  name=\"city\"\n                  type=\"text\"\n                  required\n                  value={formData.city}\n                  onChange={handleChange}\n                  className=\"mt-1 appearance-none block w-full px-3 py-3 border border-gray-300 rounded-xl placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                  placeholder=\"City\"\n                />\n              </div>\n\n              <div ref={countryRef}>\n                <label htmlFor=\"country\" className=\"block text-sm font-medium text-gray-700 font-montserrat\">\n                  Country *\n                </label>\n                <div className=\"relative mt-1\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setCountryOpen(!countryOpen)}\n                    className=\"block w-full px-3 py-3 border border-gray-300 rounded-xl bg-white text-left flex items-center justify-between hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-[#5EB47C] focus:border-transparent font-montserrat\"\n                  >\n                    <span>\n                      {formData.country || 'Select country'}\n                    </span>\n                    <svg\n                      className={`w-4 h-4 transition-transform ${countryOpen ? 'rotate-180' : ''}`}\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                    </svg>\n                  </button>\n                  \n                  {countryOpen && (\n                    <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-xl shadow-xl ring-1 ring-black ring-opacity-5 z-50 overflow-hidden max-h-60 overflow-y-auto\">\n                      {countries.map((country, index) => (\n                        <button\n                          key={country}\n                          type=\"button\"\n                          onClick={() => {\n                            setFormData({...formData, country: country});\n                            setCountryOpen(false);\n                          }}\n                          className={`w-full px-3 py-3 text-left hover:bg-gray-50 flex items-center font-montserrat ${\n                            formData.country === country ? 'bg-[#E5F4F1] text-[#4A9A64]' : 'text-gray-900'\n                          } ${index > 0 ? 'border-t border-gray-200' : ''}`}\n                        >\n                          {country}\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center\">\n              <input\n                id=\"agreeToTerms\"\n                name=\"agreeToTerms\"\n                type=\"checkbox\"\n                required\n                checked={formData.agreeToTerms}\n                onChange={handleChange}\n                className=\"h-4 w-4 text-[#5EB47C] focus:ring-[#5EB47C] border-gray-300 rounded\"\n              />\n              <label htmlFor=\"agreeToTerms\" className=\"ml-2 block text-sm text-gray-900 font-montserrat\">\n                I agree to the{' '}\n                <button type=\"button\" className=\"text-[#5EB47C] hover:text-primary-500 underline\">\n                  Terms of Service\n                </button>{' '}\n                and{' '}\n                <button type=\"button\" className=\"text-[#5EB47C] hover:text-primary-500 underline\">\n                  Privacy Policy\n                </button>\n              </label>\n            </div>\n\n            <div>\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className=\"w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-xl text-white bg-[#5EB47C] hover:bg-[#4A9A64] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#5EB47C] disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-montserrat\"\n              >\n                {loading ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Submitting application...\n                  </div>\n                ) : (\n                  'Submit Provider Application'\n                )}\n              </button>\n            </div>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600 font-montserrat\">\n              Looking for pet care instead?{' '}\n              <Link\n                to=\"/signup\"\n                className=\"font-medium text-[#5EB47C] hover:text-primary-500 transition-colors\"\n              >\n                Sign up as a Customer\n              </Link>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProviderSignUp;"],"names":["emailService","sendWelcomeEmail","email","name","console","log","success","message","error","sendVerificationEmail","verificationLink","sendPasswordResetEmail","resetLink","sendNotificationEmail","subject","sendTriageResultEmail","triageData","sendAppointmentConfirmationEmail","appointmentData","USER_ROLES","PET_OWNER","VETERINARIAN","VET_NURSE","GROOMER","TRAINER","BREEDER","NUTRITIONIST","PET_BUSINESS","HOLISTIC_CARE","ADMIN","SUPPORT","getDashboardRoute","role","ensurePetOwnerAccess","async","_user$user_metadata","_user$app_metadata","data","user","supabase","auth","getUser","shouldRedirect","redirectTo","userRole","user_metadata","app_metadata","ProviderSignUp","_providerTypes$find5","formData","setFormData","useState","firstName","lastName","password","confirmPassword","phone","providerType","businessName","licenseNumber","address","city","country","agreeToTerms","loading","setLoading","setError","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","navigate","useNavigate","providerTypeOpen","setProviderTypeOpen","countryOpen","setCountryOpen","providerTypeRef","useRef","countryRef","providerTypes","display","value","description","handleChange","e","type","checked","target","useEffect","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","_jsxs","className","children","_jsx","Link","to","includes","onSubmit","preventDefault","validateForm","trim","length","authError","signUp","options","first_name","last_name","full_name","user_type","business_name","supabaseError","handleSupabaseError","_providerTypes$find","_providerTypes$find2","Promise","resolve","setTimeout","id","find","Date","toISOString","location","filter","Boolean","join","profileData","profileError","from","insert","organization","select","_providerTypes$find3","_providerTypes$find4","sendAdminProviderNotification","provider_name","provider_email","provider_type","bio","created_at","emailError","profile","eq","single","dashboardRoute","htmlFor","required","onChange","placeholder","onClick","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","ref","map","_Fragment","index","disabled"],"sourceRoot":""}