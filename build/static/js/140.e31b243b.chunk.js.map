{"version":3,"file":"static/js/140.e31b243b.chunk.js","mappings":"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","sources":["components/AuthCallback.js","utils/roleUtils.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '../lib/supabase.js';\nimport { getDashboardRoute } from '../utils/roleUtils.js';\n\nconst AuthCallback = () => {\n  const navigate = useNavigate();\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const completeAuth = async () => {\n      try {\n        // With detectSessionInUrl: true, Supabase parses URL and stores session on load.\n        // We validate session and user before redirecting.\n        const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n        \n        if (sessionError) {\n          console.error('AuthCallback Debug - Session error:', sessionError);\n          throw sessionError;\n        }\n        \n        if (!session || !session.user) {\n          console.log('AuthCallback Debug - No valid session found');\n          navigate('/signin', { replace: true });\n          return;\n        }\n\n        console.log('AuthCallback Debug - Valid session for user:', session.user.email);\n\n        // Get user profile to validate and check role\n        const { data: profile, error: profileError } = await supabase\n          .from('profiles')\n          .select('role, email, id')\n          .eq('id', session.user.id)\n          .single();\n\n        if (profileError && profileError.code !== 'PGRST116') {\n          // PGRST116 = no rows returned, other errors are actual problems\n          console.error('AuthCallback Debug - Profile query error:', profileError);\n          setError('Error loading user profile. Please try signing in again.');\n          setTimeout(() => navigate('/signin', { replace: true }), 2000);\n          return;\n        }\n\n        if (profile) {\n          // Profile exists - validate role\n          console.log('AuthCallback Debug - Profile found:', profile);\n          console.log('AuthCallback Debug - Role:', profile.role);\n          \n          if (!profile.role) {\n            console.log('AuthCallback Debug - Profile exists but no role assigned');\n            setError('Account setup incomplete. Redirecting...');\n            setTimeout(() => navigate('/signin', { replace: true }), 2000);\n            return;\n          }\n\n          // Valid profile with role - redirect based on role\n          console.log('AuthCallback Debug - Redirecting authenticated user based on role:', profile.role);\n          \n          if (profile.role === 'admin') {\n            console.log('üëë AuthCallback Debug - ADMIN DETECTED - Redirecting to admin');\n            navigate('/admin', { replace: true });\n          } else if (profile.role === 'veterinarian') {\n            console.log('üè• AuthCallback Debug - VETERINARIAN DETECTED - Redirecting to veterinarian-portal');\n            navigate('/veterinarian-portal', { replace: true });\n          } else if (profile.role === 'vet_nurse') {\n            console.log('üë©‚Äç‚öïÔ∏è AuthCallback Debug - VET NURSE DETECTED - Redirecting to vet-nurse-dashboard');\n            navigate('/vet-nurse-dashboard', { replace: true });\n          } else {\n            // Check if user is a provider and get provider type for more specific routing\n            let effectiveRole = profile.role;\n            if (profile.role === 'provider') {\n              console.log('AuthCallback Debug - User is a provider, checking provider_type...');\n              const { data: providerData, error: providerError } = await supabase\n                .from('providers')\n                .select('provider_type')\n                .eq('user_id', session.user.id)\n                .single();\n              \n              console.log('AuthCallback Debug - Provider query result:', { providerData, providerError });\n              \n              if (providerData?.provider_type === 'groomer') {\n                effectiveRole = 'groomer';\n                console.log('AuthCallback Debug - Setting effectiveRole to groomer');\n              }\n            }\n            \n            const dashboardRoute = getDashboardRoute(effectiveRole);\n            console.log('üë§ AuthCallback Debug - Redirecting user to:', dashboardRoute, 'effectiveRole:', effectiveRole);\n            navigate(dashboardRoute, { replace: true });\n          }\n        } else {\n          // No profile found - check if this is a new OAuth user\n          console.log('AuthCallback Debug - No profile found for OAuth user:', session.user.email);\n          \n          // For OAuth users, we might need to create a profile or redirect to setup\n          const accountAge = new Date() - new Date(session.user.created_at);\n          const isNewAccount = accountAge < 5 * 60 * 1000; // Less than 5 minutes old\n          \n          if (isNewAccount) {\n            console.log('AuthCallback Debug - New OAuth account detected, checking for provider record...');\n            \n            // Check if this user has a provider record to determine their role\n            try {\n              const { data: providerData } = await supabase\n                .from('providers')\n                .select('provider_type')\n                .eq('user_id', session.user.id)\n                .single();\n              \n              if (providerData?.provider_type) {\n                console.log('AuthCallback Debug - Found provider type:', providerData.provider_type);\n                \n                let effectiveRole = 'provider';\n                if (providerData.provider_type === 'groomer') {\n                  effectiveRole = 'groomer';\n                } else if (providerData.provider_type === 'trainer') {\n                  effectiveRole = 'trainer';\n                } else if (providerData.provider_type === 'breeder') {\n                  effectiveRole = 'breeder';\n                } else if (providerData.provider_type === 'nutritionist') {\n                  effectiveRole = 'nutritionist';\n                } else if (providerData.provider_type === 'pet_business') {\n                  effectiveRole = 'pet_business';\n                } else if (providerData.provider_type === 'holistic_care') {\n                  effectiveRole = 'holistic_care';\n                }\n                \n                const dashboardRoute = getDashboardRoute(effectiveRole);\n                console.log('AuthCallback Debug - Redirecting OAuth provider to:', dashboardRoute);\n                navigate(dashboardRoute, { replace: true });\n              } else {\n                console.log('AuthCallback Debug - No provider record found, defaulting to pet owner dashboard');\n                navigate('/pet-owner-dashboard', { replace: true });\n              }\n            } catch (error) {\n              console.log('AuthCallback Debug - Error checking provider record, defaulting to pet owner dashboard');\n              navigate('/pet-owner-dashboard', { replace: true });\n            }\n          } else {\n            // Older OAuth account without profile - needs investigation\n            setError('Profile setup required. Please complete your registration.');\n            setTimeout(() => navigate('/signup', { replace: true }), 2000);\n            return;\n          }\n        }\n      } catch (e) {\n        setError('Authentication failed. Redirecting to sign in...');\n        setTimeout(() => navigate('/signin', { replace: true }), 1500);\n      }\n    };\n\n    completeAuth();\n  }, [navigate]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-[#5EB47C] mx-auto mb-4\"></div>\n        <p className=\"text-gray-600 font-montserrat\">Completing sign-in...</p>\n        {error && <p className=\"text-red-600 mt-2 font-montserrat text-sm\">{error}</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default AuthCallback;","// Role-based utility functions\nimport { supabase } from '../lib/supabase';\n\n// User roles constants\nexport const USER_ROLES = {\n  PET_OWNER: 'pet_owner',\n  VETERINARIAN: 'veterinarian',\n  VET_NURSE: 'vet_nurse',\n  GROOMER: 'groomer',\n  TRAINER: 'trainer',\n  BREEDER: 'breeder',\n  NUTRITIONIST: 'nutritionist',\n  PET_BUSINESS: 'pet_business',\n  HOLISTIC_CARE: 'holistic_care',\n  ADMIN: 'admin',\n  SUPPORT: 'support'\n};\n\n// Get dashboard route based on user role\nexport const getDashboardRoute = (role) => {\n  const roleRoutes = {\n    [USER_ROLES.PET_OWNER]: '/pet-owner-dashboard',\n    [USER_ROLES.VETERINARIAN]: '/veterinarian-portal',\n    [USER_ROLES.VET_NURSE]: '/vet-nurse-dashboard',\n    [USER_ROLES.GROOMER]: '/groomer-dashboard',\n    [USER_ROLES.TRAINER]: '/trainer-dashboard',\n    [USER_ROLES.BREEDER]: '/breeder-dashboard',\n    [USER_ROLES.NUTRITIONIST]: '/nutritionist-dashboard',\n    [USER_ROLES.PET_BUSINESS]: '/pet-business-dashboard',\n    [USER_ROLES.HOLISTIC_CARE]: '/holistic-care-dashboard',\n    [USER_ROLES.ADMIN]: '/admin',\n    [USER_ROLES.SUPPORT]: '/support-dashboard'\n  };\n\n  return roleRoutes[role] || '/pet-owner-dashboard'; // Default to pet owner dashboard\n};\n\n// Ensure pet owner access\nexport const ensurePetOwnerAccess = async () => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return {\n        success: false,\n        error: 'Not authenticated',\n        shouldRedirect: true,\n        redirectTo: '/signin'\n      };\n    }\n\n    // Get user role from metadata\n    const userRole = user.user_metadata?.role || user.app_metadata?.role || USER_ROLES.PET_OWNER;\n\n    // Allow access to pet owners and admins\n    if (userRole === USER_ROLES.PET_OWNER || userRole === USER_ROLES.ADMIN) {\n      return {\n        success: true,\n        user,\n        role: userRole\n      };\n    }\n\n    // User has a different role - redirect to their dashboard\n    return {\n      success: false,\n      error: 'Access denied - wrong role',\n      shouldRedirect: true,\n      redirectTo: getDashboardRoute(userRole),\n      role: userRole\n    };\n  } catch (error) {\n    console.error('Error checking pet owner access:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to verify access',\n      shouldRedirect: true,\n      redirectTo: '/signin'\n    };\n  }\n};\n\n// Check if user has specific role\nexport const hasRole = async (requiredRole) => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return false;\n    }\n\n    const userRole = user.user_metadata?.role || user.app_metadata?.role;\n    \n    // Admin has access to everything\n    if (userRole === USER_ROLES.ADMIN) {\n      return true;\n    }\n\n    return userRole === requiredRole;\n  } catch (error) {\n    console.error('Error checking role:', error);\n    return false;\n  }\n};\n\n// Get user role\nexport const getUserRole = async () => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return null;\n    }\n\n    return user.user_metadata?.role || user.app_metadata?.role || USER_ROLES.PET_OWNER;\n  } catch (error) {\n    console.error('Error getting user role:', error);\n    return null;\n  }\n};\n\n// Check if user is admin\nexport const isAdmin = async () => {\n  return await hasRole(USER_ROLES.ADMIN);\n};\n\n// Check if user is provider (any type of service provider)\nexport const isProvider = async () => {\n  const providerRoles = [\n    USER_ROLES.VETERINARIAN,\n    USER_ROLES.VET_NURSE,\n    USER_ROLES.GROOMER,\n    USER_ROLES.TRAINER,\n    USER_ROLES.BREEDER,\n    USER_ROLES.NUTRITIONIST,\n    USER_ROLES.PET_BUSINESS,\n    USER_ROLES.HOLISTIC_CARE\n  ];\n\n  try {\n    const userRole = await getUserRole();\n    return providerRoles.includes(userRole);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport default {\n  USER_ROLES,\n  getDashboardRoute,\n  ensurePetOwnerAccess,\n  hasRole,\n  getUserRole,\n  isAdmin,\n  isProvider\n};\n"],"names":["AuthCallback","navigate","useNavigate","error","setError","useState","useEffect","async","data","session","sessionError","supabase","auth","getSession","console","user","log","replace","email","profile","profileError","from","select","eq","id","single","code","setTimeout","role","effectiveRole","providerData","providerError","provider_type","dashboardRoute","getDashboardRoute","accountAge","Date","created_at","e","completeAuth","_jsx","className","children","_jsxs","USER_ROLES","PET_OWNER","VETERINARIAN","VET_NURSE","GROOMER","TRAINER","BREEDER","NUTRITIONIST","PET_BUSINESS","HOLISTIC_CARE","ADMIN","SUPPORT","ensurePetOwnerAccess","_user$user_metadata","_user$app_metadata","getUser","success","shouldRedirect","redirectTo","userRole","user_metadata","app_metadata","message"],"sourceRoot":""}