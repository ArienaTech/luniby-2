{"version":3,"file":"static/js/886.27fb5b1e.chunk.js","mappings":"sLACO,MAAMA,EAAe,CAE1B,sBAAMC,CAAiBC,EAAOC,GAC5B,IAGE,OADAC,QAAQC,IAAI,4BAA4BH,SAAaC,KAC9C,CACLG,SAAS,EACTC,QAAS,kCAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,+BAAgCA,GACvC,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,+BAE5B,CACF,EAGA,2BAAME,CAAsBP,EAAOQ,GACjC,IAEE,OADAN,QAAQC,IAAI,iCAAiCH,KACtC,CACLI,SAAS,EACTC,QAAS,uCAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,oCAAqCA,GAC5C,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,oCAE5B,CACF,EAGA,4BAAMI,CAAuBT,EAAOU,GAClC,IAEE,OADAR,QAAQC,IAAI,mCAAmCH,KACxC,CACLI,SAAS,EACTC,QAAS,yCAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,sCAAuCA,GAC9C,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,sCAE5B,CACF,EAGA,2BAAMM,CAAsBX,EAAOY,EAASP,GAC1C,IAEE,OADAH,QAAQC,IAAI,iCAAiCH,MAAUY,KAChD,CACLR,SAAS,EACTC,QAAS,uCAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,oCAAqCA,GAC5C,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,oCAE5B,CACF,EAGA,2BAAMQ,CAAsBb,EAAOc,GACjC,IAEE,OADAZ,QAAQC,IAAI,kCAAkCH,KACvC,CACLI,SAAS,EACTC,QAAS,wCAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,qCAAsCA,GAC7C,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,qCAE5B,CACF,EAGA,sCAAMU,CAAiCf,EAAOgB,GAC5C,IAEE,OADAd,QAAQC,IAAI,6CAA6CH,KAClD,CACLI,SAAS,EACTC,QAAS,mDAEb,CAAE,MAAOC,GAEP,OADAJ,QAAQI,MAAM,gDAAiDA,GACxD,CACLF,SAAS,EACTE,MAAOA,EAAMD,SAAW,gDAE5B,CACF,GAGF,G","sources":["lib/email-service.js"],"sourcesContent":["// Email service for sending notifications\nexport const emailService = {\n  // Send welcome email\n  async sendWelcomeEmail(email, name) {\n    try {\n      // In production, this would call your backend API to send email\n      console.log(`Sending welcome email to ${email} for ${name}`);\n      return {\n        success: true,\n        message: 'Welcome email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending welcome email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send welcome email'\n      };\n    }\n  },\n\n  // Send verification email\n  async sendVerificationEmail(email, verificationLink) {\n    try {\n      console.log(`Sending verification email to ${email}`);\n      return {\n        success: true,\n        message: 'Verification email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending verification email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send verification email'\n      };\n    }\n  },\n\n  // Send password reset email\n  async sendPasswordResetEmail(email, resetLink) {\n    try {\n      console.log(`Sending password reset email to ${email}`);\n      return {\n        success: true,\n        message: 'Password reset email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending password reset email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send password reset email'\n      };\n    }\n  },\n\n  // Send notification email\n  async sendNotificationEmail(email, subject, message) {\n    try {\n      console.log(`Sending notification email to ${email}: ${subject}`);\n      return {\n        success: true,\n        message: 'Notification email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending notification email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send notification email'\n      };\n    }\n  },\n\n  // Send triage result email\n  async sendTriageResultEmail(email, triageData) {\n    try {\n      console.log(`Sending triage result email to ${email}`);\n      return {\n        success: true,\n        message: 'Triage result email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending triage result email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send triage result email'\n      };\n    }\n  },\n\n  // Send appointment confirmation email\n  async sendAppointmentConfirmationEmail(email, appointmentData) {\n    try {\n      console.log(`Sending appointment confirmation email to ${email}`);\n      return {\n        success: true,\n        message: 'Appointment confirmation email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending appointment confirmation email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send appointment confirmation email'\n      };\n    }\n  }\n};\n\nexport default emailService;\n"],"names":["emailService","sendWelcomeEmail","email","name","console","log","success","message","error","sendVerificationEmail","verificationLink","sendPasswordResetEmail","resetLink","sendNotificationEmail","subject","sendTriageResultEmail","triageData","sendAppointmentConfirmationEmail","appointmentData"],"sourceRoot":""}