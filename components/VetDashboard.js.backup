import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase.js';
import { getUserSafely } from '../lib/supabase-utils.js';
import { useNotificationContext } from '../contexts/NotificationContext';
import ProviderAvailability from './ProviderAvailability';
import StatsOverview from './dashboard/StatsOverview';
import MarketplaceSummary from './dashboard/MarketplaceSummary';
import MarketplaceManager from './dashboard/MarketplaceManager';
import CasesSummary from './dashboard/CasesSummary';
import ErrorBoundary from './common/ErrorBoundary';
import * as Sentry from '@sentry/react';
import { PROVIDER_TYPES } from '../constants/providerTypes';
import { getProviderConfig, getProviderLabels, getProviderNavigation } from '../config/providerConfig';
import { 
  PRICING_LIMITS, 
  COMMISSION_RATES, 
  MONTHLY_FEES,
  getIndividualPrice, 
  get3PackPrice, 
  get5PackPrice, 
  calculateServiceCommission, 
  calculateProductCommission, 
  getNetEarnings 
} from '../constants/pricingConstants';

// Veterinarian Dashboard - Designed specifically for veterinarians
const VetDashboard = () => {
  const { showInfo, showSuccess, showError } = useNotificationContext();
  const navigate = useNavigate();

  // State management
  const [user, setUser] = useState(null);
  const [profile, setProfile] = useState(null);
  const [providerData, setProviderData] = useState(null);
  const [listings, setListings] = useState([]);
  const [patients, setPatients] = useState([]);
  const [appointments, setAppointments] = useState([]);
  const [diagnoses, setDiagnoses] = useState([]);
  const [prescriptions, setPrescriptions] = useState([]);
  const [triageCases, setTriageCases] = useState([]);
  const [stats, setStats] = useState({});
  const [loading, setLoading] = useState(true);
  const [activeSection, setActiveSection] = useState('overview');
  const [showAvailabilityModal, setShowAvailabilityModal] = useState(false);

  // Marketplace functionality state variables
  const [products, setProducts] = useState([]);
  const [packages, setPackages] = useState([]);
  const [openDropdown, setOpenDropdown] = useState(null);
  const [showAddProductModal, setShowAddProductModal] = useState(false);
  const [showEditServiceModal, setShowEditServiceModal] = useState(false);
  const [showPackageModal, setShowPackageModal] = useState(false);
  const [editingService, setEditingService] = useState(null);
  const [editingProduct, setEditingProduct] = useState(null);
  const [editingPackage, setEditingPackage] = useState(null);
  const [showPayPerListingModal, setShowPayPerListingModal] = useState(false);
  const [payPerListingType, setPayPerListingType] = useState('service');
  const [billingPeriod, setBillingPeriod] = useState('monthly'); // 'monthly' or 'yearly'
  const [showCreateServiceModal, setShowCreateServiceModal] = useState(false);
  const [showScheduleModal, setShowScheduleModal] = useState(false);
  const [showMessagesModal, setShowMessagesModal] = useState(false);
  const [showAnalyticsModal, setShowAnalyticsModal] = useState(false);
  
  // MVP Pricing Constants
  const FREE_SERVICE_LIMIT = 5;
  const FREE_PRODUCT_LIMIT = 5;
  const FREE_PACKAGE_LIMIT = 3; // 3 packages for free users
  const SERVICE_COMMISSION_RATE = 0.18; // 18%
  const PRODUCT_COMMISSION_RATE = 0.10; // 10%
  
  // Monthly Listing Fees (Individual)
  const SERVICE_MONTHLY_FEE = 1.99; // $1.99/month per additional service listing
  const PRODUCT_MONTHLY_FEE = 1.49; // $1.49/month per additional product listing
  const PACKAGE_MONTHLY_FEE = 2.49; // $2.49/month per additional package listing
  
  // Yearly Listing Fees (Individual - 2 months free = ~17% off)
  const SERVICE_YEARLY_FEE = 19.90; // $19.90/year per service ($1.66/month equivalent)
  const PRODUCT_YEARLY_FEE = 14.90; // $14.90/year per product ($1.24/month equivalent)
  const PACKAGE_YEARLY_FEE = 24.90; // $24.90/year per package ($2.08/month equivalent)
  
  // Bundle Monthly Fees (Better Value)
  const SERVICE_3_PACK_MONTHLY = 4.99;   // 3 services for $4.99/month ($1.66 each)
  const SERVICE_5_PACK_MONTHLY = 7.99;   // 5 services for $7.99/month ($1.60 each)
  const PRODUCT_3_PACK_MONTHLY = 3.99;   // 3 products for $3.99/month ($1.33 each)
  const PRODUCT_5_PACK_MONTHLY = 5.99;   // 5 products for $5.99/month ($1.20 each)
  const PACKAGE_3_PACK_MONTHLY = 6.99;   // 3 packages for $6.99/month ($2.33 each)
  const PACKAGE_5_PACK_MONTHLY = 9.99;   // 5 packages for $9.99/month ($2.00 each)
  
  // Bundle Yearly Fees (Best Value - 2 months free = ~17% off)
  const SERVICE_3_PACK_YEARLY = 49.90;   // 3 services for $49.90/year ($4.16/month equivalent)
  const SERVICE_5_PACK_YEARLY = 79.90;   // 5 services for $79.90/year ($6.66/month equivalent)
  const PRODUCT_3_PACK_YEARLY = 39.90;   // 3 products for $39.90/year ($3.33/month equivalent)
  const PRODUCT_5_PACK_YEARLY = 59.90;   // 5 products for $59.90/year ($4.99/month equivalent)
  const PACKAGE_3_PACK_YEARLY = 69.90;   // 3 packages for $69.90/year ($5.83/month equivalent)
  const PACKAGE_5_PACK_YEARLY = 99.90;   // 5 packages for $99.90/year ($8.33/month equivalent)

  // Product form states
  const [productForm, setProductForm] = useState({
    name: '',
    description: '',
    price: '',
    category: 'Accessories', // Default to Accessories
    brand: '',
    stockQuantity: '',
    photos: [],
    specifications: ''
  });

  // Profile form states
  const [profileForm, setProfileForm] = useState({
    fullName: '',
    phone: '',
    address: '',
    description: '',
    serviceAreas: '',
    maxTravelDistance: '25',
    yearsOfExperience: '',
    profilePicture: ''
  });
  const [formInitialized, setFormInitialized] = useState(false);

  // Veterinarian-specific configuration
  const providerType = PROVIDER_TYPES.VETERINARIAN;
  const providerConfig = getProviderConfig(providerType);
  const providerLabels = getProviderLabels(providerType);

  // Pricing helper functions
  const getIndividualPrice = (type) => {
    if (billingPeriod === 'yearly') {
      return type === 'service' ? SERVICE_YEARLY_FEE : 
             type === 'product' ? PRODUCT_YEARLY_FEE : 
             PACKAGE_YEARLY_FEE;
    }
    return type === 'service' ? SERVICE_MONTHLY_FEE : 
           type === 'product' ? PRODUCT_MONTHLY_FEE : 
           PACKAGE_MONTHLY_FEE;
  };

  const get3PackPrice = (type) => {
    if (billingPeriod === 'yearly') {
      return type === 'service' ? SERVICE_3_PACK_YEARLY : 
             type === 'product' ? PRODUCT_3_PACK_YEARLY : 
             PACKAGE_3_PACK_YEARLY;
    }
    return type === 'service' ? SERVICE_3_PACK_MONTHLY : 
           type === 'product' ? PRODUCT_3_PACK_MONTHLY : 
           PACKAGE_3_PACK_MONTHLY;
  };

  const get5PackPrice = (type) => {
    if (billingPeriod === 'yearly') {
      return type === 'service' ? SERVICE_5_PACK_YEARLY : 
             type === 'product' ? PRODUCT_5_PACK_YEARLY : 
             PACKAGE_5_PACK_YEARLY;
    }
    return type === 'service' ? SERVICE_5_PACK_MONTHLY : 
           type === 'product' ? PRODUCT_5_PACK_MONTHLY : 
           PACKAGE_5_PACK_MONTHLY;
  };

  // Commission calculation functions
  const calculateServiceCommission = (price) => {
    return (parseFloat(price) * SERVICE_COMMISSION_RATE).toFixed(2);
  };

  const calculateProductCommission = (price) => {
    return (parseFloat(price) * PRODUCT_COMMISSION_RATE).toFixed(2);
  };

  const getNetEarnings = (price, isProduct = false) => {
    const commission = isProduct ? calculateProductCommission(price) : calculateServiceCommission(price);
    return (parseFloat(price) - parseFloat(commission)).toFixed(2);
  };

  // Helper function to filter only services (exclude products and packages)
  const getServicesOnly = (listings) => {
    return listings.filter(listing => {
      // Explicitly check for service type
      return listing.listing_type === 'service' || 
             (listing.listing_type !== 'product' && 
              listing.listing_type !== 'package' && 
              (listing.service_types || listing.service_type) !== 'product' && 
              (listing.service_types || listing.service_type) !== 'package');
    });
  };

  // Helper functions for marketplace
  const handleAddNewService = () => {
    const currentServiceCount = getServicesOnly(listings).length;
    const isFreeTier = !providerData?.subscription_plan || providerData?.subscription_plan === 'free';
    
    if (isFreeTier && currentServiceCount >= FREE_SERVICE_LIMIT) {
      setPayPerListingType('service');
      setShowPayPerListingModal(true);
      return;
    }
    
    setShowCreateServiceModal(true);
  };

  const handleAddProductModal = () => {
    const currentProductCount = products.length;
    const isFreeTier = !providerData?.subscription_plan || providerData?.subscription_plan === 'free';
    
    if (isFreeTier && currentProductCount >= FREE_PRODUCT_LIMIT) {
      setPayPerListingType('product');
      setShowPayPerListingModal(true);
      return;
    }
    
    setShowAddProductModal(true);
  };

  const handleAddNewPackage = () => {
    const isFreeTier = !providerData?.subscription_plan || providerData?.subscription_plan === 'free';
    
    if (isFreeTier && packages.length >= FREE_PACKAGE_LIMIT) {
      setPayPerListingType('package');
      setShowPayPerListingModal(true);
      return;
    }
    
    setShowPackageModal(true);
  };

  const handleDeleteService = async (serviceId, serviceName) => {
    if (!window.confirm(`Are you sure you want to delete "${serviceName}"?`)) return;
    
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');

      const { error } = await supabase
        .from('marketplace_listings')
        .delete()
        .eq('listing_id', serviceId)
        .eq('provider_email', user.email);

      if (error) throw error;

      const updatedListings = listings.filter(listing => listing.listing_id !== serviceId);
      setListings(updatedListings);
      showSuccess('Service deleted successfully');
    } catch (error) {
      console.error('Error deleting service:', error);
      showError(`Error deleting service: ${error.message}`);
    }
  };

  // Alias for marketplace section compatibility
  const handleDeleteListing = handleDeleteService;

  const handleDeleteProduct = async (productId, productName) => {
    if (!window.confirm(`Are you sure you want to delete "${productName}"?`)) return;
    
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');

      const { error } = await supabase
        .from('marketplace_listings')
        .delete()
        .eq('listing_id', productId)
        .eq('provider_email', user.email)
        .eq('listing_type', 'product');

      if (error) throw error;

      const updatedProducts = products.filter(p => p.id !== productId);
      setProducts(updatedProducts);
      showSuccess('Product deleted successfully');
    } catch (error) {
      console.error('Error deleting product:', error);
      showError(`Error deleting product: ${error.message}`);
    }
  };

  const handleDeletePackage = async (packageId, packageName) => {
    if (!window.confirm(`Are you sure you want to delete "${packageName}"?`)) return;
    
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');

      const { error } = await supabase
        .from('packages')
        .delete()
        .eq('id', packageId)
        .eq('provider_id', user.id);

      if (error) throw error;

      const updatedPackages = packages.filter(p => p.id !== packageId);
      setPackages(updatedPackages);
      showSuccess('Package deleted successfully');
    } catch (error) {
      console.error('Error deleting package:', error);
      showError(`Error deleting package: ${error.message}`);
    }
  };

  // Product management functions
  const handleAddProduct = async () => {
    if (!productForm.name || !productForm.price || !productForm.category || !productForm.stockQuantity) {
      showError('Please fill in all required fields (name, price, category, stock quantity)');
      return;
    }

    // Validate price
    const price = parseFloat(productForm.price);
    if (isNaN(price) || price < 0) {
      showError('Please enter a valid price');
      return;
    }

    // Validate stock quantity
    const stock = parseInt(productForm.stockQuantity);
    if (isNaN(stock) || stock < 0) {
      showError('Please enter a valid stock quantity (0 or greater)');
      return;
    }

    const photoDataSize = JSON.stringify(productForm.photos).length;
    if (photoDataSize > 2000000) {
      showError('Photos are too large. Please use smaller images or reduce the number of photos.');
      return;
    }

    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');

      // Check free tier limits (5 products for free users)
      const currentProductCount = products.length;
      const currentProviderData = providerData || profile || {};
      // Default to free tier if no subscription plan is set
      const subscriptionPlan = currentProviderData?.subscription_plan;
      const isFreeTier = !subscriptionPlan || subscriptionPlan === 'free' || subscriptionPlan !== 'premium';

      if (isFreeTier && currentProductCount >= FREE_PRODUCT_LIMIT && !editingProduct) {
        setPayPerListingType('product');
        setShowPayPerListingModal(true);
        return;
      }

      // Use marketplace_listings instead of separate products table
      const productData = {
        listing_type: 'product',
        listing_id: editingProduct ? (editingProduct.listing_id || editingProduct.id) : window.crypto?.randomUUID?.() || Math.random().toString(36),
        name: productForm.name.trim(),
        description: productForm.description.trim(),
        price: price,
        category: productForm.category || 'Accessories',
        brand: productForm.brand.trim() || null,
        stock_quantity: stock,
        service_types: 'product',
        provider_email: user.email,
        provider_name: profile?.full_name || providerData?.name || user.email?.split('@')[0],
        provider_type: profile?.provider_type || providerData?.provider_type || 'veterinarian',
        active: true,
        image_url: productForm.photos.length > 0 ? productForm.photos[0].url : null,
        created_at: editingProduct ? undefined : new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      let savedProduct;
      if (editingProduct) {
        const { data, error } = await supabase
          .from('marketplace_listings')
          .update(productData)
          .eq('listing_id', editingProduct.listing_id || editingProduct.id)
          .eq('provider_email', user.email)
          .select()
          .single();

        if (error) throw error;
        savedProduct = data;
      } else {
        const { data, error } = await supabase
          .from('marketplace_listings')
          .insert([productData])
          .select()
          .single();

        if (error) throw error;
        savedProduct = data;
      }

      // Update local products state with the saved product
      const newProduct = {
        id: savedProduct.listing_id,
        name: savedProduct.name,
        description: savedProduct.description,
        price: savedProduct.price,
        category: savedProduct.category,
        brand: savedProduct.brand,
        stockQuantity: savedProduct.stock_quantity,
        photos: productForm.photos, // Keep the photo objects for display
        specifications: productForm.specifications, // Keep form data since DB doesn't store this
        createdAt: savedProduct.created_at,
        updatedAt: savedProduct.updated_at,
        type: 'product'
      };

      let updatedProducts;
      if (editingProduct) {
        updatedProducts = products.map(p => p.id === editingProduct.id ? newProduct : p);
      } else {
        updatedProducts = [...products, newProduct];
      }

      setProducts(updatedProducts);
      
      // Refresh data to show updated product
      await Promise.all([
        loadListings(user.id),
        loadProducts(user.id)
      ]);

      // Reset form
      setProductForm({
        name: '',
        description: '',
        price: '',
        category: 'Accessories',
        brand: '',
        stockQuantity: '',
        photos: [],
        specifications: ''
      });
      setShowAddProductModal(false);
      setEditingProduct(null);

      showSuccess(`Product ${editingProduct ? 'updated' : 'created'} successfully!`);

    } catch (error) {
      console.error('Error saving product:', error);
      if (error.name === 'QuotaExceededError' || error.message.includes('quota')) {
        showError('Error: Product photos are too large. Please use smaller images or reduce the number of photos.');
      } else if (error.message.includes('JSON')) {
        showError('Error: Invalid product data. Please check your inputs and try again.');
      } else {
        showError(`Error saving product: ${error.message}. Please try again.`);
      }
    }
  };

  // Photo handling functions
  const handlePhotoUpload = (event) => {
    const files = Array.from(event.target.files);
    const maxFiles = 4;
    
    if (productForm.photos.length + files.length > maxFiles) {
      showError(`You can only upload up to ${maxFiles} photos`);
      return;
    }

    files.forEach(file => {
      if (file.type.startsWith('image/')) {
        // Check file size (10MB limit per file)
        if (file.size > 10 * 1024 * 1024) {
          showError(`File ${file.name} is too large. Please use images under 10MB.`);
          return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
          // Create an image to compress it
          const img = new Image();
          img.onload = () => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // Calculate new dimensions (max 800px width/height)
            let { width, height } = img;
            const maxDimension = 800;
            
            if (width > height) {
              if (width > maxDimension) {
                height = (height * maxDimension) / width;
                width = maxDimension;
              }
            } else {
              if (height > maxDimension) {
                width = (width * maxDimension) / height;
                height = maxDimension;
              }
            }
            
            canvas.width = width;
            canvas.height = height;
            
            // Draw and compress
            ctx.drawImage(img, 0, 0, width, height);
            const compressedDataUrl = canvas.toDataURL('image/jpeg', 0.8);
            
            const newPhoto = {
              id: Date.now() + Math.random(),
              file: file,
              url: compressedDataUrl,
              name: file.name
            };
            
            setProductForm(prev => ({
              ...prev,
              photos: [...prev.photos, newPhoto]
            }));
          };
          img.src = e.target.result;
        };
        reader.readAsDataURL(file);
      } else {
        showError('Please select only image files');
      }
    });
  };

  const removePhoto = (photoId) => {
    setProductForm(prev => ({
      ...prev,
      photos: prev.photos.filter(photo => photo.id !== photoId)
    }));
  };

  useEffect(() => {
    initializeDashboard();
  }, []);

  // Initialize form when profile or provider data first loads (but preserve user changes)
  useEffect(() => {
    if ((profile || providerData || user) && !formInitialized) {
      // Prioritize the more complete name (providerData?.name is usually more complete)
      const fullName = (providerData?.name && providerData.name.trim().split(' ').length > 1) 
        ? providerData.name 
        : (profile?.full_name || providerData?.name || user?.email?.split('@')[0] || 'User');

      setProfileForm(prev => ({
        ...prev,
        fullName: fullName,
        phone: providerData?.phone || '',
        address: providerData?.address || '',
        description: providerData?.description || '',
        serviceAreas: providerData?.service_areas || 'Auckland',
        maxTravelDistance: providerData?.max_travel_distance || '25',
        profilePicture: providerData?.profile_picture || profile?.avatar_url || ''
      }));
      setFormInitialized(true);
    }
  }, [profile, providerData, user, formInitialized]);

  // Update product form when editing
  useEffect(() => {
    if (editingProduct) {
      setProductForm({
        name: editingProduct.name || '',
        description: editingProduct.description || '',
        price: (editingProduct.price || 0).toString(),
        category: editingProduct.category || 'Accessories',
        brand: editingProduct.brand || '',
        stockQuantity: (editingProduct.stockQuantity || editingProduct.stock_quantity || 0).toString(),
        photos: editingProduct.photos || [],
        specifications: editingProduct.specifications || ''
      });
    }
  }, [editingProduct]);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (openDropdown && !event.target.closest('.relative')) {
        setOpenDropdown(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [openDropdown]);

  const initializeDashboard = async () => {
    try {
      setLoading(true);
      
      // Get current user
      const currentUser = await getUserSafely();
      if (!currentUser) {
        console.log('VetDashboard: No user found, redirecting to home');
        navigate('/');
        return;
      }
      
      setUser(currentUser);
      console.log('VetDashboard: User found:', currentUser.email);

      // Get profile data
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('role, full_name, phone, location, organization')
        .eq('id', currentUser.id)
        .single();

      if (profileError || !profileData) {
        console.log('VetDashboard: No profile data found');
        navigate('/');
        return;
      }
      
      console.log('VetDashboard: Profile data:', profileData);
      
      // Strict role validation - only veterinarians allowed
      if (profileData.role !== 'veterinarian') {
        console.log('VetDashboard: Access denied. Expected: veterinarian, Got:', profileData.role);
        navigate('/');
        return;
      }
      
      console.log('VetDashboard: Access granted for veterinarian');
      setProfile(profileData);

      // Load all dashboard data
      await Promise.all([
        loadProviderData(currentUser.id),
        loadPatients(currentUser.id),
        loadAppointments(currentUser.id),
        loadDiagnoses(currentUser.id),
        loadPrescriptions(currentUser.id),
        loadTriageCases(currentUser.id),
        loadListings(currentUser.id),
        loadProducts(currentUser.id),
        loadPackages(currentUser.id)
      ]);

      // Calculate stats
      calculateDashboardStats();

    } catch (error) {
      console.error('VetDashboard: Error in initialization:', error);
      Sentry.captureException(error);
      showError('Failed to load dashboard data. Please refresh the page.');
    } finally {
      setLoading(false);
    }
  };

  const loadProviderData = async (userId) => {
    try {
      const { data, error } = await supabase
        .from('providers')
        .select('*')
        .eq('user_id', userId)
        .single();

      if (data) {
        setProviderData(data);
      } else {
        // Create default provider profile for veterinarian
        const defaultProvider = {
          id: userId,
          user_id: userId,
          provider_type: 'veterinarian',
          full_name: profile?.full_name || user?.email,
          email: user?.email,
          phone: profile?.phone || null,
          bio: 'Professional veterinarian providing comprehensive medical care for animals.',
          specializations: ['General Practice'],
          years_experience: 0,
          verified: false,
          is_active: true
        };
        setProviderData(defaultProvider);
      }
    } catch (error) {
      console.error('Error loading provider data:', error);
    }
  };

  const loadPatients = async (userId) => {
    try {
      // Get patients only from consultation bookings and appointments
      const { data, error } = await supabase
        .from('consultation_bookings')
        .select(`
          pet_profiles (
            id,
            name,
            species,
            age,
            created_at
          )
        `)
        .eq('provider_id', userId)
        .not('pet_profiles', 'is', null);

      if (error) throw error;
      
      // Extract unique patients from bookings
      const uniquePatients = [];
      const patientIds = new Set();
      
      data?.forEach(booking => {
        if (booking.pet_profiles && !patientIds.has(booking.pet_profiles.id)) {
          patientIds.add(booking.pet_profiles.id);
          uniquePatients.push(booking.pet_profiles);
        }
      });
      
      setPatients(uniquePatients || []);
    } catch (error) {
      console.error('Error loading patients:', error);
      // Fallback to empty array
      setPatients([]);
    }
  };

  const loadAppointments = async (userId) => {
    try {
      const { data, error } = await supabase
        .from('bookings')
        .select('*, pet_profiles(name, species), profiles(full_name)')
        .eq('provider_id', userId)
        .order('scheduled_date', { ascending: true });

      if (error) throw error;
      setAppointments(data || []);
    } catch (error) {
      console.error('Error loading appointments:', error);
    }
  };

  const loadDiagnoses = async (userId) => {
    try {
      const { data, error } = await supabase
        .from('medical_records')
        .select('*, pet_profiles(name, species)')
        .eq('veterinarian_id', userId)
        .eq('record_type', 'diagnosis')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setDiagnoses(data || []);
    } catch (error) {
      console.error('Error loading diagnoses:', error);
    }
  };

  const loadPrescriptions = async (userId) => {
    try {
      const { data, error } = await supabase
        .from('medical_records')
        .select('*, pet_profiles(name, species)')
        .eq('veterinarian_id', userId)
        .eq('record_type', 'prescription')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setPrescriptions(data || []);
    } catch (error) {
      console.error('Error loading prescriptions:', error);
    }
  };

  const loadTriageCases = async (userId) => {
    try {
      const { data, error } = await supabase
        .from('triage_cases')
        .select('*, pet_profiles(name, species)')
        .eq('assigned_vet_id', userId)
        .order('priority', { ascending: false });

      if (error) throw error;
      setTriageCases(data || []);
    } catch (error) {
      console.error('Error loading triage cases:', error);
    }
  };

  const loadListings = async (userId) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      const { data, error } = await supabase
        .from('marketplace_listings')
        .select('*')
        .eq('provider_email', user.email)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setListings(data || []);
    } catch (error) {
      console.error('Error loading listings:', error);
    }
  };

  const loadProducts = async (userId) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      const { data, error } = await supabase
        .from('marketplace_listings')
        .select('*')
        .eq('provider_email', user.email)
        .eq('listing_type', 'product')
        .order('created_at', { ascending: false });

      if (error) throw error;
      
      const productsFromMarketplace = (data || []).map(listing => ({
        id: listing.listing_id,
        name: listing.name,
        description: listing.description,
        price: listing.price,
        category: listing.category,
        brand: listing.brand,
        stockQuantity: listing.stock_quantity,
        photos: listing.image_url ? [{ id: 1, url: listing.image_url, name: 'Product Image' }] : [],
        specifications: ''
      }));
      
      setProducts(productsFromMarketplace);
    } catch (error) {
      console.error('Error loading products:', error);
    }
  };

  const loadPackages = async (userId) => {
    try {
      const { data, error } = await supabase
        .from('packages')
        .select('*')
        .eq('provider_id', userId)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setPackages(data || []);
    } catch (error) {
      console.error('Error loading packages:', error);
    }
  };

  const calculateDashboardStats = () => {
    const totalPatients = patients.length;
    const todayAppointments = appointments.filter(apt => {
      const today = new Date().toDateString();
      return new Date(apt.scheduled_date).toDateString() === today;
    }).length;
    const urgentCases = triageCases.filter(case_ => case_.priority === 'urgent').length;
    const activePrescriptions = prescriptions.filter(rx => rx.status === 'active').length;

    setStats({
      totalPatients,
      todayAppointments,
      urgentCases,
      activePrescriptions,
      totalDiagnoses: diagnoses.length,
      totalListings: listings.length
    });
  };

  // Veterinarian-specific navigation sections
  const navigationSections = [
    { 
      id: 'overview', 
      name: 'Overview', 
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
      )
    },
    { 
      id: 'patients', 
      name: 'Patients', 
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
        </svg>
      )
    },
    { 
      id: 'appointments', 
      name: 'Appointments', 
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
      )
    },
    { 
      id: 'diagnoses', 
      name: 'Diagnoses', 
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
      )
    },
    { 
      id: 'prescriptions', 
      name: 'Prescriptions', 
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
        </svg>
      )
    },
    { 
      id: 'triage', 
      name: 'Triage Cases', 
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
      )
    },
    { 
      id: 'marketplace', 
      name: 'Marketplace', 
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
        </svg>
      )
    },
    { 
      id: 'analytics', 
      name: 'Analytics', 
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
      )
    },
    { 
      id: 'profile', 
      name: 'Profile', 
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
      )
    }
  ];

  // Render functions for each section
  const renderOverviewSection = () => (
    <div className="space-y-6">
      {/* Header with quick actions */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Luniby Marketplace Dashboard</h1>
            <p className="text-gray-600">Welcome back, Dr. {profile?.full_name || 'Veterinarian'}</p>
          </div>
          <button
            onClick={() => setShowAvailabilityModal(true)}
            className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
          >
            Manage Schedule
          </button>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-green-50 p-4 rounded-lg">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-600 text-sm font-medium">Today's Appointments</p>
                <p className="text-2xl font-bold text-green-900">{stats.todayAppointments || 0}</p>
              </div>
              <span className="text-2xl">📅</span>
            </div>
          </div>
          
          <div className="bg-blue-50 p-4 rounded-lg">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-600 text-sm font-medium">Total Patients</p>
                <p className="text-2xl font-bold text-blue-900">{stats.totalPatients || 0}</p>
              </div>
              <span className="text-2xl">🐕</span>
            </div>
          </div>
          
          <div className="bg-red-50 p-4 rounded-lg">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-red-600 text-sm font-medium">Urgent Cases</p>
                <p className="text-2xl font-bold text-red-900">{stats.urgentCases || 0}</p>
              </div>
              <span className="text-2xl">🚨</span>
            </div>
          </div>
          
          <div className="bg-purple-50 p-4 rounded-lg">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-purple-600 text-sm font-medium">Active Prescriptions</p>
                <p className="text-2xl font-bold text-purple-900">{stats.activePrescriptions || 0}</p>
              </div>
              <span className="text-2xl">💊</span>
            </div>
          </div>
        </div>
      </div>

      {/* First Row - Marketplace Summary and Urgent Cases */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Marketplace Summary */}
        <MarketplaceSummary 
          listings={listings}
          packages={packages}
          products={products}
          setActiveSection={setActiveSection}
        />

        {/* Urgent Cases */}
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
            <span>🚨</span>
            Urgent Cases
          </h3>
          {triageCases.filter(case_ => case_.priority === 'urgent').length === 0 ? (
            <p className="text-gray-500">No urgent cases at the moment</p>
          ) : (
            <div className="space-y-3">
              {triageCases.filter(case_ => case_.priority === 'urgent').slice(0, 3).map((case_) => (
                <div key={case_.id} className="flex items-center justify-between p-3 bg-red-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900">{case_.pet_profiles?.name}</p>
                    <p className="text-sm text-gray-600">{case_.chief_complaint}</p>
                  </div>
                  <button 
                    onClick={() => setActiveSection('triage')}
                    className="text-red-600 hover:text-red-800 text-sm font-medium"
                  >
                    Review →
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Second Row - Today's Schedule */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">

        {/* Today's Appointments */}
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
            <span>📅</span>
            Today's Schedule
          </h3>
          {appointments.filter(apt => {
            const today = new Date().toDateString();
            return new Date(apt.scheduled_date).toDateString() === today;
          }).length === 0 ? (
            <p className="text-gray-500">No appointments scheduled for today</p>
          ) : (
            <div className="space-y-3">
              {appointments.filter(apt => {
                const today = new Date().toDateString();
                return new Date(apt.scheduled_date).toDateString() === today;
              }).slice(0, 3).map((appointment) => (
                <div key={appointment.id} className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900">{appointment.pet_profiles?.name}</p>
                    <p className="text-sm text-gray-600">{new Date(appointment.scheduled_date).toLocaleTimeString()}</p>
                  </div>
                  <button 
                    onClick={() => setActiveSection('appointments')}
                    className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                  >
                    View →
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );

  const renderPatientsSection = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-gray-900">My Patients</h2>
          <div className="text-sm text-gray-500">
            Patients from marketplace bookings
          </div>
        </div>
        
        {patients.length === 0 ? (
          <div className="text-center py-8">
            <span className="text-4xl">🐕</span>
            <p className="text-gray-500 mt-2">No patients from marketplace bookings yet</p>
            <p className="text-sm text-gray-400 mt-1">Patients will appear here when pet owners book your services</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {patients.map((patient) => (
              <div key={patient.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-semibold text-gray-900">{patient.name}</h3>
                  <span className="text-sm text-gray-500">{patient.species}</span>
                </div>
                <p className="text-sm text-gray-600 mb-3">Age: {patient.age || 'Unknown'}</p>
                <button className="w-full text-sm bg-green-50 text-green-700 py-2 rounded hover:bg-green-100">
                  View Records
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  const renderAppointmentsSection = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-gray-900">Marketplace Bookings</h2>
          <div className="text-sm text-gray-500">
            Appointments from marketplace
          </div>
        </div>
        
        {appointments.length === 0 ? (
          <div className="text-center py-8">
            <span className="text-4xl">📅</span>
            <p className="text-gray-500 mt-2">No marketplace bookings yet</p>
            <p className="text-sm text-gray-400 mt-1">Pet owners can book your services through the Luniby marketplace</p>
          </div>
        ) : (
          <div className="space-y-4">
            {appointments.map((appointment) => (
              <div key={appointment.id} className="border rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-semibold text-gray-900">{appointment.pet_profiles?.name}</h3>
                    <p className="text-sm text-gray-600">Owner: {appointment.profiles?.full_name}</p>
                    <p className="text-sm text-gray-500">
                      {new Date(appointment.scheduled_date).toLocaleDateString()} at {new Date(appointment.scheduled_date).toLocaleTimeString()}
                    </p>
                  </div>
                  <div className="text-right">
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      appointment.status === 'confirmed' ? 'bg-green-100 text-green-800' :
                      appointment.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {appointment.status}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  const renderDiagnosesSection = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-gray-900">Diagnosis & Treatment Plans</h2>
          <div className="text-sm text-gray-500">
            For marketplace patients only
          </div>
        </div>
        
        {diagnoses.length === 0 ? (
          <div className="text-center py-8">
            <span className="text-4xl">🩺</span>
            <p className="text-gray-500 mt-2">No diagnoses recorded yet</p>
            <p className="text-sm text-gray-400 mt-1">Create diagnoses during marketplace consultations</p>
          </div>
        ) : (
          <div className="space-y-4">
            {diagnoses.map((diagnosis) => (
              <div key={diagnosis.id} className="border rounded-lg p-4">
                <div className="flex items-start justify-between">
                  <div>
                    <h3 className="font-semibold text-gray-900">{diagnosis.pet_profiles?.name}</h3>
                    <p className="text-sm text-gray-600 mt-1">{diagnosis.diagnosis || diagnosis.notes}</p>
                    <p className="text-xs text-gray-500 mt-2">
                      {new Date(diagnosis.created_at).toLocaleDateString()}
                    </p>
                  </div>
                  <button className="text-green-600 hover:text-green-800 text-sm font-medium">
                    Edit →
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  const renderPrescriptionsSection = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-gray-900">Prescription Management</h2>
          <div className="text-sm text-gray-500">
            For marketplace patients only
          </div>
        </div>
        
        {prescriptions.length === 0 ? (
          <div className="text-center py-8">
            <span className="text-4xl">💊</span>
            <p className="text-gray-500 mt-2">No prescriptions issued yet</p>
            <p className="text-sm text-gray-400 mt-1">Issue prescriptions during marketplace consultations</p>
          </div>
        ) : (
          <div className="space-y-4">
            {prescriptions.map((prescription) => (
              <div key={prescription.id} className="border rounded-lg p-4">
                <div className="flex items-start justify-between">
                  <div>
                    <h3 className="font-semibold text-gray-900">{prescription.pet_profiles?.name}</h3>
                    <p className="text-sm text-gray-600 mt-1">{prescription.medication || prescription.notes}</p>
                    <p className="text-xs text-gray-500 mt-2">
                      Prescribed: {new Date(prescription.created_at).toLocaleDateString()}
                    </p>
                  </div>
                  <div className="text-right">
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      prescription.status === 'active' ? 'bg-green-100 text-green-800' :
                      prescription.status === 'completed' ? 'bg-gray-100 text-gray-800' :
                      'bg-yellow-100 text-yellow-800'
                    }`}>
                      {prescription.status || 'active'}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  const renderTriageSection = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h2 className="text-xl font-bold text-gray-900 mb-6">Triage Cases</h2>
        
        {triageCases.length === 0 ? (
          <div className="text-center py-8">
            <span className="text-4xl">🚨</span>
            <p className="text-gray-500 mt-2">No triage cases assigned</p>
          </div>
        ) : (
          <div className="space-y-4">
            {triageCases.map((case_) => (
              <div key={case_.id} className={`border rounded-lg p-4 ${
                case_.priority === 'urgent' ? 'border-red-200 bg-red-50' :
                case_.priority === 'high' ? 'border-yellow-200 bg-yellow-50' :
                'border-gray-200'
              }`}>
                <div className="flex items-start justify-between">
                  <div>
                    <h3 className="font-semibold text-gray-900">{case_.pet_profiles?.name}</h3>
                    <p className="text-sm text-gray-600 mt-1">{case_.chief_complaint}</p>
                    <div className="flex items-center gap-4 mt-2">
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        case_.priority === 'urgent' ? 'bg-red-100 text-red-800' :
                        case_.priority === 'high' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {case_.priority} priority
                      </span>
                      <span className="text-xs text-gray-500">
                        {new Date(case_.created_at).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                  <button className="text-green-600 hover:text-green-800 text-sm font-medium">
                    Review Case →
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  const renderMarketplaceSection = () => (
    <div className="p-6 space-y-0">
      {/* Marketplace Status Container - Full Width */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-xl font-bold text-gray-900 mb-2">Marketplace Status</h3>
            <p className="text-gray-600 text-sm">
              {providerData?.verified 
                ? "Your profile is live and accepting bookings from customers" 
                : listings.length > 0 
                  ? "Ready to publish your services to the marketplace"
                  : "Create services to get started on the marketplace"
              }
            </p>
          </div>
          {!providerData?.verified && listings.length > 0 && (
            <button
              onClick={handleGoLive}
              className="px-6 py-3 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 transition-colors"
            >
              Go Live on Marketplace
            </button>
          )}
        </div>
      </div>

      {/* Marketplace Manager - Full Width */}
      <div className="p-6">
        <MarketplaceManager 
          listings={getServicesOnly(listings)}
          packages={packages}
          products={products}
          providerData={providerData}
          onCreateService={(type) => {
            if (type === 'service') handleAddNewService();
            else if (type === 'product') handleAddProductModal();
            else if (type === 'package') handleAddNewPackage();
          }}
          onEditService={(service) => {
            setEditingService(service);
            setShowEditServiceModal(true);
          }}
          onDeleteService={handleDeleteService}
          onToggleStatus={async (listingId, currentStatus) => {
            try {
              const { error } = await supabase
                .from('marketplace_listings')
                .update({ active: !currentStatus })
                .eq('listing_id', listingId);

              if (error) throw error;

              // Refresh listings
              await loadListings(user.id);
              showSuccess(!currentStatus ? 'Service activated successfully' : 'Service deactivated successfully');
            } catch (error) {
              showError('Failed to update service status');
            }
          }}
          onGoLive={handleGoLive}
        />
      </div>
    </div>
  );

  // Go Live function - publishes provider profile to marketplace
  const handleGoLive = async () => {
    try {
      const currentUser = await getUserSafely();
      if (!currentUser) {
        showError('User not authenticated');
        return;
      }

      // Check if provider record exists
      const { data: existingProvider } = await supabase
        .from('providers')
        .select('id, verified')
        .eq('id', currentUser.id)
        .single();

      if (existingProvider) {
        // Update existing provider to be verified/live
        const { error: updateError } = await supabase
          .from('providers')
          .update({ verified: true, is_active: true })
          .eq('id', currentUser.id);

        if (updateError) throw updateError;
        
        showSuccess('🎉 Your profile is now live on the marketplace! You can view it using "View My Listing".');
      } else {
        // Create new provider record
        const providerProfile = profile || {};
        const newProviderData = {
          id: currentUser.id,
          name: providerProfile?.full_name || currentUser.email,
          email: currentUser.email,
          phone: providerProfile?.phone || null,
          provider_type: 'veterinarian',
          business_name: providerProfile?.business_name || null,
          address: null,
          city: 'Location TBD',
          country: 'Australia',
          bio: 'Professional veterinarian providing comprehensive medical care for animals.',
          offers_services: true,
          offers_products: false,
          verified: true, // Live on marketplace
          is_active: true,
          featured: false,
          rating: 0.00,
          reviews_count: 0,
          profile_image_url: null,
          service_types: ['Veterinary Services']
        };

        const { error: insertError } = await supabase.from('providers').insert(newProviderData);
        if (insertError) throw insertError;

        showSuccess('🎉 Your profile is now live on the marketplace! You can view it using "View My Listing".');
      }

      // Update all services to be verified/active
      const { error: servicesError } = await supabase
        .from('marketplace_listings')
        .update({ verified: true, active: true })
        .eq('provider_email', currentUser.email);

      if (servicesError) {
        console.error('Error updating services:', servicesError);
      }

      // Reload data to reflect changes
      await initializeDashboard();
      
    } catch (error) {
      console.error('Error going live:', error);
      showError('Failed to go live: ' + error.message);
    }
  };

  // Service creation handler
  const handleCreateService = async (serviceData) => {
    try {
      const currentUser = await getUserSafely();
      if (!currentUser) {
        throw new Error('User not authenticated');
      }

      // Get provider data first
      const currentProviderData = providerData || profile || {};
      
      // Check free tier limits (5 services for free users)
      const currentServiceCount = getServicesOnly(listings).length;
      const subscriptionPlan = currentProviderData?.subscription_plan;
      const isFreeTier = !subscriptionPlan || subscriptionPlan === 'free' || subscriptionPlan !== 'premium';

      if (isFreeTier && currentServiceCount >= FREE_SERVICE_LIMIT) {
        showError(`Free tier limit reached! You can have up to ${FREE_SERVICE_LIMIT} services. Click "Upgrade to Premium" to get unlimited services.`);
        return;
      }
      
      const insertData = {
        listing_type: 'service',
        listing_id: window.crypto?.randomUUID?.() || Math.random().toString(36),
        name: serviceData.title,
        description: serviceData.description,
        service_types: serviceData.service_type,
        price: parseFloat(serviceData.price),
        provider_name: currentProviderData?.full_name || currentUser.email,
        provider_type: 'veterinarian',
        provider_email: currentUser.email,
        provider_phone: currentProviderData?.phone || 'N/A',
        active: true,
        verified: false,
        rating: 0.0,
        reviews_count: 0,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data, error } = await supabase
        .from('marketplace_listings')
        .insert(insertData)
        .select();
        
      if (error) {
        throw new Error(`Database error: ${error.message} (Code: ${error.code})`);
      }
      
      showSuccess('Service created successfully!');
      setShowCreateServiceModal(false);
      await loadListings(currentUser.id); // Refresh data
    } catch (error) {
      console.error('Error creating service:', error);
      showError(`Failed to create service: ${error.message}`);
    }
  };

  // Service editing handler
  const handleUpdateService = async (serviceData) => {
    try {
      const updateData = {
        name: serviceData.title,
        description: serviceData.description,
        service_types: serviceData.service_type,
        price: parseFloat(serviceData.price),
        updated_at: new Date().toISOString()
      };
      
      const { error } = await supabase
        .from('marketplace_listings')
        .update(updateData)
        .eq('listing_id', editingService.listing_id || editingService.id);

      if (error) {
        throw new Error(`Database error: ${error.message} (Code: ${error.code})`);
      }
      
      showSuccess('Service updated successfully!');
      setShowEditServiceModal(false);
      setEditingService(null);
      await loadListings(user.id); // Refresh data
    } catch (error) {
      console.error('Error updating service:', error);
      showError(`Failed to update service: ${error.message}`);
    }
  };

  // Role-based service options
  const getServiceOptions = (providerType) => {
    const baseServices = [
      { value: "Mobile Consultation", label: "Mobile Consultation" },
      { value: "Mobile Emergency Care", label: "Mobile Emergency Care" }
    ];
    
    // Veterinarian services
    return [
      ...baseServices,
      { value: "Clinic Consultation", label: "Clinic Consultation" },
      { value: "Surgery Services", label: "Surgery Services" },
      { value: "Diagnostic Testing", label: "Diagnostic Testing" },
      { value: "Preventive Care", label: "Preventive Care" },
      { value: "Dental Care", label: "Dental Care" },
      { value: "Orthopedic Care", label: "Orthopedic Care" },
      { value: "Laboratory Services", label: "Laboratory Services" },
      { value: "Telemedicine Consultation", label: "Telemedicine Consultation" },
      { value: "Emergency Surgery", label: "Emergency Surgery" },
      { value: "Specialist Referral", label: "Specialist Referral" },
      { value: "Prescription Management", label: "Prescription Management" },
      { value: "Vaccination Programs", label: "Vaccination Programs" }
    ];
  };

  // Service edit component
  const ServiceEditForm = ({ service, onClose }) => {
    const [serviceData, setServiceData] = useState({
      title: service.name || service.title || '',
      description: service.description || '',
      price: service.price || service.price_from || '',
      service_type: service.service_types || service.service_type || ''
    });

    const handleSubmit = async (e) => {
      e.preventDefault();
      await handleUpdateService(serviceData);
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          <div className="p-6 border-b border-gray-200">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">Edit Service</h2>
              <button onClick={onClose} className="text-gray-400 hover:text-gray-600 text-2xl">×</button>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Service Title *</label>
              <input
                type="text"
                required
                value={serviceData.title}
                onChange={(e) => setServiceData({...serviceData, title: e.target.value})}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                placeholder="e.g., Veterinary Consultation"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Service Type *</label>
              <select
                required
                value={serviceData.service_type}
                onChange={(e) => setServiceData({...serviceData, service_type: e.target.value})}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Select service type</option>
                {getServiceOptions('veterinarian').map((service) => (
                  <option key={service.value} value={service.value}>
                    {service.label}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Price *</label>
              <input
                type="number"
                required
                min="0"
                step="0.01"
                value={serviceData.price}
                onChange={(e) => setServiceData({...serviceData, price: e.target.value})}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                placeholder="150.00"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
              <textarea
                value={serviceData.description}
                onChange={(e) => setServiceData({...serviceData, description: e.target.value})}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                rows="3"
                placeholder="Describe your service..."
              />
            </div>

            <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 text-sm font-medium"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm font-medium"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                Update Service
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  // Service creation component
  const ServiceCreateForm = ({ onClose }) => {
    const [serviceData, setServiceData] = useState({
      title: '',
      description: '',
      price: '',
      service_type: ''
    });

    const handleSubmit = async (e) => {
      e.preventDefault();
      await handleCreateService(serviceData);
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          <div className="p-6 border-b border-gray-200">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">Create New Service</h2>
              <button onClick={onClose} className="text-gray-400 hover:text-gray-600 text-2xl">×</button>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Service Title *</label>
              <input
                type="text"
                required
                value={serviceData.title}
                onChange={(e) => setServiceData({...serviceData, title: e.target.value})}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                placeholder="e.g., Veterinary Consultation"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Service Type *</label>
              <select
                required
                value={serviceData.service_type}
                onChange={(e) => setServiceData({...serviceData, service_type: e.target.value})}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Select service type</option>
                {getServiceOptions('veterinarian').map((service) => (
                  <option key={service.value} value={service.value}>
                    {service.label}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Price *</label>
              <input
                type="number"
                required
                min="0"
                step="0.01"
                value={serviceData.price}
                onChange={(e) => setServiceData({...serviceData, price: e.target.value})}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                placeholder="150.00"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
              <textarea
                value={serviceData.description}
                onChange={(e) => setServiceData({...serviceData, description: e.target.value})}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                rows="3"
                placeholder="Describe your service..."
              />
            </div>

            <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 text-sm font-medium"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm font-medium"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Create Service
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  const renderProfileSection = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h2 className="text-xl font-bold text-gray-900 mb-6">Veterinarian Profile</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h3 className="font-semibold text-gray-900 mb-4">Professional Information</h3>
            <div className="space-y-3">
              <div>
                <label className="text-sm font-medium text-gray-700">Full Name</label>
                <p className="text-gray-900">{profile?.full_name || 'Not set'}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">Email</label>
                <p className="text-gray-900">{user?.email}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">Phone</label>
                <p className="text-gray-900">{profile?.phone || 'Not set'}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">Practice/Organization</label>
                <p className="text-gray-900">{profile?.organization || 'Not set'}</p>
              </div>
            </div>
          </div>
          
          <div>
            <h3 className="font-semibold text-gray-900 mb-4">Practice Details</h3>
            <div className="space-y-3">
              <div>
                <label className="text-sm font-medium text-gray-700">Specializations</label>
                <p className="text-gray-900">{providerData?.specializations?.join(', ') || 'General Practice'}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">Years of Experience</label>
                <p className="text-gray-900">{providerData?.years_experience || 0} years</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">License Status</label>
                <span className={`px-2 py-1 text-xs rounded-full ${
                  providerData?.verified ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {providerData?.verified ? 'Verified' : 'Pending Verification'}
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderAnalyticsSection = () => {
    // Calculate financial metrics
    const calculateRevenue = () => {
      const completedBookings = appointments.filter(apt => apt.status === 'completed');
      const serviceRevenue = completedBookings.reduce((total, appointment) => {
        // Estimate revenue from appointments
        const estimatedPrice = 150; // Average vet consultation price
        const netEarnings = estimatedPrice * 0.85; // 15% platform fee
        return total + netEarnings;
      }, 0);

      // Estimate product revenue (since we don't have actual sales data)
      const productRevenue = listings.length * 25; // Estimated average monthly revenue per listing

      // Package revenue estimation
      const packageRevenue = listings.filter(l => l.active).reduce((total, listing) => {
        const price = parseFloat(listing.price_from || listing.price || 0);
        return total + (price * 0.1); // Estimated 10% of listing price as monthly package revenue
      }, 0);

      return {
        total: serviceRevenue + productRevenue + packageRevenue,
        services: serviceRevenue,
        products: productRevenue,
        packages: packageRevenue
      };
    };

    const revenue = calculateRevenue();
    const thisMonthAppointments = appointments.filter(apt => {
      const appointmentDate = new Date(apt.created_at);
      const now = new Date();
      return appointmentDate.getMonth() === now.getMonth() && appointmentDate.getFullYear() === now.getFullYear();
    });

    return (
      <div className="p-6 space-y-6">
        {/* Header */}
        <div className="bg-gradient-to-r from-green-50 to-blue-50 p-6 rounded-lg border border-green-200">
          <h3 className="text-xl font-bold text-gray-900 mb-2">Financial Analytics</h3>
          <p className="text-sm text-gray-700">
            Track your earnings from consultations, services, and products. All figures show net earnings after platform fees.
          </p>
        </div>

        {/* Revenue Overview Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow">
            <div className="flex items-center justify-between mb-2">
              <h4 className="text-sm font-medium text-gray-500">Total Earnings</h4>
              <span className="text-green-500">💵</span>
            </div>
            <p className="text-3xl font-bold text-green-600">${revenue.total.toFixed(2)}</p>
            <p className="text-xs text-gray-500 mt-1">Net earnings (after fees)</p>
          </div>
          
          <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow">
            <div className="flex items-center justify-between mb-2">
              <h4 className="text-sm font-medium text-gray-500">Consultation Revenue</h4>
              <span className="text-green-500">🩺</span>
            </div>
            <p className="text-3xl font-bold text-green-600">${revenue.services.toFixed(2)}</p>
            <p className="text-xs text-gray-500 mt-1">{appointments.filter(apt => apt.status === 'completed').length} completed consultations</p>
          </div>
          
          <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow">
            <div className="flex items-center justify-between mb-2">
              <h4 className="text-sm font-medium text-gray-500">Service Listings</h4>
              <span className="text-green-500">📋</span>
            </div>
            <p className="text-3xl font-bold text-green-600">${revenue.products.toFixed(2)}</p>
            <p className="text-xs text-gray-500 mt-1">{listings.length} services listed</p>
          </div>
          
          <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow">
            <div className="flex items-center justify-between mb-2">
              <h4 className="text-sm font-medium text-gray-500">Package Revenue</h4>
              <span className="text-green-500">📦</span>
            </div>
            <p className="text-3xl font-bold text-green-600">${revenue.packages.toFixed(2)}</p>
            <p className="text-xs text-gray-500 mt-1">{listings.filter(l => l.active).length} active listings</p>
          </div>
        </div>

        {/* Revenue Breakdown Chart */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Revenue Breakdown */}
          <div className="bg-white shadow rounded-lg p-6">
            <h4 className="text-lg font-medium text-gray-900 mb-4">Revenue Breakdown</h4>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-green-500 rounded-full mr-3"></div>
                  <span className="text-sm font-medium text-gray-700">Consultations</span>
                </div>
                <div className="text-right">
                  <span className="text-sm font-bold text-gray-900">${revenue.services.toFixed(2)}</span>
                  <div className="w-32 bg-gray-200 rounded-full h-2 mt-1">
                    <div 
                      className="bg-green-500 h-2 rounded-full" 
                      style={{ width: `${revenue.total > 0 ? (revenue.services / revenue.total) * 100 : 0}%` }}
                    ></div>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-green-400 rounded-full mr-3"></div>
                  <span className="text-sm font-medium text-gray-700">Services</span>
                </div>
                <div className="text-right">
                  <span className="text-sm font-bold text-gray-900">${revenue.products.toFixed(2)}</span>
                  <div className="w-32 bg-gray-200 rounded-full h-2 mt-1">
                    <div 
                      className="bg-green-400 h-2 rounded-full" 
                      style={{ width: `${revenue.total > 0 ? (revenue.products / revenue.total) * 100 : 0}%` }}
                    ></div>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-green-300 rounded-full mr-3"></div>
                  <span className="text-sm font-medium text-gray-700">Packages</span>
                </div>
                <div className="text-right">
                  <span className="text-sm font-bold text-gray-900">${revenue.packages.toFixed(2)}</span>
                  <div className="w-32 bg-gray-200 rounded-full h-2 mt-1">
                    <div 
                      className="bg-green-300 h-2 rounded-full" 
                      style={{ width: `${revenue.total > 0 ? (revenue.packages / revenue.total) * 100 : 0}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Performance Metrics */}
          <div className="bg-white shadow rounded-lg p-6">
            <h4 className="text-lg font-medium text-gray-900 mb-4">Performance Metrics</h4>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Consultation Success Rate</span>
                <span className="text-sm font-bold text-green-600">
                  {appointments.length > 0 ? Math.round((appointments.filter(apt => apt.status === 'completed').length / appointments.length) * 100) : 0}%
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Average Service Price</span>
                <span className="text-sm font-bold text-gray-900">
                  ${listings.length > 0 ? (listings.reduce((sum, l) => sum + parseFloat(l.price_from || 0), 0) / listings.length).toFixed(2) : '0.00'}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">This Month Appointments</span>
                <span className="text-sm font-bold text-green-600">{thisMonthAppointments.length}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Active Listings</span>
                <span className="text-sm font-bold text-gray-900">{listings.filter(l => l.active).length}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Patient Rating</span>
                <span className="text-sm font-bold text-yellow-600">
                  {stats.averageRating > 0 ? `${stats.averageRating} ⭐` : 'No ratings yet'}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Recent Transactions */}
        <div className="bg-white shadow rounded-lg p-6">
          <h4 className="text-lg font-medium text-gray-900 mb-4">Recent Transactions</h4>
          {appointments.filter(apt => apt.status === 'completed').length > 0 ? (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Service</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Patient</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Earnings</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {appointments.filter(apt => apt.status === 'completed').slice(0, 5).map((appointment) => {
                    const estimatedPrice = 150; // Average vet consultation price
                    const earnings = (estimatedPrice * 0.85).toFixed(2); // 15% platform fee
                    
                    return (
                      <tr key={appointment.id}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {appointment.consultation_type || 'Veterinary Consultation'}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {appointment.pet_profiles?.name || 'Patient'}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {new Date(appointment.created_at).toLocaleDateString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600">
                          ${earnings}
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="text-center py-8">
              <span className="text-4xl mb-4 block">💸</span>
              <h3 className="text-lg font-medium text-gray-900 mb-2">No completed transactions yet</h3>
              <p className="text-gray-500">
                Once you complete consultations, your earnings will appear here.
              </p>
            </div>
          )}
        </div>

        {/* Earning Tips */}
        <div className="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6">
          <h4 className="text-lg font-medium text-gray-900 mb-3">Tips to Increase Earnings</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-start space-x-3">
              <span className="text-green-500 mt-1">📈</span>
              <div>
                <h5 className="font-medium text-gray-900">Offer Specialized Services</h5>
                <p className="text-sm text-gray-600">Provide specialized veterinary services for higher-value consultations</p>
              </div>
            </div>
            <div className="flex items-start space-x-3">
              <span className="text-green-500 mt-1">⭐</span>
              <div>
                <h5 className="font-medium text-gray-900">Maintain High Ratings</h5>
                <p className="text-sm text-gray-600">Better ratings lead to more bookings and higher consultation fees</p>
              </div>
            </div>
            <div className="flex items-start space-x-3">
              <span className="text-green-500 mt-1">🛍️</span>
              <div>
                <h5 className="font-medium text-gray-900">Recommend Products</h5>
                <p className="text-sm text-gray-600">Recommend veterinary products for additional income</p>
              </div>
            </div>
            <div className="flex items-start space-x-3">
              <span className="text-green-500 mt-1">📅</span>
              <div>
                <h5 className="font-medium text-gray-900">Increase Availability</h5>
                <p className="text-sm text-gray-600">More availability means more consultation opportunities</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Main render function
  const renderActiveSection = () => {
    switch (activeSection) {
      case 'overview':
        return renderOverviewSection();
      case 'patients':
        return renderPatientsSection();
      case 'appointments':
        return renderAppointmentsSection();
      case 'diagnoses':
        return renderDiagnosesSection();
      case 'prescriptions':
        return renderPrescriptionsSection();
      case 'triage':
        return renderTriageSection();
      case 'marketplace':
        return renderMarketplaceSection();
      case 'analytics':
        return renderAnalyticsSection();
      case 'profile':
        return renderProfileSection();
      default:
        return renderOverviewSection();
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading veterinarian dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <ErrorBoundary>
      <div className="min-h-screen bg-gray-50">
        <div className="flex flex-col lg:flex-row">
          {/* Mobile Header */}
          <div className="lg:hidden bg-white border-b border-gray-200 px-4 py-3">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="font-semibold text-gray-900">Vet Dashboard</h2>
                <p className="text-xs text-gray-500">Veterinarian Portal</p>
              </div>
              <button
                onClick={() => setShowAvailabilityModal(true)}
                className="px-3 py-1.5 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors text-sm"
              >
                Schedule
              </button>
            </div>
          </div>

          {/* Mobile Navigation */}
          <div className="lg:hidden bg-white border-b border-gray-200 px-2 py-2">
            <div className="flex overflow-x-auto space-x-1 pb-2">
              {navigationSections.map((section) => (
                <button
                  key={section.id}
                  onClick={() => setActiveSection(section.id)}
                  className={`flex-shrink-0 flex items-center px-3 py-2 text-xs font-medium rounded-md transition-colors whitespace-nowrap ${
                    activeSection === section.id
                      ? 'bg-green-100 text-green-700'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                  }`}
                >
                  <span className="mr-1.5">{section.icon}</span>
                  {section.name}
                </button>
              ))}
            </div>
          </div>

          {/* Desktop Sidebar */}
          <div className="hidden lg:block w-64 bg-white shadow-sm border-r border-gray-200 min-h-screen">
            <div className="p-6">
              <div className="flex items-center mb-6">
                <div>
                  <h2 className="font-semibold text-gray-900">Vet Dashboard</h2>
                  <p className="text-xs text-gray-500">Veterinarian Portal</p>
                </div>
              </div>

              {/* Navigation */}
              <nav className="space-y-2">
                {navigationSections.map((section) => (
                  <button
                    key={section.id}
                    onClick={() => setActiveSection(section.id)}
                    className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                      activeSection === section.id
                        ? 'bg-green-100 text-green-700'
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                    }`}
                  >
                    <span className="mr-3">{section.icon}</span>
                    {section.name}
                  </button>
                ))}
              </nav>
            </div>
          </div>

          {/* Main Content */}
          <div className="flex-1 p-3 sm:p-4 lg:p-6">
            {renderActiveSection()}
          </div>
        </div>

        {/* Modals */}
        {showAvailabilityModal && (
          <ProviderAvailability
            isOpen={showAvailabilityModal}
            onClose={() => setShowAvailabilityModal(false)}
            providerData={providerData}
          />
        )}
        
        {showCreateServiceModal && (
          <ServiceCreateForm
            onClose={() => setShowCreateServiceModal(false)}
          />
        )}
        
        {showEditServiceModal && editingService && (
          <ServiceEditForm
            service={editingService}
            onClose={() => {
              setShowEditServiceModal(false);
              setEditingService(null);
            }}
          />
        )}
        
        {/* Add Product Modal */}
        {showAddProductModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold">
                  {editingProduct ? 'Edit Product' : 'Add Product'}
                </h2>
                <button
                  onClick={() => {
                    setShowAddProductModal(false);
                    setEditingProduct(null);
                    setProductForm({
                      name: '',
                      description: '',
                      price: '',
                      category: 'Accessories',
                      brand: '',
                      stockQuantity: '',
                      photos: [],
                      specifications: ''
                    });
                  }}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <form onSubmit={(e) => { e.preventDefault(); handleAddProduct(); }} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Product Name *
                    </label>
                    <input
                      type="text"
                      value={productForm.name}
                      onChange={(e) => setProductForm({...productForm, name: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., Premium Dog Food"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Brand
                    </label>
                    <input
                      type="text"
                      value={productForm.brand}
                      onChange={(e) => setProductForm({...productForm, brand: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="e.g., Royal Canin"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description
                  </label>
                  <textarea
                    value={productForm.description}
                    onChange={(e) => setProductForm({...productForm, description: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    rows="3"
                    placeholder="Describe the product, its benefits, and usage instructions..."
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Price ($) *
                    </label>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={productForm.price}
                      onChange={(e) => setProductForm({...productForm, price: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="0.00"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Category *
                    </label>
                    <select
                      value={productForm.category}
                      onChange={(e) => setProductForm({...productForm, category: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      required
                    >
                      <option value="Accessories">Accessories</option>
                      <option value="Supplements">Supplements</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Stock Quantity *
                    </label>
                    <input
                      type="number"
                      min="0"
                      value={productForm.stockQuantity}
                      onChange={(e) => setProductForm({...productForm, stockQuantity: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="0"
                      required
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Product Photos (up to 4)
                  </label>
                  
                  {/* Photo Upload Area */}
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 transition-colors">
                    <input
                      type="file"
                      id="photo-upload"
                      multiple
                      accept="image/*"
                      onChange={handlePhotoUpload}
                      className="hidden"
                      disabled={productForm.photos.length >= 4}
                    />
                    <label 
                      htmlFor="photo-upload" 
                      className={`cursor-pointer ${productForm.photos.length >= 4 ? 'cursor-not-allowed opacity-50' : ''}`}
                    >
                      <div className="space-y-2">
                        <svg className="mx-auto h-8 w-8 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                          <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                        </svg>
                        <div className="text-sm text-gray-600">
                          <span className="font-medium text-blue-600 hover:text-blue-500">
                            Click to upload photos
                          </span>
                          <span> or drag and drop</span>
                        </div>
                        <p className="text-xs text-gray-500">PNG, JPG, GIF up to 10MB each</p>
                        <p className="text-xs text-gray-500">
                          {productForm.photos.length}/4 photos uploaded
                        </p>
                      </div>
                    </label>
                  </div>

                  {/* Photo Preview Grid */}
                  {productForm.photos.length > 0 && (
                    <div className="mt-4 grid grid-cols-2 md:grid-cols-4 gap-3">
                      {productForm.photos.map((photo, index) => (
                        <div key={photo.id} className="relative group">
                          <img
                            src={photo.url}
                            alt={`Product photo ${index + 1}`}
                            className="w-full h-20 object-cover rounded-lg border border-gray-200"
                          />
                          <button
                            type="button"
                            onClick={() => removePhoto(photo.id)}
                            className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600 opacity-0 group-hover:opacity-100 transition-opacity"
                          >
                            ×
                          </button>
                          {index === 0 && (
                            <div className="absolute bottom-1 left-1 bg-blue-500 text-white text-xs px-1 py-0.5 rounded">
                              Main
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Specifications
                  </label>
                  <textarea
                    value={productForm.specifications}
                    onChange={(e) => setProductForm({...productForm, specifications: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    rows="3"
                    placeholder="Size, weight, ingredients, dosage instructions, etc..."
                  />
                </div>

                <div className="flex justify-end space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={() => {
                      setShowAddProductModal(false);
                      setEditingProduct(null);
                      setProductForm({
                         name: '',
                         description: '',
                         price: '',
                         category: 'Accessories',
                         brand: '',
                         stockQuantity: '',
                         photos: [],
                         specifications: ''
                       });
                    }}
                    className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                  >
                    {editingProduct ? 'Update Product' : 'Add Product'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
        
        {/* Pay-Per-Listing Modal */}
        {showPayPerListingModal && payPerListingType && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl max-w-md w-full">
              <div className="p-6 border-b border-gray-200">
                <div className="flex justify-between items-center">
                  <h2 className="text-xl font-bold text-gray-900">
                    Add More {payPerListingType === 'service' ? 'Services' : payPerListingType === 'product' ? 'Products' : 'Packages'}
                  </h2>
                  <button 
                    onClick={() => setShowPayPerListingModal(false)} 
                    className="text-gray-400 hover:text-gray-600 text-2xl"
                  >
                    ×
                  </button>
                </div>
              </div>

              <div className="p-6">
                <div className="text-center mb-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">
                    Expand Your {payPerListingType === 'service' ? 'Services' : payPerListingType === 'product' ? 'Products' : 'Packages'}
                  </h3>
                  <p className="text-gray-600 text-sm">
                    You have {payPerListingType === 'service' ? 
                      `${getServicesOnly(listings).length}/${FREE_SERVICE_LIMIT} services` :
                      payPerListingType === 'product' ? 
                      `${products.length}/${FREE_PRODUCT_LIMIT} products` :
                      `${packages.length}/${FREE_PACKAGE_LIMIT} packages`
                    }. Add more to grow your business!
                  </p>
                </div>

                {/* Billing Period Toggle */}
                <div className="flex items-center justify-center mb-6">
                  <div className="bg-gray-100 p-1 rounded-lg flex">
                    <button
                      onClick={() => setBillingPeriod('monthly')}
                      className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                        billingPeriod === 'monthly'
                          ? 'bg-white text-gray-900 shadow-sm'
                          : 'text-gray-600 hover:text-gray-900'
                      }`}
                    >
                      Monthly
                    </button>
                    <button
                      onClick={() => setBillingPeriod('yearly')}
                      className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                        billingPeriod === 'yearly'
                          ? 'bg-white text-gray-900 shadow-sm'
                          : 'text-gray-600 hover:text-gray-900'
                      }`}
                    >
                      Yearly
                      <span className="ml-1 text-xs text-green-600 font-semibold">SAVE 17%</span>
                    </button>
                  </div>
                </div>

                {/* Pricing Options */}
                <div className="space-y-3 mb-6">
                  {/* Individual Option */}
                  <button 
                    onClick={() => {
                      // TODO: Implement payment processing
                      showSuccess(`Payment integration coming soon! Contact support to add ${billingPeriod} billing for 1 ${payPerListingType} listing.`, 5000);
                      setShowPayPerListingModal(false);
                    }}
                    className="w-full border border-gray-200 rounded-lg p-4 hover:border-green-300 hover:bg-gray-50 transition-colors text-left"
                  >
                    <div className="flex justify-between items-center">
                      <div>
                        <p className="font-medium text-gray-900">
                          1 {payPerListingType === 'service' ? 'Service' : payPerListingType === 'product' ? 'Product' : 'Package'}
                        </p>
                      </div>
                      <div className="text-right">
                        <p className="text-xl font-bold text-gray-900">
                           ${getIndividualPrice(payPerListingType)}
                         </p>
                         <p className="text-xs text-gray-500">
                           ${billingPeriod === 'yearly' ? (getIndividualPrice(payPerListingType) / 12).toFixed(2) + '/month' : getIndividualPrice(payPerListingType) + '/month'}
                           {billingPeriod === 'yearly' && <span className="text-green-600 ml-1">(billed yearly)</span>}
                         </p>
                      </div>
                    </div>
                  </button>

                  {/* 3-Pack Option */}
                  <button 
                    onClick={() => {
                      // TODO: Implement payment processing
                      showSuccess(`Payment integration coming soon! Contact support to add ${billingPeriod} billing for 3 ${payPerListingType} listings.`, 5000);
                      setShowPayPerListingModal(false);
                    }}
                    className="w-full border-2 border-green-200 rounded-lg p-4 bg-green-50 hover:bg-green-100 transition-colors text-left relative"
                  >
                    <div className="absolute -top-2 left-4">
                      <span className="bg-green-500 text-white px-2 py-1 rounded text-xs font-medium">
                        POPULAR
                      </span>
                    </div>
                    <div className="flex justify-between items-center">
                      <div>
                        <p className="font-medium text-gray-900">
                          3 {payPerListingType === 'service' ? 'Services' : payPerListingType === 'product' ? 'Products' : 'Packages'}
                        </p>
                        <p className="text-sm text-green-700">Save money</p>
                      </div>
                      <div className="text-right">
                        <p className="text-xl font-bold text-green-600">
                           ${get3PackPrice(payPerListingType)}
                        </p>
                        <p className="text-xs text-green-600">
                           ${billingPeriod === 'yearly' ? (get3PackPrice(payPerListingType) / 12 / 3).toFixed(2) + '/month each' : (get3PackPrice(payPerListingType) / 3).toFixed(2) + '/month each'}
                           {billingPeriod === 'yearly' && <span className="ml-1">(billed yearly)</span>}
                        </p>
                      </div>
                    </div>
                  </button>

                  {/* 5-Pack Option */}
                  <button 
                    onClick={() => {
                      // TODO: Implement payment processing
                      showSuccess(`Payment integration coming soon! Contact support to add ${billingPeriod} billing for 5 ${payPerListingType} listings.`, 5000);
                      setShowPayPerListingModal(false);
                    }}
                    className="w-full border-2 border-blue-200 rounded-lg p-4 bg-blue-50 hover:bg-blue-100 transition-colors text-left relative"
                  >
                    <div className="absolute -top-2 left-4">
                      <span className="bg-blue-500 text-white px-2 py-1 rounded text-xs font-medium">
                        BEST VALUE
                      </span>
                    </div>
                    <div className="flex justify-between items-center">
                      <div>
                        <p className="font-medium text-gray-900">
                          5 {payPerListingType === 'service' ? 'Services' : payPerListingType === 'product' ? 'Products' : 'Packages'}
                        </p>
                        <p className="text-sm text-blue-700">Best value</p>
                      </div>
                      <div className="text-right">
                        <p className="text-xl font-bold text-blue-600">
                           ${get5PackPrice(payPerListingType)}
                        </p>
                        <p className="text-xs text-blue-600">
                           ${billingPeriod === 'yearly' ? (get5PackPrice(payPerListingType) / 12 / 5).toFixed(2) + '/month each' : (get5PackPrice(payPerListingType) / 5).toFixed(2) + '/month each'}
                           {billingPeriod === 'yearly' && <span className="ml-1">(billed yearly)</span>}
                        </p>
                      </div>
                    </div>
                  </button>
                </div>

                <div className="mb-6">
                  <h4 className="font-medium text-gray-900 mb-3">What you get:</h4>
                  <ul className="space-y-2 text-sm text-gray-600">
                    <li className="flex items-center">
                      <svg className="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      Active {payPerListingType === 'service' ? 'service listing' : payPerListingType === 'product' ? 'product listing' : 'service package listing'}{billingPeriod === 'yearly' ? 's' : ''} while subscribed
                    </li>
                    <li className="flex items-center">
                      <svg className="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      Full marketplace visibility
                    </li>
                    <li className="flex items-center">
                      <svg className="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      Same commission rates ({payPerListingType === 'service' ? SERVICE_COMMISSION_RATE * 100 : PRODUCT_COMMISSION_RATE * 100}%)
                    </li>
                    <li className="flex items-center">
                      <svg className="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      {billingPeriod === 'yearly' ? 'Save 17% with yearly billing' : 'Flexible monthly billing'}
                    </li>
                    <li className="flex items-center">
                      <svg className="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      Cancel anytime
                    </li>
                  </ul>
                </div>

                {/* Cancel Button */}
                <div className="text-center">
                  <button
                    onClick={() => setShowPayPerListingModal(false)}
                    className="text-gray-500 hover:text-gray-700 transition-colors text-sm underline"
                  >
                    Maybe Later
                  </button>
                </div>

                <p className="text-xs text-gray-500 text-center mt-4">
                  Secure payment processing • {billingPeriod === 'yearly' ? 'Yearly billing (save 17%)' : 'Monthly billing'} • Cancel anytime
                </p>
              </div>
            </div>
          </div>
        )}
      </div>
    </ErrorBoundary>
  );
};

export default VetDashboard;