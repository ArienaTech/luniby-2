{"ast":null,"code":"/**\n * Transport-scoped session data storage (only for transports with sessionId)\n * @internal Maps transport instances to session-level data\n */\nconst transportToSessionData = new WeakMap();\n\n/**\n * Stores session data for a transport with sessionId\n * @param transport - MCP transport instance\n * @param sessionData - Session data to store\n */\nfunction storeSessionDataForTransport(transport, sessionData) {\n  if (transport.sessionId) transportToSessionData.set(transport, sessionData);\n}\n\n/**\n * Updates session data for a transport with sessionId (merges with existing data)\n * @param transport - MCP transport instance\n * @param partialSessionData - Partial session data to merge with existing data\n */\nfunction updateSessionDataForTransport(transport, partialSessionData) {\n  if (transport.sessionId) {\n    const existingData = transportToSessionData.get(transport) || {};\n    transportToSessionData.set(transport, {\n      ...existingData,\n      ...partialSessionData\n    });\n  }\n}\n\n/**\n * Retrieves client information for a transport\n * @param transport - MCP transport instance\n * @returns Client information if available\n */\nfunction getClientInfoForTransport(transport) {\n  return transportToSessionData.get(transport)?.clientInfo;\n}\n\n/**\n * Retrieves protocol version for a transport\n * @param transport - MCP transport instance\n * @returns Protocol version if available\n */\nfunction getProtocolVersionForTransport(transport) {\n  return transportToSessionData.get(transport)?.protocolVersion;\n}\n\n/**\n * Retrieves full session data for a transport\n * @param transport - MCP transport instance\n * @returns Complete session data if available\n */\nfunction getSessionDataForTransport(transport) {\n  return transportToSessionData.get(transport);\n}\n\n/**\n * Cleans up session data for a specific transport (when that transport closes)\n * @param transport - MCP transport instance\n */\nfunction cleanupSessionDataForTransport(transport) {\n  transportToSessionData.delete(transport);\n}\nexport { cleanupSessionDataForTransport, getClientInfoForTransport, getProtocolVersionForTransport, getSessionDataForTransport, storeSessionDataForTransport, updateSessionDataForTransport };","map":{"version":3,"names":["transportToSessionData","WeakMap","storeSessionDataForTransport","transport","sessionData","sessionId","set","updateSessionDataForTransport","partialSessionData","existingData","get","getClientInfoForTransport","clientInfo","getProtocolVersionForTransport","protocolVersion","getSessionDataForTransport","cleanupSessionDataForTransport","delete"],"sources":["/workspace/node_modules/@sentry/core/src/integrations/mcp-server/sessionManagement.ts"],"sourcesContent":["/**\n * Session data management for MCP server instrumentation\n */\n\nimport type { MCPTransport, PartyInfo, SessionData } from './types';\n\n/**\n * Transport-scoped session data storage (only for transports with sessionId)\n * @internal Maps transport instances to session-level data\n */\nconst transportToSessionData = new WeakMap<MCPTransport, SessionData>();\n\n/**\n * Stores session data for a transport with sessionId\n * @param transport - MCP transport instance\n * @param sessionData - Session data to store\n */\nexport function storeSessionDataForTransport(transport: MCPTransport, sessionData: SessionData): void {\n  if (transport.sessionId) transportToSessionData.set(transport, sessionData);\n}\n\n/**\n * Updates session data for a transport with sessionId (merges with existing data)\n * @param transport - MCP transport instance\n * @param partialSessionData - Partial session data to merge with existing data\n */\nexport function updateSessionDataForTransport(transport: MCPTransport, partialSessionData: Partial<SessionData>): void {\n  if (transport.sessionId) {\n    const existingData = transportToSessionData.get(transport) || {};\n    transportToSessionData.set(transport, { ...existingData, ...partialSessionData });\n  }\n}\n\n/**\n * Retrieves client information for a transport\n * @param transport - MCP transport instance\n * @returns Client information if available\n */\nexport function getClientInfoForTransport(transport: MCPTransport): PartyInfo | undefined {\n  return transportToSessionData.get(transport)?.clientInfo;\n}\n\n/**\n * Retrieves protocol version for a transport\n * @param transport - MCP transport instance\n * @returns Protocol version if available\n */\nexport function getProtocolVersionForTransport(transport: MCPTransport): string | undefined {\n  return transportToSessionData.get(transport)?.protocolVersion;\n}\n\n/**\n * Retrieves full session data for a transport\n * @param transport - MCP transport instance\n * @returns Complete session data if available\n */\nexport function getSessionDataForTransport(transport: MCPTransport): SessionData | undefined {\n  return transportToSessionData.get(transport);\n}\n\n/**\n * Cleans up session data for a specific transport (when that transport closes)\n * @param transport - MCP transport instance\n */\nexport function cleanupSessionDataForTransport(transport: MCPTransport): void {\n  transportToSessionData.delete(transport);\n}\n"],"mappings":"AAMA;AACA;AACA;AACA;AACA,MAAMA,sBAAA,GAAyB,IAAIC,OAAO,EAA6B;;AAEvE;AACA;AACA;AACA;AACA;AACO,SAASC,4BAA4BA,CAACC,SAAS,EAAgBC,WAAW,EAAqB;EACpG,IAAID,SAAS,CAACE,SAAS,EAAEL,sBAAsB,CAACM,GAAG,CAACH,SAAS,EAAEC,WAAW,CAAC;AAC7E;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASG,6BAA6BA,CAACJ,SAAS,EAAgBK,kBAAkB,EAA8B;EACrH,IAAIL,SAAS,CAACE,SAAS,EAAE;IACvB,MAAMI,YAAA,GAAeT,sBAAsB,CAACU,GAAG,CAACP,SAAS,KAAK,EAAE;IAChEH,sBAAsB,CAACM,GAAG,CAACH,SAAS,EAAE;MAAE,GAAGM,YAAY;MAAE,GAAGD;IAAA,CAAoB,CAAC;EACrF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASG,yBAAyBA,CAACR,SAAS,EAAuC;EACxF,OAAOH,sBAAsB,CAACU,GAAG,CAACP,SAAS,CAAC,EAAES,UAAU;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASC,8BAA8BA,CAACV,SAAS,EAAoC;EAC1F,OAAOH,sBAAsB,CAACU,GAAG,CAACP,SAAS,CAAC,EAAEW,eAAe;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASC,0BAA0BA,CAACZ,SAAS,EAAyC;EAC3F,OAAOH,sBAAsB,CAACU,GAAG,CAACP,SAAS,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACO,SAASa,8BAA8BA,CAACb,SAAS,EAAsB;EAC5EH,sBAAsB,CAACiB,MAAM,CAACd,SAAS,CAAC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}