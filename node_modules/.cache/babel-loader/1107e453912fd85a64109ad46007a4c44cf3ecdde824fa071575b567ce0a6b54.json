{"ast":null,"code":"import { DEBUG_BUILD } from '../debug-build.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE } from '../semanticAttributes.js';\nimport { debug } from '../utils/debug-logger.js';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils.js';\n\n/**\n * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span\n * as the 4th parameter.\n */\nfunction setMeasurement(name, value, unit) {\n  let activeSpan = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : getActiveSpan();\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n  if (rootSpan) {\n    DEBUG_BUILD && debug.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);\n    rootSpan.addEvent(name, {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nfunction timedEventsToMeasurements(events) {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n  const measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT];\n    const value = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE];\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = {\n        value,\n        unit\n      };\n    }\n  });\n  return measurements;\n}\nexport { setMeasurement, timedEventsToMeasurements };","map":{"version":3,"names":["setMeasurement","name","value","unit","activeSpan","arguments","length","undefined","getActiveSpan","rootSpan","getRootSpan","DEBUG_BUILD","debug","log","addEvent","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT","timedEventsToMeasurements","events","measurements","forEach","event","attributes"],"sources":["/workspace/node_modules/@sentry/core/src/tracing/measurement.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n} from '../semanticAttributes';\nimport type { Measurements, MeasurementUnit } from '../types-hoist/measurement';\nimport type { TimedEvent } from '../types-hoist/timedEvent';\nimport { debug } from '../utils/debug-logger';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils';\n\n/**\n * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span\n * as the 4th parameter.\n */\nexport function setMeasurement(name: string, value: number, unit: MeasurementUnit, activeSpan = getActiveSpan()): void {\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n\n  if (rootSpan) {\n    DEBUG_BUILD && debug.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);\n    rootSpan.addEvent(name, {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit as string,\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nexport function timedEventsToMeasurements(events: TimedEvent[]): Measurements | undefined {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n\n  const measurements: Measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT] as MeasurementUnit | undefined;\n    const value = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE] as number | undefined;\n\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = { value, unit };\n    }\n  });\n\n  return measurements;\n}\n"],"mappings":";;;;;AAUA;AACA;AACA;AACA;AACO,SAASA,cAAcA,CAACC,IAAI,EAAUC,KAAK,EAAUC,IAAI,EAAuD;EAAA,IAApCC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAaG,aAAa,EAAE;EAC7G,MAAMC,QAAA,GAAWL,UAAA,IAAcM,WAAW,CAACN,UAAU,CAAC;EAEtD,IAAIK,QAAQ,EAAE;IACZE,WAAA,IAAeC,KAAK,CAACC,GAAG,CAAC,mDAAmDZ,IAAI,MAAMC,KAAK,IAAIC,IAAI,EAAC;IACAM,QAAA,CAAAK,QAAA,CAAAb,IAAA;MACA,CAAAc,2CAAA,GAAAb,KAAA;MACA,CAAAc,0CAAA,GAAAb;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA,SAAAc,0BAAAC,MAAA;EACA,KAAAA,MAAA,IAAAA,MAAA,CAAAZ,MAAA;IACA,OAAAC,SAAA;EACA;EAEA,MAAAY,YAAA;EACAD,MAAA,CAAAE,OAAA,CAAAC,KAAA;IACA,MAAAC,UAAA,GAAAD,KAAA,CAAAC,UAAA;IACA,MAAAnB,IAAA,GAAAmB,UAAA,CAAAN,0CAAA;IACA,MAAAd,KAAA,GAAAoB,UAAA,CAAAP,2CAAA;IAEA,WAAAZ,IAAA,wBAAAD,KAAA;MACAiB,YAAA,CAAAE,KAAA,CAAApB,IAAA;QAAAC,KAAA;QAAAC;MAAA;IACA;EACA;EAEA,OAAAgB,YAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}