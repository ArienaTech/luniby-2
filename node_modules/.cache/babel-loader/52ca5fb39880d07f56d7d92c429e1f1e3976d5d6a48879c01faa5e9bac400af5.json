{"ast":null,"code":"import { getClient } from '../../currentScopes.js';\nimport { captureException } from '../../exports.js';\nimport { getActiveSpan } from '../../utils/spanUtils.js';\nimport { SPAN_STATUS_ERROR } from '../../tracing/spanstatus.js';\n\n/**\n * Safe error capture utilities for MCP server instrumentation\n *\n * Ensures error reporting never interferes with MCP server operation.\n * All capture operations are wrapped in try-catch to prevent side effects.\n */\n\n/**\n * Captures an error without affecting MCP server operation.\n *\n * The active span already contains all MCP context (method, tool, arguments, etc.)\n * @param error - Error to capture\n * @param errorType - Classification of error type for filtering\n * @param extraData - Additional context data to include\n */\nfunction captureError(error, errorType, extraData) {\n  try {\n    const client = getClient();\n    if (!client) {\n      return;\n    }\n    const activeSpan = getActiveSpan();\n    if (activeSpan?.isRecording()) {\n      activeSpan.setStatus({\n        code: SPAN_STATUS_ERROR,\n        message: 'internal_error'\n      });\n    }\n    captureException(error, {\n      mechanism: {\n        type: 'mcp_server',\n        handled: false,\n        data: {\n          error_type: errorType || 'handler_execution',\n          ...extraData\n        }\n      }\n    });\n  } catch {\n    // noop\n  }\n}\nexport { captureError };","map":{"version":3,"names":["captureError","error","errorType","extraData","client","getClient","activeSpan","getActiveSpan","isRecording","setStatus","code","SPAN_STATUS_ERROR","message","captureException","mechanism","type","handled","data","error_type"],"sources":["/workspace/node_modules/@sentry/core/src/integrations/mcp-server/errorCapture.ts"],"sourcesContent":["/**\n * Safe error capture utilities for MCP server instrumentation\n *\n * Ensures error reporting never interferes with MCP server operation.\n * All capture operations are wrapped in try-catch to prevent side effects.\n */\n\nimport { getClient } from '../../currentScopes';\nimport { captureException } from '../../exports';\nimport { SPAN_STATUS_ERROR } from '../../tracing';\nimport { getActiveSpan } from '../../utils/spanUtils';\nimport type { McpErrorType } from './types';\n\n/**\n * Captures an error without affecting MCP server operation.\n *\n * The active span already contains all MCP context (method, tool, arguments, etc.)\n * @param error - Error to capture\n * @param errorType - Classification of error type for filtering\n * @param extraData - Additional context data to include\n */\nexport function captureError(error: Error, errorType?: McpErrorType, extraData?: Record<string, unknown>): void {\n  try {\n    const client = getClient();\n    if (!client) {\n      return;\n    }\n\n    const activeSpan = getActiveSpan();\n    if (activeSpan?.isRecording()) {\n      activeSpan.setStatus({\n        code: SPAN_STATUS_ERROR,\n        message: 'internal_error',\n      });\n    }\n\n    captureException(error, {\n      mechanism: {\n        type: 'mcp_server',\n        handled: false,\n        data: {\n          error_type: errorType || 'handler_execution',\n          ...extraData,\n        },\n      },\n    });\n  } catch {\n    // noop\n  }\n}\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,YAAYA,CAACC,KAAK,EAASC,SAAS,EAAiBC,SAAS,EAAkC;EAC9G,IAAI;IACF,MAAMC,MAAA,GAASC,SAAS,EAAE;IAC1B,IAAI,CAACD,MAAM,EAAE;MACX;IACN;IAEI,MAAME,UAAA,GAAaC,aAAa,EAAE;IAClC,IAAID,UAAU,EAAEE,WAAW,EAAE,EAAE;MAC7BF,UAAU,CAACG,SAAS,CAAC;QACnBC,IAAI,EAAEC,iBAAiB;QACvBC,OAAO,EAAE;MACjB,CAAO,CAAC;IACR;IAEIC,gBAAgB,CAACZ,KAAK,EAAE;MACtBa,SAAS,EAAE;QACTC,IAAI,EAAE,YAAY;QAClBC,OAAO,EAAE,KAAK;QACdC,IAAI,EAAE;UACJC,UAAU,EAAEhB,SAAA,IAAa,mBAAmB;UAC5C,GAAGC;QACb;MACA;IACA,CAAK,CAAC;EACN,EAAI,MAAM;IACV;EAAA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}