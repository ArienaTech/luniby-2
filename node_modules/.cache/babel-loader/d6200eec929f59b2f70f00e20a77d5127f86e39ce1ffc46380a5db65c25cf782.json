{"ast":null,"code":"// Email service for sending notifications\nexport const emailService={// Send welcome email\nasync sendWelcomeEmail(email,name){try{// In production, this would call your backend API to send email\nconsole.log(`Sending welcome email to ${email} for ${name}`);return{success:true,message:'Welcome email sent successfully'};}catch(error){console.error('Error sending welcome email:',error);return{success:false,error:error.message||'Failed to send welcome email'};}},// Send verification email\nasync sendVerificationEmail(email,verificationLink){try{console.log(`Sending verification email to ${email}`);return{success:true,message:'Verification email sent successfully'};}catch(error){console.error('Error sending verification email:',error);return{success:false,error:error.message||'Failed to send verification email'};}},// Send password reset email\nasync sendPasswordResetEmail(email,resetLink){try{console.log(`Sending password reset email to ${email}`);return{success:true,message:'Password reset email sent successfully'};}catch(error){console.error('Error sending password reset email:',error);return{success:false,error:error.message||'Failed to send password reset email'};}},// Send notification email\nasync sendNotificationEmail(email,subject,message){try{console.log(`Sending notification email to ${email}: ${subject}`);return{success:true,message:'Notification email sent successfully'};}catch(error){console.error('Error sending notification email:',error);return{success:false,error:error.message||'Failed to send notification email'};}},// Send triage result email\nasync sendTriageResultEmail(email,triageData){try{console.log(`Sending triage result email to ${email}`);return{success:true,message:'Triage result email sent successfully'};}catch(error){console.error('Error sending triage result email:',error);return{success:false,error:error.message||'Failed to send triage result email'};}},// Send appointment confirmation email\nasync sendAppointmentConfirmationEmail(email,appointmentData){try{console.log(`Sending appointment confirmation email to ${email}`);return{success:true,message:'Appointment confirmation email sent successfully'};}catch(error){console.error('Error sending appointment confirmation email:',error);return{success:false,error:error.message||'Failed to send appointment confirmation email'};}}};export default emailService;","map":{"version":3,"names":["emailService","sendWelcomeEmail","email","name","console","log","success","message","error","sendVerificationEmail","verificationLink","sendPasswordResetEmail","resetLink","sendNotificationEmail","subject","sendTriageResultEmail","triageData","sendAppointmentConfirmationEmail","appointmentData"],"sources":["/workspace/src/lib/email-service.js"],"sourcesContent":["// Email service for sending notifications\nexport const emailService = {\n  // Send welcome email\n  async sendWelcomeEmail(email, name) {\n    try {\n      // In production, this would call your backend API to send email\n      console.log(`Sending welcome email to ${email} for ${name}`);\n      return {\n        success: true,\n        message: 'Welcome email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending welcome email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send welcome email'\n      };\n    }\n  },\n\n  // Send verification email\n  async sendVerificationEmail(email, verificationLink) {\n    try {\n      console.log(`Sending verification email to ${email}`);\n      return {\n        success: true,\n        message: 'Verification email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending verification email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send verification email'\n      };\n    }\n  },\n\n  // Send password reset email\n  async sendPasswordResetEmail(email, resetLink) {\n    try {\n      console.log(`Sending password reset email to ${email}`);\n      return {\n        success: true,\n        message: 'Password reset email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending password reset email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send password reset email'\n      };\n    }\n  },\n\n  // Send notification email\n  async sendNotificationEmail(email, subject, message) {\n    try {\n      console.log(`Sending notification email to ${email}: ${subject}`);\n      return {\n        success: true,\n        message: 'Notification email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending notification email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send notification email'\n      };\n    }\n  },\n\n  // Send triage result email\n  async sendTriageResultEmail(email, triageData) {\n    try {\n      console.log(`Sending triage result email to ${email}`);\n      return {\n        success: true,\n        message: 'Triage result email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending triage result email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send triage result email'\n      };\n    }\n  },\n\n  // Send appointment confirmation email\n  async sendAppointmentConfirmationEmail(email, appointmentData) {\n    try {\n      console.log(`Sending appointment confirmation email to ${email}`);\n      return {\n        success: true,\n        message: 'Appointment confirmation email sent successfully'\n      };\n    } catch (error) {\n      console.error('Error sending appointment confirmation email:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send appointment confirmation email'\n      };\n    }\n  }\n};\n\nexport default emailService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}