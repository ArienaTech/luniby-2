{"ast":null,"code":"import { MCP_REQUEST_ARGUMENT, CLIENT_ADDRESS_ATTRIBUTE, CLIENT_PORT_ATTRIBUTE, MCP_LOGGING_MESSAGE_ATTRIBUTE, MCP_RESOURCE_URI_ATTRIBUTE, MCP_TOOL_RESULT_CONTENT_ATTRIBUTE } from './attributes.js';\n\n/**\n * PII attributes that should be removed when sendDefaultPii is false\n * @internal\n */\nconst PII_ATTRIBUTES = new Set([CLIENT_ADDRESS_ATTRIBUTE, CLIENT_PORT_ATTRIBUTE, MCP_LOGGING_MESSAGE_ATTRIBUTE, MCP_RESOURCE_URI_ATTRIBUTE, MCP_TOOL_RESULT_CONTENT_ATTRIBUTE]);\n\n/**\n * Checks if an attribute key should be considered PII\n * @internal\n */\nfunction isPiiAttribute(key) {\n  return PII_ATTRIBUTES.has(key) || key.startsWith(`${MCP_REQUEST_ARGUMENT}.`);\n}\n\n/**\n * Removes PII attributes from span data when sendDefaultPii is false\n * @param spanData - Raw span attributes\n * @param sendDefaultPii - Whether to include PII data\n * @returns Filtered span attributes\n */\nfunction filterMcpPiiFromSpanData(spanData, sendDefaultPii) {\n  if (sendDefaultPii) {\n    return spanData;\n  }\n  return Object.entries(spanData).reduce((acc, _ref) => {\n    let [key, value] = _ref;\n    if (!isPiiAttribute(key)) {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n}\nexport { filterMcpPiiFromSpanData };","map":{"version":3,"names":["PII_ATTRIBUTES","Set","CLIENT_ADDRESS_ATTRIBUTE","CLIENT_PORT_ATTRIBUTE","MCP_LOGGING_MESSAGE_ATTRIBUTE","MCP_RESOURCE_URI_ATTRIBUTE","MCP_TOOL_RESULT_CONTENT_ATTRIBUTE","isPiiAttribute","key","has","startsWith","MCP_REQUEST_ARGUMENT","filterMcpPiiFromSpanData","spanData","sendDefaultPii","Object","entries","reduce","acc","_ref","value"],"sources":["/workspace/node_modules/@sentry/core/src/integrations/mcp-server/piiFiltering.ts"],"sourcesContent":["/**\n * PII filtering for MCP server spans\n *\n * Removes sensitive data when sendDefaultPii is false.\n * Uses configurable attribute filtering to protect user privacy.\n */\nimport type { SpanAttributeValue } from '../../types-hoist/span';\nimport {\n  CLIENT_ADDRESS_ATTRIBUTE,\n  CLIENT_PORT_ATTRIBUTE,\n  MCP_LOGGING_MESSAGE_ATTRIBUTE,\n  MCP_REQUEST_ARGUMENT,\n  MCP_RESOURCE_URI_ATTRIBUTE,\n  MCP_TOOL_RESULT_CONTENT_ATTRIBUTE,\n} from './attributes';\n\n/**\n * PII attributes that should be removed when sendDefaultPii is false\n * @internal\n */\nconst PII_ATTRIBUTES = new Set([\n  CLIENT_ADDRESS_ATTRIBUTE,\n  CLIENT_PORT_ATTRIBUTE,\n  MCP_LOGGING_MESSAGE_ATTRIBUTE,\n  MCP_RESOURCE_URI_ATTRIBUTE,\n  MCP_TOOL_RESULT_CONTENT_ATTRIBUTE,\n]);\n\n/**\n * Checks if an attribute key should be considered PII\n * @internal\n */\nfunction isPiiAttribute(key: string): boolean {\n  return PII_ATTRIBUTES.has(key) || key.startsWith(`${MCP_REQUEST_ARGUMENT}.`);\n}\n\n/**\n * Removes PII attributes from span data when sendDefaultPii is false\n * @param spanData - Raw span attributes\n * @param sendDefaultPii - Whether to include PII data\n * @returns Filtered span attributes\n */\nexport function filterMcpPiiFromSpanData(\n  spanData: Record<string, unknown>,\n  sendDefaultPii: boolean,\n): Record<string, SpanAttributeValue> {\n  if (sendDefaultPii) {\n    return spanData as Record<string, SpanAttributeValue>;\n  }\n\n  return Object.entries(spanData).reduce(\n    (acc, [key, value]) => {\n      if (!isPiiAttribute(key)) {\n        acc[key] = value as SpanAttributeValue;\n      }\n      return acc;\n    },\n    {} as Record<string, SpanAttributeValue>,\n  );\n}\n"],"mappings":";;AAgBA;AACA;AACA;AACA;AACA,MAAMA,cAAA,GAAiB,IAAIC,GAAG,CAAC,CAC7BC,wBAAwB,EACxBC,qBAAqB,EACrBC,6BAA6B,EAC7BC,0BAA0B,EAC1BC,iCAAiC,CAClC,CAAC;;AAEF;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,GAAG,EAAmB;EAC5C,OAAOR,cAAc,CAACS,GAAG,CAACD,GAAG,KAAKA,GAAG,CAACE,UAAU,CAAC,GAACC,oBAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAC,yBACAC,QAAA,EACAC,cAAA,EACA;EACA,IAAAA,cAAA;IACA,OAAAD,QAAA;EACA;EAEA,OAAAE,MAAA,CAAAC,OAAA,CAAAH,QAAA,EAAAI,MAAA,CACA,CAAAC,GAAA,EAAAC,IAAA;IAAA,KAAAX,GAAA,EAAAY,KAAA,IAAAD,IAAA;IACA,KAAAZ,cAAA,CAAAC,GAAA;MACAU,GAAA,CAAAV,GAAA,IAAAY,KAAA;IACA;IACA,OAAAF,GAAA;EACA,GACA,EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}