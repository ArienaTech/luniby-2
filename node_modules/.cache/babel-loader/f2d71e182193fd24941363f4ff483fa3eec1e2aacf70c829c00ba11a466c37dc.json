{"ast":null,"code":"// Medical history service\nimport{supabase}from'../lib/supabase';import{handleSupabaseError}from'../lib/supabase-utils';const medicalHistoryService={// Get medical history for a pet\nasync getMedicalHistory(petId){try{const{data,error}=await supabase.from('medical_history').select('*').eq('pet_id',petId).order('date',{ascending:false});if(error){return{success:false,error:handleSupabaseError(error),data:[]};}return{success:true,data:data||[]};}catch(error){return{success:false,error:handleSupabaseError(error),data:[]};}},// Add medical history entry\nasync addMedicalHistory(historyData){try{const{data,error}=await supabase.from('medical_history').insert([historyData]).select().single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Update medical history entry\nasync updateMedicalHistory(historyId,updates){try{const{data,error}=await supabase.from('medical_history').update(updates).eq('id',historyId).select().single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Delete medical history entry\nasync deleteMedicalHistory(historyId){try{const{error}=await supabase.from('medical_history').delete().eq('id',historyId);if(error){return{success:false,error:handleSupabaseError(error)};}return{success:true};}catch(error){return{success:false,error:handleSupabaseError(error)};}}};export default medicalHistoryService;","map":{"version":3,"names":["supabase","handleSupabaseError","medicalHistoryService","getMedicalHistory","petId","data","error","from","select","eq","order","ascending","success","addMedicalHistory","historyData","insert","single","updateMedicalHistory","historyId","updates","update","deleteMedicalHistory","delete"],"sources":["/workspace/src/services/medicalHistoryService.js"],"sourcesContent":["// Medical history service\nimport { supabase } from '../lib/supabase';\nimport { handleSupabaseError } from '../lib/supabase-utils';\n\nconst medicalHistoryService = {\n  // Get medical history for a pet\n  async getMedicalHistory(petId) {\n    try {\n      const { data, error } = await supabase\n        .from('medical_history')\n        .select('*')\n        .eq('pet_id', petId)\n        .order('date', { ascending: false });\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: [] };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: [] };\n    }\n  },\n\n  // Add medical history entry\n  async addMedicalHistory(historyData) {\n    try {\n      const { data, error } = await supabase\n        .from('medical_history')\n        .insert([historyData])\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Update medical history entry\n  async updateMedicalHistory(historyId, updates) {\n    try {\n      const { data, error } = await supabase\n        .from('medical_history')\n        .update(updates)\n        .eq('id', historyId)\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Delete medical history entry\n  async deleteMedicalHistory(historyId) {\n    try {\n      const { error } = await supabase\n        .from('medical_history')\n        .delete()\n        .eq('id', historyId);\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error) };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error) };\n    }\n  }\n};\n\nexport default medicalHistoryService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}