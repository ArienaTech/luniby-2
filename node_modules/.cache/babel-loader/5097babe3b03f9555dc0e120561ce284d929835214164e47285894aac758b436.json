{"ast":null,"code":"import { parseStringToURLObject, isURLObjectRelative } from '../../utils/url.js';\nimport { MCP_REQUEST_ID_ATTRIBUTE, MCP_PROTOCOL_VERSION_ATTRIBUTE, CLIENT_PORT_ATTRIBUTE, CLIENT_ADDRESS_ATTRIBUTE, MCP_SESSION_ID_ATTRIBUTE, MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE, NETWORK_PROTOCOL_VERSION_ATTRIBUTE, NETWORK_TRANSPORT_ATTRIBUTE, MCP_TRANSPORT_ATTRIBUTE, MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE, MCP_SERVER_NAME_ATTRIBUTE, MCP_SERVER_TITLE_ATTRIBUTE, MCP_SERVER_VERSION_ATTRIBUTE, MCP_RESOURCE_URI_ATTRIBUTE, MCP_LOGGING_LEVEL_ATTRIBUTE, MCP_LOGGING_LOGGER_ATTRIBUTE, MCP_LOGGING_DATA_TYPE_ATTRIBUTE, MCP_LOGGING_MESSAGE_ATTRIBUTE } from './attributes.js';\nimport { extractTargetInfo, getRequestArguments } from './methodConfig.js';\nimport { getProtocolVersionForTransport, getClientInfoForTransport, getSessionDataForTransport } from './sessionManagement.js';\n\n/**\n * Attribute extraction and building functions for MCP server instrumentation\n */\n\n/**\n * Extracts transport types based on transport constructor name\n * @param transport - MCP transport instance\n * @returns Transport type mapping for span attributes\n */\nfunction getTransportTypes(transport) {\n  const transportName = transport.constructor?.name?.toLowerCase() || '';\n  if (transportName.includes('stdio')) {\n    return {\n      mcpTransport: 'stdio',\n      networkTransport: 'pipe'\n    };\n  }\n  if (transportName.includes('streamablehttp') || transportName.includes('streamable')) {\n    return {\n      mcpTransport: 'http',\n      networkTransport: 'tcp'\n    };\n  }\n  if (transportName.includes('sse')) {\n    return {\n      mcpTransport: 'sse',\n      networkTransport: 'tcp'\n    };\n  }\n  return {\n    mcpTransport: 'unknown',\n    networkTransport: 'unknown'\n  };\n}\n\n/**\n * Extracts additional attributes for specific notification types\n * @param method - Notification method name\n * @param params - Notification parameters\n * @returns Method-specific attributes for span instrumentation\n */\nfunction getNotificationAttributes(method, params) {\n  const attributes = {};\n  switch (method) {\n    case 'notifications/cancelled':\n      if (params?.requestId) {\n        attributes['mcp.cancelled.request_id'] = String(params.requestId);\n      }\n      if (params?.reason) {\n        attributes['mcp.cancelled.reason'] = String(params.reason);\n      }\n      break;\n    case 'notifications/message':\n      if (params?.level) {\n        attributes[MCP_LOGGING_LEVEL_ATTRIBUTE] = String(params.level);\n      }\n      if (params?.logger) {\n        attributes[MCP_LOGGING_LOGGER_ATTRIBUTE] = String(params.logger);\n      }\n      if (params?.data !== undefined) {\n        attributes[MCP_LOGGING_DATA_TYPE_ATTRIBUTE] = typeof params.data;\n        if (typeof params.data === 'string') {\n          attributes[MCP_LOGGING_MESSAGE_ATTRIBUTE] = params.data;\n        } else {\n          attributes[MCP_LOGGING_MESSAGE_ATTRIBUTE] = JSON.stringify(params.data);\n        }\n      }\n      break;\n    case 'notifications/progress':\n      if (params?.progressToken) {\n        attributes['mcp.progress.token'] = String(params.progressToken);\n      }\n      if (typeof params?.progress === 'number') {\n        attributes['mcp.progress.current'] = params.progress;\n      }\n      if (typeof params?.total === 'number') {\n        attributes['mcp.progress.total'] = params.total;\n        if (typeof params?.progress === 'number') {\n          attributes['mcp.progress.percentage'] = params.progress / params.total * 100;\n        }\n      }\n      if (params?.message) {\n        attributes['mcp.progress.message'] = String(params.message);\n      }\n      break;\n    case 'notifications/resources/updated':\n      if (params?.uri) {\n        attributes[MCP_RESOURCE_URI_ATTRIBUTE] = String(params.uri);\n        const urlObject = parseStringToURLObject(String(params.uri));\n        if (urlObject && !isURLObjectRelative(urlObject)) {\n          attributes['mcp.resource.protocol'] = urlObject.protocol.replace(':', '');\n        }\n      }\n      break;\n    case 'notifications/initialized':\n      attributes['mcp.lifecycle.phase'] = 'initialization_complete';\n      attributes['mcp.protocol.ready'] = 1;\n      break;\n  }\n  return attributes;\n}\n\n/**\n * Extracts and validates PartyInfo from an unknown object\n * @param obj - Unknown object that might contain party info\n * @returns Validated PartyInfo object with only string properties\n */\nfunction extractPartyInfo(obj) {\n  const partyInfo = {};\n  if (obj && typeof obj === 'object' && obj !== null) {\n    const source = obj;\n    if (typeof source.name === 'string') partyInfo.name = source.name;\n    if (typeof source.title === 'string') partyInfo.title = source.title;\n    if (typeof source.version === 'string') partyInfo.version = source.version;\n  }\n  return partyInfo;\n}\n\n/**\n * Extracts session data from \"initialize\" requests\n * @param request - JSON-RPC \"initialize\" request containing client info and protocol version\n * @returns Session data extracted from request parameters including protocol version and client info\n */\nfunction extractSessionDataFromInitializeRequest(request) {\n  const sessionData = {};\n  if (request.params && typeof request.params === 'object' && request.params !== null) {\n    const params = request.params;\n    if (typeof params.protocolVersion === 'string') {\n      sessionData.protocolVersion = params.protocolVersion;\n    }\n    if (params.clientInfo) {\n      sessionData.clientInfo = extractPartyInfo(params.clientInfo);\n    }\n  }\n  return sessionData;\n}\n\n/**\n * Extracts session data from \"initialize\" response\n * @param result - \"initialize\" response result containing server info and protocol version\n * @returns Partial session data extracted from response including protocol version and server info\n */\nfunction extractSessionDataFromInitializeResponse(result) {\n  const sessionData = {};\n  if (result && typeof result === 'object') {\n    const resultObj = result;\n    if (typeof resultObj.protocolVersion === 'string') sessionData.protocolVersion = resultObj.protocolVersion;\n    if (resultObj.serverInfo) {\n      sessionData.serverInfo = extractPartyInfo(resultObj.serverInfo);\n    }\n  }\n  return sessionData;\n}\n\n/**\n * Build client attributes from stored client info\n * @param transport - MCP transport instance\n * @returns Client attributes for span instrumentation\n */\nfunction getClientAttributes(transport) {\n  const clientInfo = getClientInfoForTransport(transport);\n  const attributes = {};\n  if (clientInfo?.name) {\n    attributes['mcp.client.name'] = clientInfo.name;\n  }\n  if (clientInfo?.title) {\n    attributes['mcp.client.title'] = clientInfo.title;\n  }\n  if (clientInfo?.version) {\n    attributes['mcp.client.version'] = clientInfo.version;\n  }\n  return attributes;\n}\n\n/**\n * Build server attributes from stored server info\n * @param transport - MCP transport instance\n * @returns Server attributes for span instrumentation\n */\nfunction getServerAttributes(transport) {\n  const serverInfo = getSessionDataForTransport(transport)?.serverInfo;\n  const attributes = {};\n  if (serverInfo?.name) {\n    attributes[MCP_SERVER_NAME_ATTRIBUTE] = serverInfo.name;\n  }\n  if (serverInfo?.title) {\n    attributes[MCP_SERVER_TITLE_ATTRIBUTE] = serverInfo.title;\n  }\n  if (serverInfo?.version) {\n    attributes[MCP_SERVER_VERSION_ATTRIBUTE] = serverInfo.version;\n  }\n  return attributes;\n}\n\n/**\n * Extracts client connection info from extra handler data\n * @param extra - Extra handler data containing connection info\n * @returns Client address and port information\n */\nfunction extractClientInfo(extra) {\n  return {\n    address: extra?.requestInfo?.remoteAddress || extra?.clientAddress || extra?.request?.ip || extra?.request?.connection?.remoteAddress,\n    port: extra?.requestInfo?.remotePort || extra?.clientPort || extra?.request?.connection?.remotePort\n  };\n}\n\n/**\n * Build transport and network attributes\n * @param transport - MCP transport instance\n * @param extra - Optional extra handler data\n * @returns Transport attributes for span instrumentation\n */\nfunction buildTransportAttributes(transport, extra) {\n  const sessionId = transport.sessionId;\n  const clientInfo = extra ? extractClientInfo(extra) : {};\n  const {\n    mcpTransport,\n    networkTransport\n  } = getTransportTypes(transport);\n  const clientAttributes = getClientAttributes(transport);\n  const serverAttributes = getServerAttributes(transport);\n  const protocolVersion = getProtocolVersionForTransport(transport);\n  const attributes = {\n    ...(sessionId && {\n      [MCP_SESSION_ID_ATTRIBUTE]: sessionId\n    }),\n    ...(clientInfo.address && {\n      [CLIENT_ADDRESS_ATTRIBUTE]: clientInfo.address\n    }),\n    ...(clientInfo.port && {\n      [CLIENT_PORT_ATTRIBUTE]: clientInfo.port\n    }),\n    [MCP_TRANSPORT_ATTRIBUTE]: mcpTransport,\n    [NETWORK_TRANSPORT_ATTRIBUTE]: networkTransport,\n    [NETWORK_PROTOCOL_VERSION_ATTRIBUTE]: '2.0',\n    ...(protocolVersion && {\n      [MCP_PROTOCOL_VERSION_ATTRIBUTE]: protocolVersion\n    }),\n    ...clientAttributes,\n    ...serverAttributes\n  };\n  return attributes;\n}\n\n/**\n * Build type-specific attributes based on message type\n * @param type - Span type (request or notification)\n * @param message - JSON-RPC message\n * @param params - Optional parameters for attribute extraction\n * @returns Type-specific attributes for span instrumentation\n */\nfunction buildTypeSpecificAttributes(type, message, params) {\n  if (type === 'request') {\n    const request = message;\n    const targetInfo = extractTargetInfo(request.method, params || {});\n    return {\n      ...(request.id !== undefined && {\n        [MCP_REQUEST_ID_ATTRIBUTE]: String(request.id)\n      }),\n      ...targetInfo.attributes,\n      ...getRequestArguments(request.method, params || {})\n    };\n  }\n  return getNotificationAttributes(message.method, params || {});\n}\n\n/**\n * Build attributes for tool result content items\n * @param content - Array of content items from tool result\n * @returns Attributes extracted from each content item including type, text, mime type, URI, and resource info\n */\nfunction buildAllContentItemAttributes(content) {\n  const attributes = {\n    [MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE]: content.length\n  };\n  for (const [i, item] of content.entries()) {\n    if (typeof item !== 'object' || item === null) continue;\n    const contentItem = item;\n    const prefix = content.length === 1 ? 'mcp.tool.result' : `mcp.tool.result.${i}`;\n    const safeSet = (key, value) => {\n      if (typeof value === 'string') attributes[`${prefix}.${key}`] = value;\n    };\n    safeSet('content_type', contentItem.type);\n    safeSet('mime_type', contentItem.mimeType);\n    safeSet('uri', contentItem.uri);\n    safeSet('name', contentItem.name);\n    if (typeof contentItem.text === 'string') {\n      const text = contentItem.text;\n      const maxLength = 500;\n      attributes[`${prefix}.content`] = text.length > maxLength ? `${text.slice(0, maxLength - 3)}...` : text;\n    }\n    if (typeof contentItem.data === 'string') {\n      attributes[`${prefix}.data_size`] = contentItem.data.length;\n    }\n    const resource = contentItem.resource;\n    if (typeof resource === 'object' && resource !== null) {\n      const res = resource;\n      safeSet('resource_uri', res.uri);\n      safeSet('resource_mime_type', res.mimeType);\n    }\n  }\n  return attributes;\n}\n\n/**\n * Extract tool result attributes for span instrumentation\n * @param result - Tool execution result\n * @returns Attributes extracted from tool result content\n */\nfunction extractToolResultAttributes(result) {\n  let attributes = {};\n  if (typeof result !== 'object' || result === null) return attributes;\n  const resultObj = result;\n  if (typeof resultObj.isError === 'boolean') {\n    attributes[MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE] = resultObj.isError;\n  }\n  if (Array.isArray(resultObj.content)) {\n    attributes = {\n      ...attributes,\n      ...buildAllContentItemAttributes(resultObj.content)\n    };\n  }\n  return attributes;\n}\nexport { buildTransportAttributes, buildTypeSpecificAttributes, extractClientInfo, extractSessionDataFromInitializeRequest, extractSessionDataFromInitializeResponse, extractToolResultAttributes, getClientAttributes, getNotificationAttributes, getServerAttributes, getTransportTypes };","map":{"version":3,"names":["getTransportTypes","transport","transportName","constructor","name","toLowerCase","includes","mcpTransport","networkTransport","getNotificationAttributes","method","params","attributes","requestId","String","reason","level","MCP_LOGGING_LEVEL_ATTRIBUTE","logger","MCP_LOGGING_LOGGER_ATTRIBUTE","data","undefined","MCP_LOGGING_DATA_TYPE_ATTRIBUTE","MCP_LOGGING_MESSAGE_ATTRIBUTE","JSON","stringify","progressToken","progress","total","message","uri","MCP_RESOURCE_URI_ATTRIBUTE","urlObject","parseStringToURLObject","isURLObjectRelative","protocol","replace","extractPartyInfo","obj","partyInfo","source","title","version","extractSessionDataFromInitializeRequest","request","sessionData","protocolVersion","clientInfo","extractSessionDataFromInitializeResponse","result","resultObj","serverInfo","getClientAttributes","getClientInfoForTransport","getServerAttributes","getSessionDataForTransport","MCP_SERVER_NAME_ATTRIBUTE","MCP_SERVER_TITLE_ATTRIBUTE","MCP_SERVER_VERSION_ATTRIBUTE","extractClientInfo","extra","address","requestInfo","remoteAddress","clientAddress","ip","connection","port","remotePort","clientPort","buildTransportAttributes","sessionId","clientAttributes","serverAttributes","getProtocolVersionForTransport","MCP_SESSION_ID_ATTRIBUTE","CLIENT_ADDRESS_ATTRIBUTE","CLIENT_PORT_ATTRIBUTE","MCP_TRANSPORT_ATTRIBUTE","NETWORK_TRANSPORT_ATTRIBUTE","NETWORK_PROTOCOL_VERSION_ATTRIBUTE","MCP_PROTOCOL_VERSION_ATTRIBUTE","buildTypeSpecificAttributes","type","targetInfo","extractTargetInfo","id","MCP_REQUEST_ID_ATTRIBUTE","getRequestArguments","buildAllContentItemAttributes","content","MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE","length","i","item","entries","contentItem","prefix","safeSet","key","value","mimeType","text","maxLength","slice","resource","res","extractToolResultAttributes","isError","MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE","Array","isArray"],"sources":["/workspace/node_modules/@sentry/core/src/integrations/mcp-server/attributeExtraction.ts"],"sourcesContent":["/**\n * Attribute extraction and building functions for MCP server instrumentation\n */\n\nimport { isURLObjectRelative, parseStringToURLObject } from '../../utils/url';\nimport {\n  CLIENT_ADDRESS_ATTRIBUTE,\n  CLIENT_PORT_ATTRIBUTE,\n  MCP_LOGGING_DATA_TYPE_ATTRIBUTE,\n  MCP_LOGGING_LEVEL_ATTRIBUTE,\n  MCP_LOGGING_LOGGER_ATTRIBUTE,\n  MCP_LOGGING_MESSAGE_ATTRIBUTE,\n  MCP_PROTOCOL_VERSION_ATTRIBUTE,\n  MCP_REQUEST_ID_ATTRIBUTE,\n  MCP_RESOURCE_URI_ATTRIBUTE,\n  MCP_SERVER_NAME_ATTRIBUTE,\n  MCP_SERVER_TITLE_ATTRIBUTE,\n  MCP_SERVER_VERSION_ATTRIBUTE,\n  MCP_SESSION_ID_ATTRIBUTE,\n  MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE,\n  MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE,\n  MCP_TRANSPORT_ATTRIBUTE,\n  NETWORK_PROTOCOL_VERSION_ATTRIBUTE,\n  NETWORK_TRANSPORT_ATTRIBUTE,\n} from './attributes';\nimport { extractTargetInfo, getRequestArguments } from './methodConfig';\nimport {\n  getClientInfoForTransport,\n  getProtocolVersionForTransport,\n  getSessionDataForTransport,\n} from './sessionManagement';\nimport type {\n  ExtraHandlerData,\n  JsonRpcNotification,\n  JsonRpcRequest,\n  McpSpanType,\n  MCPTransport,\n  PartyInfo,\n  SessionData,\n} from './types';\n\n/**\n * Extracts transport types based on transport constructor name\n * @param transport - MCP transport instance\n * @returns Transport type mapping for span attributes\n */\nexport function getTransportTypes(transport: MCPTransport): { mcpTransport: string; networkTransport: string } {\n  const transportName = transport.constructor?.name?.toLowerCase() || '';\n\n  if (transportName.includes('stdio')) {\n    return { mcpTransport: 'stdio', networkTransport: 'pipe' };\n  }\n\n  if (transportName.includes('streamablehttp') || transportName.includes('streamable')) {\n    return { mcpTransport: 'http', networkTransport: 'tcp' };\n  }\n\n  if (transportName.includes('sse')) {\n    return { mcpTransport: 'sse', networkTransport: 'tcp' };\n  }\n\n  return { mcpTransport: 'unknown', networkTransport: 'unknown' };\n}\n\n/**\n * Extracts additional attributes for specific notification types\n * @param method - Notification method name\n * @param params - Notification parameters\n * @returns Method-specific attributes for span instrumentation\n */\nexport function getNotificationAttributes(\n  method: string,\n  params: Record<string, unknown>,\n): Record<string, string | number> {\n  const attributes: Record<string, string | number> = {};\n\n  switch (method) {\n    case 'notifications/cancelled':\n      if (params?.requestId) {\n        attributes['mcp.cancelled.request_id'] = String(params.requestId);\n      }\n      if (params?.reason) {\n        attributes['mcp.cancelled.reason'] = String(params.reason);\n      }\n      break;\n\n    case 'notifications/message':\n      if (params?.level) {\n        attributes[MCP_LOGGING_LEVEL_ATTRIBUTE] = String(params.level);\n      }\n      if (params?.logger) {\n        attributes[MCP_LOGGING_LOGGER_ATTRIBUTE] = String(params.logger);\n      }\n      if (params?.data !== undefined) {\n        attributes[MCP_LOGGING_DATA_TYPE_ATTRIBUTE] = typeof params.data;\n        if (typeof params.data === 'string') {\n          attributes[MCP_LOGGING_MESSAGE_ATTRIBUTE] = params.data;\n        } else {\n          attributes[MCP_LOGGING_MESSAGE_ATTRIBUTE] = JSON.stringify(params.data);\n        }\n      }\n      break;\n\n    case 'notifications/progress':\n      if (params?.progressToken) {\n        attributes['mcp.progress.token'] = String(params.progressToken);\n      }\n      if (typeof params?.progress === 'number') {\n        attributes['mcp.progress.current'] = params.progress;\n      }\n      if (typeof params?.total === 'number') {\n        attributes['mcp.progress.total'] = params.total;\n        if (typeof params?.progress === 'number') {\n          attributes['mcp.progress.percentage'] = (params.progress / params.total) * 100;\n        }\n      }\n      if (params?.message) {\n        attributes['mcp.progress.message'] = String(params.message);\n      }\n      break;\n\n    case 'notifications/resources/updated':\n      if (params?.uri) {\n        attributes[MCP_RESOURCE_URI_ATTRIBUTE] = String(params.uri);\n        const urlObject = parseStringToURLObject(String(params.uri));\n        if (urlObject && !isURLObjectRelative(urlObject)) {\n          attributes['mcp.resource.protocol'] = urlObject.protocol.replace(':', '');\n        }\n      }\n      break;\n\n    case 'notifications/initialized':\n      attributes['mcp.lifecycle.phase'] = 'initialization_complete';\n      attributes['mcp.protocol.ready'] = 1;\n      break;\n  }\n\n  return attributes;\n}\n\n/**\n * Extracts and validates PartyInfo from an unknown object\n * @param obj - Unknown object that might contain party info\n * @returns Validated PartyInfo object with only string properties\n */\nfunction extractPartyInfo(obj: unknown): PartyInfo {\n  const partyInfo: PartyInfo = {};\n\n  if (obj && typeof obj === 'object' && obj !== null) {\n    const source = obj as Record<string, unknown>;\n    if (typeof source.name === 'string') partyInfo.name = source.name;\n    if (typeof source.title === 'string') partyInfo.title = source.title;\n    if (typeof source.version === 'string') partyInfo.version = source.version;\n  }\n\n  return partyInfo;\n}\n\n/**\n * Extracts session data from \"initialize\" requests\n * @param request - JSON-RPC \"initialize\" request containing client info and protocol version\n * @returns Session data extracted from request parameters including protocol version and client info\n */\nexport function extractSessionDataFromInitializeRequest(request: JsonRpcRequest): SessionData {\n  const sessionData: SessionData = {};\n  if (request.params && typeof request.params === 'object' && request.params !== null) {\n    const params = request.params as Record<string, unknown>;\n    if (typeof params.protocolVersion === 'string') {\n      sessionData.protocolVersion = params.protocolVersion;\n    }\n    if (params.clientInfo) {\n      sessionData.clientInfo = extractPartyInfo(params.clientInfo);\n    }\n  }\n  return sessionData;\n}\n\n/**\n * Extracts session data from \"initialize\" response\n * @param result - \"initialize\" response result containing server info and protocol version\n * @returns Partial session data extracted from response including protocol version and server info\n */\nexport function extractSessionDataFromInitializeResponse(result: unknown): Partial<SessionData> {\n  const sessionData: Partial<SessionData> = {};\n  if (result && typeof result === 'object') {\n    const resultObj = result as Record<string, unknown>;\n    if (typeof resultObj.protocolVersion === 'string') sessionData.protocolVersion = resultObj.protocolVersion;\n    if (resultObj.serverInfo) {\n      sessionData.serverInfo = extractPartyInfo(resultObj.serverInfo);\n    }\n  }\n  return sessionData;\n}\n\n/**\n * Build client attributes from stored client info\n * @param transport - MCP transport instance\n * @returns Client attributes for span instrumentation\n */\nexport function getClientAttributes(transport: MCPTransport): Record<string, string> {\n  const clientInfo = getClientInfoForTransport(transport);\n  const attributes: Record<string, string> = {};\n\n  if (clientInfo?.name) {\n    attributes['mcp.client.name'] = clientInfo.name;\n  }\n  if (clientInfo?.title) {\n    attributes['mcp.client.title'] = clientInfo.title;\n  }\n  if (clientInfo?.version) {\n    attributes['mcp.client.version'] = clientInfo.version;\n  }\n\n  return attributes;\n}\n\n/**\n * Build server attributes from stored server info\n * @param transport - MCP transport instance\n * @returns Server attributes for span instrumentation\n */\nexport function getServerAttributes(transport: MCPTransport): Record<string, string> {\n  const serverInfo = getSessionDataForTransport(transport)?.serverInfo;\n  const attributes: Record<string, string> = {};\n\n  if (serverInfo?.name) {\n    attributes[MCP_SERVER_NAME_ATTRIBUTE] = serverInfo.name;\n  }\n  if (serverInfo?.title) {\n    attributes[MCP_SERVER_TITLE_ATTRIBUTE] = serverInfo.title;\n  }\n  if (serverInfo?.version) {\n    attributes[MCP_SERVER_VERSION_ATTRIBUTE] = serverInfo.version;\n  }\n\n  return attributes;\n}\n\n/**\n * Extracts client connection info from extra handler data\n * @param extra - Extra handler data containing connection info\n * @returns Client address and port information\n */\nexport function extractClientInfo(extra: ExtraHandlerData): {\n  address?: string;\n  port?: number;\n} {\n  return {\n    address:\n      extra?.requestInfo?.remoteAddress ||\n      extra?.clientAddress ||\n      extra?.request?.ip ||\n      extra?.request?.connection?.remoteAddress,\n    port: extra?.requestInfo?.remotePort || extra?.clientPort || extra?.request?.connection?.remotePort,\n  };\n}\n\n/**\n * Build transport and network attributes\n * @param transport - MCP transport instance\n * @param extra - Optional extra handler data\n * @returns Transport attributes for span instrumentation\n */\nexport function buildTransportAttributes(\n  transport: MCPTransport,\n  extra?: ExtraHandlerData,\n): Record<string, string | number> {\n  const sessionId = transport.sessionId;\n  const clientInfo = extra ? extractClientInfo(extra) : {};\n  const { mcpTransport, networkTransport } = getTransportTypes(transport);\n  const clientAttributes = getClientAttributes(transport);\n  const serverAttributes = getServerAttributes(transport);\n  const protocolVersion = getProtocolVersionForTransport(transport);\n\n  const attributes = {\n    ...(sessionId && { [MCP_SESSION_ID_ATTRIBUTE]: sessionId }),\n    ...(clientInfo.address && { [CLIENT_ADDRESS_ATTRIBUTE]: clientInfo.address }),\n    ...(clientInfo.port && { [CLIENT_PORT_ATTRIBUTE]: clientInfo.port }),\n    [MCP_TRANSPORT_ATTRIBUTE]: mcpTransport,\n    [NETWORK_TRANSPORT_ATTRIBUTE]: networkTransport,\n    [NETWORK_PROTOCOL_VERSION_ATTRIBUTE]: '2.0',\n    ...(protocolVersion && { [MCP_PROTOCOL_VERSION_ATTRIBUTE]: protocolVersion }),\n    ...clientAttributes,\n    ...serverAttributes,\n  };\n\n  return attributes;\n}\n\n/**\n * Build type-specific attributes based on message type\n * @param type - Span type (request or notification)\n * @param message - JSON-RPC message\n * @param params - Optional parameters for attribute extraction\n * @returns Type-specific attributes for span instrumentation\n */\nexport function buildTypeSpecificAttributes(\n  type: McpSpanType,\n  message: JsonRpcRequest | JsonRpcNotification,\n  params?: Record<string, unknown>,\n): Record<string, string | number> {\n  if (type === 'request') {\n    const request = message as JsonRpcRequest;\n    const targetInfo = extractTargetInfo(request.method, params || {});\n\n    return {\n      ...(request.id !== undefined && { [MCP_REQUEST_ID_ATTRIBUTE]: String(request.id) }),\n      ...targetInfo.attributes,\n      ...getRequestArguments(request.method, params || {}),\n    };\n  }\n\n  return getNotificationAttributes(message.method, params || {});\n}\n\n/**\n * Build attributes for tool result content items\n * @param content - Array of content items from tool result\n * @returns Attributes extracted from each content item including type, text, mime type, URI, and resource info\n */\nfunction buildAllContentItemAttributes(content: unknown[]): Record<string, string | number> {\n  const attributes: Record<string, string | number> = {\n    [MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE]: content.length,\n  };\n\n  for (const [i, item] of content.entries()) {\n    if (typeof item !== 'object' || item === null) continue;\n\n    const contentItem = item as Record<string, unknown>;\n    const prefix = content.length === 1 ? 'mcp.tool.result' : `mcp.tool.result.${i}`;\n\n    const safeSet = (key: string, value: unknown): void => {\n      if (typeof value === 'string') attributes[`${prefix}.${key}`] = value;\n    };\n\n    safeSet('content_type', contentItem.type);\n    safeSet('mime_type', contentItem.mimeType);\n    safeSet('uri', contentItem.uri);\n    safeSet('name', contentItem.name);\n\n    if (typeof contentItem.text === 'string') {\n      const text = contentItem.text;\n      const maxLength = 500;\n      attributes[`${prefix}.content`] = text.length > maxLength ? `${text.slice(0, maxLength - 3)}...` : text;\n    }\n\n    if (typeof contentItem.data === 'string') {\n      attributes[`${prefix}.data_size`] = contentItem.data.length;\n    }\n\n    const resource = contentItem.resource;\n    if (typeof resource === 'object' && resource !== null) {\n      const res = resource as Record<string, unknown>;\n      safeSet('resource_uri', res.uri);\n      safeSet('resource_mime_type', res.mimeType);\n    }\n  }\n\n  return attributes;\n}\n\n/**\n * Extract tool result attributes for span instrumentation\n * @param result - Tool execution result\n * @returns Attributes extracted from tool result content\n */\nexport function extractToolResultAttributes(result: unknown): Record<string, string | number | boolean> {\n  let attributes: Record<string, string | number | boolean> = {};\n  if (typeof result !== 'object' || result === null) return attributes;\n\n  const resultObj = result as Record<string, unknown>;\n  if (typeof resultObj.isError === 'boolean') {\n    attributes[MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE] = resultObj.isError;\n  }\n  if (Array.isArray(resultObj.content)) {\n    attributes = { ...attributes, ...buildAllContentItemAttributes(resultObj.content) };\n  }\n  return attributes;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}