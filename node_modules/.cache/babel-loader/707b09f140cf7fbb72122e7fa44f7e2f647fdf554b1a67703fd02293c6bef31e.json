{"ast":null,"code":"import { fill } from '../../utils/object.js';\nimport { wrapAllMCPHandlers } from './handlers.js';\nimport { wrapTransportOnMessage, wrapTransportSend, wrapTransportOnClose, wrapTransportError } from './transport.js';\nimport { validateMcpServerInstance } from './validation.js';\n\n/**\n * Tracks wrapped MCP server instances to prevent double-wrapping\n * @internal\n */\nconst wrappedMcpServerInstances = new WeakSet();\n\n/**\n * Wraps a MCP Server instance from the `@modelcontextprotocol/sdk` package with Sentry instrumentation.\n *\n * Compatible with versions `^1.9.0` of the `@modelcontextprotocol/sdk` package.\n * Automatically instruments transport methods and handler functions for comprehensive monitoring.\n *\n * @example\n * ```typescript\n * import * as Sentry from '@sentry/core';\n * import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\n * import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';\n *\n * const server = Sentry.wrapMcpServerWithSentry(\n *   new McpServer({ name: \"my-server\", version: \"1.0.0\" })\n * );\n *\n * const transport = new StreamableHTTPServerTransport();\n * await server.connect(transport);\n * ```\n *\n * @param mcpServerInstance - MCP server instance to instrument\n * @returns Instrumented server instance (same reference)\n */\nfunction wrapMcpServerWithSentry(mcpServerInstance) {\n  if (wrappedMcpServerInstances.has(mcpServerInstance)) {\n    return mcpServerInstance;\n  }\n  if (!validateMcpServerInstance(mcpServerInstance)) {\n    return mcpServerInstance;\n  }\n  const serverInstance = mcpServerInstance;\n  fill(serverInstance, 'connect', originalConnect => {\n    return async function (transport) {\n      for (var _len = arguments.length, restArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        restArgs[_key - 1] = arguments[_key];\n      }\n      const result = await originalConnect.call(this, transport, ...restArgs);\n      wrapTransportOnMessage(transport);\n      wrapTransportSend(transport);\n      wrapTransportOnClose(transport);\n      wrapTransportError(transport);\n      return result;\n    };\n  });\n  wrapAllMCPHandlers(serverInstance);\n  wrappedMcpServerInstances.add(mcpServerInstance);\n  return mcpServerInstance;\n}\nexport { wrapMcpServerWithSentry };","map":{"version":3,"names":["wrappedMcpServerInstances","WeakSet","wrapMcpServerWithSentry","mcpServerInstance","has","validateMcpServerInstance","serverInstance","fill","originalConnect","transport","_len","arguments","length","restArgs","Array","_key","result","call","wrapTransportOnMessage","wrapTransportSend","wrapTransportOnClose","wrapTransportError","wrapAllMCPHandlers","add"],"sources":["/workspace/node_modules/@sentry/core/src/integrations/mcp-server/index.ts"],"sourcesContent":["import { fill } from '../../utils/object';\nimport { wrapAllMCPHandlers } from './handlers';\nimport { wrapTransportError, wrapTransportOnClose, wrapTransportOnMessage, wrapTransportSend } from './transport';\nimport type { MCPServerInstance, MCPTransport } from './types';\nimport { validateMcpServerInstance } from './validation';\n\n/**\n * Tracks wrapped MCP server instances to prevent double-wrapping\n * @internal\n */\nconst wrappedMcpServerInstances = new WeakSet();\n\n/**\n * Wraps a MCP Server instance from the `@modelcontextprotocol/sdk` package with Sentry instrumentation.\n *\n * Compatible with versions `^1.9.0` of the `@modelcontextprotocol/sdk` package.\n * Automatically instruments transport methods and handler functions for comprehensive monitoring.\n *\n * @example\n * ```typescript\n * import * as Sentry from '@sentry/core';\n * import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\n * import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';\n *\n * const server = Sentry.wrapMcpServerWithSentry(\n *   new McpServer({ name: \"my-server\", version: \"1.0.0\" })\n * );\n *\n * const transport = new StreamableHTTPServerTransport();\n * await server.connect(transport);\n * ```\n *\n * @param mcpServerInstance - MCP server instance to instrument\n * @returns Instrumented server instance (same reference)\n */\nexport function wrapMcpServerWithSentry<S extends object>(mcpServerInstance: S): S {\n  if (wrappedMcpServerInstances.has(mcpServerInstance)) {\n    return mcpServerInstance;\n  }\n\n  if (!validateMcpServerInstance(mcpServerInstance)) {\n    return mcpServerInstance;\n  }\n\n  const serverInstance = mcpServerInstance as MCPServerInstance;\n\n  fill(serverInstance, 'connect', originalConnect => {\n    return async function (this: MCPServerInstance, transport: MCPTransport, ...restArgs: unknown[]) {\n      const result = await (originalConnect as (...args: unknown[]) => Promise<unknown>).call(\n        this,\n        transport,\n        ...restArgs,\n      );\n\n      wrapTransportOnMessage(transport);\n      wrapTransportSend(transport);\n      wrapTransportOnClose(transport);\n      wrapTransportError(transport);\n\n      return result;\n    };\n  });\n\n  wrapAllMCPHandlers(serverInstance);\n\n  wrappedMcpServerInstances.add(mcpServerInstance);\n  return mcpServerInstance as S;\n}\n"],"mappings":";;;;;AAMA;AACA;AACA;AACA;AACA,MAAMA,yBAAA,GAA4B,IAAIC,OAAO,EAAE;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,uBAAuBA,CAAmBC,iBAAiB,EAAQ;EACjF,IAAIH,yBAAyB,CAACI,GAAG,CAACD,iBAAiB,CAAC,EAAE;IACpD,OAAOA,iBAAiB;EAC5B;EAEE,IAAI,CAACE,yBAAyB,CAACF,iBAAiB,CAAC,EAAE;IACjD,OAAOA,iBAAiB;EAC5B;EAEE,MAAMG,cAAA,GAAiBH,iBAAA;EAEvBI,IAAI,CAACD,cAAc,EAAE,SAAS,EAAEE,eAAA,IAAmB;IACjD,OAAO,gBAAyCC,SAAS,EAAwC;MAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAArBC,QAAQ,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAARF,QAAQ,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;MAAA;MAClF,MAAMC,MAAA,GAAS,MAAOR,eAAA,CAA6DS,IAAI,CACrF,IAAI,EACJR,SAAS,EACT,GAAGI,QACX,CAAO;MAEDK,sBAAsB,CAACT,SAAS,CAAC;MACjCU,iBAAiB,CAACV,SAAS,CAAC;MAC5BW,oBAAoB,CAACX,SAAS,CAAC;MAC/BY,kBAAkB,CAACZ,SAAS,CAAC;MAE7B,OAAOO,MAAM;IACnB,CAAK;EACL,CAAG,CAAC;EAEFM,kBAAkB,CAAChB,cAAc,CAAC;EAElCN,yBAAyB,CAACuB,GAAG,CAACpB,iBAAiB,CAAC;EAChD,OAAOA,iBAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}