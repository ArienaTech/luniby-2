{"ast":null,"code":"// Pet management service\nimport{supabase}from'../lib/supabase';import{handleSupabaseError}from'../lib/supabase-utils';const petService={// Get all pets for a user\nasync getUserPets(userId){try{const{data,error}=await supabase.from('pets').select('*').eq('owner_id',userId).order('created_at',{ascending:false});if(error){return{success:false,error:handleSupabaseError(error),data:[]};}return{success:true,data:data||[]};}catch(error){return{success:false,error:handleSupabaseError(error),data:[]};}},// Get a single pet by ID\nasync getPet(petId){try{const{data,error}=await supabase.from('pets').select('*').eq('id',petId).single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Create a new pet\nasync createPet(petData){try{const{data,error}=await supabase.from('pets').insert([petData]).select().single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Update a pet\nasync updatePet(petId,updates){try{const{data,error}=await supabase.from('pets').update(updates).eq('id',petId).select().single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Delete a pet\nasync deletePet(petId){try{const{error}=await supabase.from('pets').delete().eq('id',petId);if(error){return{success:false,error:handleSupabaseError(error)};}return{success:true};}catch(error){return{success:false,error:handleSupabaseError(error)};}},// Upload pet image\nasync uploadPetImage(petId,file){try{const fileExt=file.name.split('.').pop();const fileName=`${petId}-${Date.now()}.${fileExt}`;const filePath=`${petId}/${fileName}`;const{error:uploadError}=await supabase.storage.from('pet-images').upload(filePath,file);if(uploadError){return{success:false,error:handleSupabaseError(uploadError),url:null};}const{data:{publicUrl}}=supabase.storage.from('pet-images').getPublicUrl(filePath);return{success:true,url:publicUrl};}catch(error){return{success:false,error:handleSupabaseError(error),url:null};}}};export default petService;","map":{"version":3,"names":["supabase","handleSupabaseError","petService","getUserPets","userId","data","error","from","select","eq","order","ascending","success","getPet","petId","single","createPet","petData","insert","updatePet","updates","update","deletePet","delete","uploadPetImage","file","fileExt","name","split","pop","fileName","Date","now","filePath","uploadError","storage","upload","url","publicUrl","getPublicUrl"],"sources":["/workspace/src/services/petService.js"],"sourcesContent":["// Pet management service\nimport { supabase } from '../lib/supabase';\nimport { handleSupabaseError } from '../lib/supabase-utils';\n\nconst petService = {\n  // Get all pets for a user\n  async getUserPets(userId) {\n    try {\n      const { data, error } = await supabase\n        .from('pets')\n        .select('*')\n        .eq('owner_id', userId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: [] };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: [] };\n    }\n  },\n\n  // Get a single pet by ID\n  async getPet(petId) {\n    try {\n      const { data, error } = await supabase\n        .from('pets')\n        .select('*')\n        .eq('id', petId)\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Create a new pet\n  async createPet(petData) {\n    try {\n      const { data, error } = await supabase\n        .from('pets')\n        .insert([petData])\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Update a pet\n  async updatePet(petId, updates) {\n    try {\n      const { data, error } = await supabase\n        .from('pets')\n        .update(updates)\n        .eq('id', petId)\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Delete a pet\n  async deletePet(petId) {\n    try {\n      const { error } = await supabase\n        .from('pets')\n        .delete()\n        .eq('id', petId);\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error) };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error) };\n    }\n  },\n\n  // Upload pet image\n  async uploadPetImage(petId, file) {\n    try {\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${petId}-${Date.now()}.${fileExt}`;\n      const filePath = `${petId}/${fileName}`;\n\n      const { error: uploadError } = await supabase.storage\n        .from('pet-images')\n        .upload(filePath, file);\n\n      if (uploadError) {\n        return { success: false, error: handleSupabaseError(uploadError), url: null };\n      }\n\n      const { data: { publicUrl } } = supabase.storage\n        .from('pet-images')\n        .getPublicUrl(filePath);\n\n      return { success: true, url: publicUrl };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), url: null };\n    }\n  }\n};\n\nexport default petService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}