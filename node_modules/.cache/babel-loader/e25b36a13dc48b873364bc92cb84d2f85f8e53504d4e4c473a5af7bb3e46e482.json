{"ast":null,"code":"// Centralized authentication manager\nimport{createClient}from'@supabase/supabase-js';// Initialize Supabase client\nconst supabaseUrl=process.env.REACT_APP_SUPABASE_URL||'';const supabaseAnonKey=process.env.REACT_APP_SUPABASE_ANON_KEY||'';let supabase=null;if(supabaseUrl&&supabaseAnonKey){supabase=createClient(supabaseUrl,supabaseAnonKey);}else{console.warn('⚠️ Supabase credentials not configured');}// Authentication state management\nclass AuthManager{constructor(){this.user=null;this.session=null;this.listeners=new Set();this.initialized=false;}async initialize(){if(this.initialized||!supabase)return;try{// Get initial session\nconst{data:{session},error}=await supabase.auth.getSession();if(error){console.error('Auth initialization error:',error);return;}this.session=session;this.user=(session===null||session===void 0?void 0:session.user)||null;this.initialized=true;// Listen for auth changes\nsupabase.auth.onAuthStateChange((_event,session)=>{this.session=session;this.user=(session===null||session===void 0?void 0:session.user)||null;this.notifyListeners();});console.log('✅ Auth manager initialized');}catch(error){console.error('Auth manager initialization failed:',error);}}// Subscribe to auth state changes\nsubscribe(callback){this.listeners.add(callback);return()=>this.listeners.delete(callback);}// Notify all listeners of auth state change\nnotifyListeners(){this.listeners.forEach(callback=>{try{callback(this.user,this.session);}catch(error){console.error('Auth listener error:',error);}});}// Get current user\ngetUser(){return this.user;}// Get current session\ngetSession(){return this.session;}// Check if user is authenticated\nisAuthenticated(){return!!this.session&&!!this.user;}// Sign in\nasync signIn(email,password){if(!supabase)throw new Error('Supabase not initialized');const{data,error}=await supabase.auth.signInWithPassword({email,password});if(error)throw error;return data;}// Sign up\nasync signUp(email,password){let metadata=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!supabase)throw new Error('Supabase not initialized');const{data,error}=await supabase.auth.signUp({email,password,options:{data:metadata}});if(error)throw error;return data;}// Sign out\nasync signOut(){if(!supabase)throw new Error('Supabase not initialized');const{error}=await supabase.auth.signOut();if(error)throw error;this.user=null;this.session=null;this.notifyListeners();}// Get Supabase client\ngetClient(){return supabase;}}// Create singleton instance\nconst authManager=new AuthManager();// Initialize on import\nif(typeof window!=='undefined'){authManager.initialize();window.authManager=authManager;// Make available globally for debugging\n}// Subscribe to auth state changes (for backward compatibility)\nexport const subscribeToAuth=callback=>{return authManager.subscribe((user,session)=>{// Determine event type\nlet event='INITIAL_SESSION';if(session&&user){event='SIGNED_IN';}else if(!session&&!user){event='SIGNED_OUT';}callback(event,session);});};export default authManager;export{supabase};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","supabase","console","warn","AuthManager","constructor","user","session","listeners","Set","initialized","initialize","data","error","auth","getSession","onAuthStateChange","_event","notifyListeners","log","subscribe","callback","add","delete","forEach","getUser","isAuthenticated","signIn","email","password","Error","signInWithPassword","signUp","metadata","arguments","length","undefined","options","signOut","getClient","authManager","window","subscribeToAuth","event"],"sources":["/workspace/src/lib/auth-manager.js"],"sourcesContent":["// Centralized authentication manager\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || '';\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || '';\n\nlet supabase = null;\n\nif (supabaseUrl && supabaseAnonKey) {\n  supabase = createClient(supabaseUrl, supabaseAnonKey);\n} else {\n  console.warn('⚠️ Supabase credentials not configured');\n}\n\n// Authentication state management\nclass AuthManager {\n  constructor() {\n    this.user = null;\n    this.session = null;\n    this.listeners = new Set();\n    this.initialized = false;\n  }\n\n  async initialize() {\n    if (this.initialized || !supabase) return;\n\n    try {\n      // Get initial session\n      const { data: { session }, error } = await supabase.auth.getSession();\n      \n      if (error) {\n        console.error('Auth initialization error:', error);\n        return;\n      }\n\n      this.session = session;\n      this.user = session?.user || null;\n      this.initialized = true;\n\n      // Listen for auth changes\n      supabase.auth.onAuthStateChange((_event, session) => {\n        this.session = session;\n        this.user = session?.user || null;\n        this.notifyListeners();\n      });\n\n      console.log('✅ Auth manager initialized');\n    } catch (error) {\n      console.error('Auth manager initialization failed:', error);\n    }\n  }\n\n  // Subscribe to auth state changes\n  subscribe(callback) {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  // Notify all listeners of auth state change\n  notifyListeners() {\n    this.listeners.forEach(callback => {\n      try {\n        callback(this.user, this.session);\n      } catch (error) {\n        console.error('Auth listener error:', error);\n      }\n    });\n  }\n\n  // Get current user\n  getUser() {\n    return this.user;\n  }\n\n  // Get current session\n  getSession() {\n    return this.session;\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.session && !!this.user;\n  }\n\n  // Sign in\n  async signIn(email, password) {\n    if (!supabase) throw new Error('Supabase not initialized');\n    const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n    if (error) throw error;\n    return data;\n  }\n\n  // Sign up\n  async signUp(email, password, metadata = {}) {\n    if (!supabase) throw new Error('Supabase not initialized');\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: { data: metadata }\n    });\n    if (error) throw error;\n    return data;\n  }\n\n  // Sign out\n  async signOut() {\n    if (!supabase) throw new Error('Supabase not initialized');\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n    this.user = null;\n    this.session = null;\n    this.notifyListeners();\n  }\n\n  // Get Supabase client\n  getClient() {\n    return supabase;\n  }\n}\n\n// Create singleton instance\nconst authManager = new AuthManager();\n\n// Initialize on import\nif (typeof window !== 'undefined') {\n  authManager.initialize();\n  window.authManager = authManager; // Make available globally for debugging\n}\n\n// Subscribe to auth state changes (for backward compatibility)\nexport const subscribeToAuth = (callback) => {\n  return authManager.subscribe((user, session) => {\n    // Determine event type\n    let event = 'INITIAL_SESSION';\n    if (session && user) {\n      event = 'SIGNED_IN';\n    } else if (!session && !user) {\n      event = 'SIGNED_OUT';\n    }\n    \n    callback(event, session);\n  });\n};\n\nexport default authManager;\nexport { supabase };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}