{"ast":null,"code":"import { getClient } from '../currentScopes.js';\nimport { defineIntegration } from '../integration.js';\nimport { getOriginalFunction } from '../utils/object.js';\nlet originalFunctionToString;\nconst INTEGRATION_NAME = 'FunctionToString';\nconst SETUP_CLIENTS = new WeakMap();\nconst _functionToStringIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        Function.prototype.toString = function () {\n          const originalFunction = getOriginalFunction(this);\n          const context = SETUP_CLIENTS.has(getClient()) && originalFunction !== undefined ? originalFunction : this;\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    }\n  };\n};\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nconst functionToStringIntegration = defineIntegration(_functionToStringIntegration);\nexport { functionToStringIntegration };","map":{"version":3,"names":["originalFunctionToString","INTEGRATION_NAME","SETUP_CLIENTS","WeakMap","_functionToStringIntegration","name","setupOnce","Function","prototype","toString","originalFunction","getOriginalFunction","context","has","getClient","undefined","_len","arguments","length","args","Array","_key","apply","setup","client","set","functionToStringIntegration","defineIntegration"],"sources":["/workspace/node_modules/@sentry/core/src/integrations/functiontostring.ts"],"sourcesContent":["import type { Client } from '../client';\nimport { getClient } from '../currentScopes';\nimport { defineIntegration } from '../integration';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { WrappedFunction } from '../types-hoist/wrappedfunction';\nimport { getOriginalFunction } from '../utils/object';\n\nlet originalFunctionToString: () => void;\n\nconst INTEGRATION_NAME = 'FunctionToString';\n\nconst SETUP_CLIENTS = new WeakMap<Client, boolean>();\n\nconst _functionToStringIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        Function.prototype.toString = function (this: WrappedFunction, ...args: unknown[]): string {\n          const originalFunction = getOriginalFunction(this);\n          const context =\n            SETUP_CLIENTS.has(getClient() as Client) && originalFunction !== undefined ? originalFunction : this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nexport const functionToStringIntegration = defineIntegration(_functionToStringIntegration);\n"],"mappings":";;;AAOA,IAAIA,wBAAwB;AAE5B,MAAMC,gBAAA,GAAmB,kBAAkB;AAE3C,MAAMC,aAAA,GAAgB,IAAIC,OAAO,EAAmB;AAEpD,MAAMC,4BAAA,GAAgCA,CAAA,KAAM;EAC1C,OAAO;IACLC,IAAI,EAAEJ,gBAAgB;IACtBK,SAASA,CAAA,EAAG;MAChB;MACMN,wBAAA,GAA2BO,QAAQ,CAACC,SAAS,CAACC,QAAQ;;MAE5D;MACA;MACM,IAAI;QACFF,QAAQ,CAACC,SAAS,CAACC,QAAA,GAAW,YAA6D;UACzF,MAAMC,gBAAA,GAAmBC,mBAAmB,CAAC,IAAI,CAAC;UAClD,MAAMC,OAAA,GACJV,aAAa,CAACW,GAAG,CAACC,SAAS,EAAC,CAAE,IAAcJ,gBAAA,KAAqBK,SAAA,GAAYL,gBAAA,GAAmB,IAAI;UAAA,SAAAM,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAHtCC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;YAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;UAAA;UAIpE,OAAOrB,wBAAwB,CAACsB,KAAK,CAACV,OAAO,EAAEO,IAAI,CAAC;QAC9D,CAAS;MACT,EAAQ,MAAM;QACd;MAAA;IAEA,CAAK;IACDI,KAAKA,CAACC,MAAM,EAAE;MACZtB,aAAa,CAACuB,GAAG,CAACD,MAAM,EAAE,IAAI,CAAC;IACrC;EACA,CAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaE,2BAAA,GAA8BC,iBAAiB,CAACvB,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}