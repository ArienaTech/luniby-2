{"ast":null,"code":"import { getGlobalSingleton } from '../carrier.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { GLOBAL_OBJ } from './worldwide.js';\nconst CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'];\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** This may be mutated by the console instrumentation. */\nconst originalConsoleMethods = {};\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n  const console = GLOBAL_OBJ.console;\n  const wrappedFuncs = {};\n  const wrappedLevels = Object.keys(originalConsoleMethods);\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level];\n    wrappedFuncs[level] = console[level];\n    console[level] = originalConsoleMethod;\n  });\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level];\n    });\n  }\n}\nfunction enable() {\n  _getLoggerSettings().enabled = true;\n}\nfunction disable() {\n  _getLoggerSettings().enabled = false;\n}\nfunction isEnabled() {\n  return _getLoggerSettings().enabled;\n}\nfunction log() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  _maybeLog('log', ...args);\n}\nfunction warn() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  _maybeLog('warn', ...args);\n}\nfunction error() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  _maybeLog('error', ...args);\n}\nfunction _maybeLog(level) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n  if (!DEBUG_BUILD) {\n    return;\n  }\n  if (isEnabled()) {\n    consoleSandbox(() => {\n      GLOBAL_OBJ.console[level](`${PREFIX}[${level}]:`, ...args);\n    });\n  }\n}\nfunction _getLoggerSettings() {\n  if (!DEBUG_BUILD) {\n    return {\n      enabled: false\n    };\n  }\n  return getGlobalSingleton('loggerSettings', () => ({\n    enabled: false\n  }));\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n */\nconst debug = {\n  /** Enable logging. */\n  enable,\n  /** Disable logging. */\n  disable,\n  /** Check if logging is enabled. */\n  isEnabled,\n  /** Log a message. */\n  log,\n  /** Log a warning. */\n  warn,\n  /** Log an error. */\n  error\n};\nexport { CONSOLE_LEVELS, consoleSandbox, debug, originalConsoleMethods };","map":{"version":3,"names":["CONSOLE_LEVELS","PREFIX","originalConsoleMethods","consoleSandbox","callback","GLOBAL_OBJ","console","wrappedFuncs","wrappedLevels","Object","keys","forEach","level","originalConsoleMethod","enable","_getLoggerSettings","enabled","disable","isEnabled","log","_len","arguments","length","args","Array","_key","_maybeLog","warn","_len2","_key2","error","_len3","_key3","_len4","_key4","DEBUG_BUILD","getGlobalSingleton","debug"],"sources":["/workspace/node_modules/@sentry/core/src/utils/debug-logger.ts"],"sourcesContent":["import { getGlobalSingleton } from '../carrier';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport { GLOBAL_OBJ } from './worldwide';\n\nexport interface SentryDebugLogger {\n  disable(): void;\n  enable(): void;\n  isEnabled(): boolean;\n  log(...args: Parameters<typeof console.log>): void;\n  warn(...args: Parameters<typeof console.warn>): void;\n  error(...args: Parameters<typeof console.error>): void;\n}\n\nexport const CONSOLE_LEVELS: readonly ConsoleLevel[] = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] as const;\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** This may be mutated by the console instrumentation. */\nexport const originalConsoleMethods: Partial<{\n  log(...args: Parameters<typeof console.log>): void;\n  info(...args: Parameters<typeof console.info>): void;\n  warn(...args: Parameters<typeof console.warn>): void;\n  error(...args: Parameters<typeof console.error>): void;\n  debug(...args: Parameters<typeof console.debug>): void;\n  assert(...args: Parameters<typeof console.assert>): void;\n  trace(...args: Parameters<typeof console.trace>): void;\n}> = {};\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console as Console;\n  const wrappedFuncs: Partial<Record<ConsoleLevel, (...args: unknown[]) => void>> = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) as ConsoleLevel[];\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level];\n    wrappedFuncs[level] = console[level] as (...args: unknown[]) => void;\n    console[level] = originalConsoleMethod as (...args: unknown[]) => void;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] as (...args: unknown[]) => void;\n    });\n  }\n}\n\nfunction enable(): void {\n  _getLoggerSettings().enabled = true;\n}\n\nfunction disable(): void {\n  _getLoggerSettings().enabled = false;\n}\n\nfunction isEnabled(): boolean {\n  return _getLoggerSettings().enabled;\n}\n\nfunction log(...args: Parameters<typeof console.log>): void {\n  _maybeLog('log', ...args);\n}\n\nfunction info(...args: Parameters<typeof console.info>): void {\n  _maybeLog('info', ...args);\n}\n\nfunction warn(...args: Parameters<typeof console.warn>): void {\n  _maybeLog('warn', ...args);\n}\n\nfunction error(...args: Parameters<typeof console.error>): void {\n  _maybeLog('error', ...args);\n}\n\nfunction _maybeLog(level: ConsoleLevel, ...args: Parameters<(typeof console)[typeof level]>): void {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  if (isEnabled()) {\n    consoleSandbox(() => {\n      GLOBAL_OBJ.console[level](`${PREFIX}[${level}]:`, ...args);\n    });\n  }\n}\n\nfunction _getLoggerSettings(): { enabled: boolean } {\n  if (!DEBUG_BUILD) {\n    return { enabled: false };\n  }\n\n  return getGlobalSingleton('loggerSettings', () => ({ enabled: false }));\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n */\nexport const debug = {\n  /** Enable logging. */\n  enable,\n  /** Disable logging. */\n  disable,\n  /** Check if logging is enabled. */\n  isEnabled,\n  /** Log a message. */\n  log,\n  /** Log a warning. */\n  warn,\n  /** Log an error. */\n  error,\n} satisfies SentryDebugLogger;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}