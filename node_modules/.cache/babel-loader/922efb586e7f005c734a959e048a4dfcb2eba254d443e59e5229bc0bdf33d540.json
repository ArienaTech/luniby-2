{"ast":null,"code":"import { addBreadcrumb } from '../breadcrumbs.js';\nimport { getClient } from '../currentScopes.js';\nimport { addConsoleInstrumentationHandler } from '../instrument/console.js';\nimport { defineIntegration } from '../integration.js';\nimport { CONSOLE_LEVELS } from '../utils/debug-logger.js';\nimport { severityLevelFromString } from '../utils/severity.js';\nimport { safeJoin } from '../utils/string.js';\nimport { GLOBAL_OBJ } from '../utils/worldwide.js';\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Captures calls to the `console` API as breadcrumbs in Sentry.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```js\n * Sentry.init({\n *   integrations: [Sentry.consoleIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nconst consoleIntegration = defineIntegration(function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const levels = new Set(options.levels || CONSOLE_LEVELS);\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      addConsoleInstrumentationHandler(_ref => {\n        let {\n          args,\n          level\n        } = _ref;\n        if (getClient() !== client || !levels.has(level)) {\n          return;\n        }\n        addConsoleBreadcrumb(level, args);\n      });\n    }\n  };\n});\n\n/**\n * Capture a console breadcrumb.\n *\n * Exported just for tests.\n */\nfunction addConsoleBreadcrumb(level, args) {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: args,\n      logger: 'console'\n    },\n    level: severityLevelFromString(level),\n    message: formatConsoleArgs(args)\n  };\n  if (level === 'assert') {\n    if (args[0] === false) {\n      const assertionArgs = args.slice(1);\n      breadcrumb.message = assertionArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(assertionArgs)}` : 'Assertion failed';\n      breadcrumb.data.arguments = assertionArgs;\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n  addBreadcrumb(breadcrumb, {\n    input: args,\n    level\n  });\n}\nfunction formatConsoleArgs(values) {\n  return 'util' in GLOBAL_OBJ && typeof GLOBAL_OBJ.util.format === 'function' ? GLOBAL_OBJ.util.format(...values) : safeJoin(values, ' ');\n}\nexport { addConsoleBreadcrumb, consoleIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","consoleIntegration","defineIntegration","options","arguments","length","undefined","levels","Set","CONSOLE_LEVELS","name","setup","client","addConsoleInstrumentationHandler","_ref","args","level","getClient","has","addConsoleBreadcrumb","breadcrumb","category","data","logger","severityLevelFromString","message","formatConsoleArgs","assertionArgs","slice","addBreadcrumb","input","values","GLOBAL_OBJ","util","format","safeJoin"],"sources":["/workspace/node_modules/@sentry/core/src/integrations/console.ts"],"sourcesContent":["import { addBreadcrumb } from '../breadcrumbs';\nimport { getClient } from '../currentScopes';\nimport { addConsoleInstrumentationHandler } from '../instrument/console';\nimport { defineIntegration } from '../integration';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport { CONSOLE_LEVELS } from '../utils/debug-logger';\nimport { severityLevelFromString } from '../utils/severity';\nimport { safeJoin } from '../utils/string';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\n\ninterface ConsoleIntegrationOptions {\n  levels: ConsoleLevel[];\n}\n\ntype GlobalObjectWithUtil = typeof GLOBAL_OBJ & {\n  util: {\n    format: (...args: unknown[]) => string;\n  };\n};\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Captures calls to the `console` API as breadcrumbs in Sentry.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```js\n * Sentry.init({\n *   integrations: [Sentry.consoleIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nexport const consoleIntegration = defineIntegration((options: Partial<ConsoleIntegrationOptions> = {}) => {\n  const levels = new Set(options.levels || CONSOLE_LEVELS);\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.has(level)) {\n          return;\n        }\n\n        addConsoleBreadcrumb(level, args);\n      });\n    },\n  };\n});\n\n/**\n * Capture a console breadcrumb.\n *\n * Exported just for tests.\n */\nexport function addConsoleBreadcrumb(level: ConsoleLevel, args: unknown[]): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(level),\n    message: formatConsoleArgs(args),\n  };\n\n  if (level === 'assert') {\n    if (args[0] === false) {\n      const assertionArgs = args.slice(1);\n      breadcrumb.message =\n        assertionArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(assertionArgs)}` : 'Assertion failed';\n      breadcrumb.data.arguments = assertionArgs;\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  addBreadcrumb(breadcrumb, {\n    input: args,\n    level,\n  });\n}\n\nfunction formatConsoleArgs(values: unknown[]): string {\n  return 'util' in GLOBAL_OBJ && typeof (GLOBAL_OBJ as GlobalObjectWithUtil).util.format === 'function'\n    ? (GLOBAL_OBJ as GlobalObjectWithUtil).util.format(...values)\n    : safeJoin(values, ' ');\n}\n"],"mappings":";;;;;;;;AAoBA,MAAMA,gBAAA,GAAmB,SAAS;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,kBAAA,GAAqBC,iBAAiB,CAAC,YAAsD;EAAA,IAArDC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;EACnG,MAAMG,MAAA,GAAS,IAAIC,GAAG,CAACL,OAAO,CAACI,MAAA,IAAUE,cAAc,CAAC;EAExD,OAAO;IACLC,IAAI,EAAEV,gBAAgB;IACtBW,KAAKA,CAACC,MAAM,EAAE;MACZC,gCAAgC,CAACC,IAAA,IAAqB;QAAA,IAApB;UAAEC,IAAI;UAAEC;QAAA,CAAO,GAAAF,IAAA;QAC/C,IAAIG,SAAS,OAAOL,MAAA,IAAU,CAACL,MAAM,CAACW,GAAG,CAACF,KAAK,CAAC,EAAE;UAChD;QACV;QAEQG,oBAAoB,CAACH,KAAK,EAAED,IAAI,CAAC;MACzC,CAAO,CAAC;IACR;EACA,CAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACO,SAASI,oBAAoBA,CAACH,KAAK,EAAgBD,IAAI,EAAmB;EAC/E,MAAMK,UAAA,GAAa;IACjBC,QAAQ,EAAE,SAAS;IACnBC,IAAI,EAAE;MACJlB,SAAS,EAAEW,IAAI;MACfQ,MAAM,EAAE;IACd,CAAK;IACDP,KAAK,EAAEQ,uBAAuB,CAACR,KAAK,CAAC;IACrCS,OAAO,EAAEC,iBAAiB,CAACX,IAAI;EACnC,CAAG;EAED,IAAIC,KAAA,KAAU,QAAQ,EAAE;IACtB,IAAID,IAAI,CAAC,CAAC,MAAM,KAAK,EAAE;MACrB,MAAMY,aAAA,GAAgBZ,IAAI,CAACa,KAAK,CAAC,CAAC,CAAC;MACnCR,UAAU,CAACK,OAAA,GACTE,aAAa,CAACtB,MAAA,GAAS,IAAI,qBAAqBqB,iBAAiB,CAACC,aAAa,CAAC,EAAC;MACAP,UAAA,CAAAE,IAAA,CAAAlB,SAAA,GAAAuB,aAAA;IACA;MACA;MACA;IACA;EACA;EAEAE,aAAA,CAAAT,UAAA;IACAU,KAAA,EAAAf,IAAA;IACAC;EACA;AACA;AAEA,SAAAU,kBAAAK,MAAA;EACA,iBAAAC,UAAA,WAAAA,UAAA,CAAAC,IAAA,CAAAC,MAAA,kBACAF,UAAA,CAAAC,IAAA,CAAAC,MAAA,IAAAH,MAAA,IACAI,QAAA,CAAAJ,MAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}