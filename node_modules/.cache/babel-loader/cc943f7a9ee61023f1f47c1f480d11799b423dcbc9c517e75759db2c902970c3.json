{"ast":null,"code":"// Performance monitoring utilities\nclass PerformanceMonitor{constructor(){this.metrics=new Map();this.marks=new Map();}// Start measuring performance\nstartMeasure(name){if('performance'in window&&'mark'in window.performance){window.performance.mark(`${name}-start`);this.marks.set(name,Date.now());}}// End measuring performance\nendMeasure(name){if('performance'in window&&'mark'in window.performance){window.performance.mark(`${name}-end`);try{window.performance.measure(name,`${name}-start`,`${name}-end`);const measure=window.performance.getEntriesByName(name)[0];if(measure){this.metrics.set(name,measure.duration);console.log(`⏱️ ${name}: ${measure.duration.toFixed(2)}ms`);// Clean up marks\nwindow.performance.clearMarks(`${name}-start`);window.performance.clearMarks(`${name}-end`);window.performance.clearMeasures(name);}}catch(error){console.warn('Performance measurement error:',error);}}// Fallback timing\nif(this.marks.has(name)){const duration=Date.now()-this.marks.get(name);this.metrics.set(name,duration);console.log(`⏱️ ${name}: ${duration}ms (fallback)`);this.marks.delete(name);}}// Get metric\ngetMetric(name){return this.metrics.get(name)||0;}// Get all metrics\ngetAllMetrics(){return Object.fromEntries(this.metrics);}// Clear metrics\nclearMetrics(){this.metrics.clear();this.marks.clear();}// Log page load performance\nlogPageLoad(){if('performance'in window&&'timing'in window.performance){const timing=window.performance.timing;const metrics={'DNS Lookup':timing.domainLookupEnd-timing.domainLookupStart,'TCP Connection':timing.connectEnd-timing.connectStart,'Request':timing.responseStart-timing.requestStart,'Response':timing.responseEnd-timing.responseStart,'DOM Processing':timing.domComplete-timing.domLoading,'Total Load Time':timing.loadEventEnd-timing.navigationStart};console.log('📊 Page Load Performance:',metrics);return metrics;}return{};}// Monitor component render\nmonitorRender(componentName,callback){this.startMeasure(`${componentName}-render`);const result=callback();this.endMeasure(`${componentName}-render`);return result;}// Get memory usage (if available)\ngetMemoryUsage(){if('memory'in performance){return{usedJSHeapSize:(performance.memory.usedJSHeapSize/1048576).toFixed(2)+' MB',totalJSHeapSize:(performance.memory.totalJSHeapSize/1048576).toFixed(2)+' MB',jsHeapSizeLimit:(performance.memory.jsHeapSizeLimit/1048576).toFixed(2)+' MB'};}return null;}// Report performance to console\nreport(){console.log('📊 Performance Report:');console.table(this.getAllMetrics());const memory=this.getMemoryUsage();if(memory){console.log('💾 Memory Usage:',memory);}}}// Create singleton instance\nconst performanceMonitor=new PerformanceMonitor();// Make available globally for debugging\nif(typeof window!=='undefined'){window.performanceMonitor=performanceMonitor;}// Export utilities\nexport const startMeasure=name=>performanceMonitor.startMeasure(name);export const endMeasure=name=>performanceMonitor.endMeasure(name);export const getMetric=name=>performanceMonitor.getMetric(name);export const getAllMetrics=()=>performanceMonitor.getAllMetrics();export const clearMetrics=()=>performanceMonitor.clearMetrics();export const logPageLoad=()=>performanceMonitor.logPageLoad();export const monitorRender=(name,callback)=>performanceMonitor.monitorRender(name,callback);export const getMemoryUsage=()=>performanceMonitor.getMemoryUsage();export const report=()=>performanceMonitor.report();export default performanceMonitor;","map":{"version":3,"names":["PerformanceMonitor","constructor","metrics","Map","marks","startMeasure","name","window","performance","mark","set","Date","now","endMeasure","measure","getEntriesByName","duration","console","log","toFixed","clearMarks","clearMeasures","error","warn","has","get","delete","getMetric","getAllMetrics","Object","fromEntries","clearMetrics","clear","logPageLoad","timing","domainLookupEnd","domainLookupStart","connectEnd","connectStart","responseStart","requestStart","responseEnd","domComplete","domLoading","loadEventEnd","navigationStart","monitorRender","componentName","callback","result","getMemoryUsage","usedJSHeapSize","memory","totalJSHeapSize","jsHeapSizeLimit","report","table","performanceMonitor"],"sources":["/workspace/src/utils/performanceMonitor.js"],"sourcesContent":["// Performance monitoring utilities\n\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = new Map();\n    this.marks = new Map();\n  }\n\n  // Start measuring performance\n  startMeasure(name) {\n    if ('performance' in window && 'mark' in window.performance) {\n      window.performance.mark(`${name}-start`);\n      this.marks.set(name, Date.now());\n    }\n  }\n\n  // End measuring performance\n  endMeasure(name) {\n    if ('performance' in window && 'mark' in window.performance) {\n      window.performance.mark(`${name}-end`);\n      \n      try {\n        window.performance.measure(name, `${name}-start`, `${name}-end`);\n        \n        const measure = window.performance.getEntriesByName(name)[0];\n        if (measure) {\n          this.metrics.set(name, measure.duration);\n          console.log(`⏱️ ${name}: ${measure.duration.toFixed(2)}ms`);\n          \n          // Clean up marks\n          window.performance.clearMarks(`${name}-start`);\n          window.performance.clearMarks(`${name}-end`);\n          window.performance.clearMeasures(name);\n        }\n      } catch (error) {\n        console.warn('Performance measurement error:', error);\n      }\n    }\n    \n    // Fallback timing\n    if (this.marks.has(name)) {\n      const duration = Date.now() - this.marks.get(name);\n      this.metrics.set(name, duration);\n      console.log(`⏱️ ${name}: ${duration}ms (fallback)`);\n      this.marks.delete(name);\n    }\n  }\n\n  // Get metric\n  getMetric(name) {\n    return this.metrics.get(name) || 0;\n  }\n\n  // Get all metrics\n  getAllMetrics() {\n    return Object.fromEntries(this.metrics);\n  }\n\n  // Clear metrics\n  clearMetrics() {\n    this.metrics.clear();\n    this.marks.clear();\n  }\n\n  // Log page load performance\n  logPageLoad() {\n    if ('performance' in window && 'timing' in window.performance) {\n      const timing = window.performance.timing;\n      const metrics = {\n        'DNS Lookup': timing.domainLookupEnd - timing.domainLookupStart,\n        'TCP Connection': timing.connectEnd - timing.connectStart,\n        'Request': timing.responseStart - timing.requestStart,\n        'Response': timing.responseEnd - timing.responseStart,\n        'DOM Processing': timing.domComplete - timing.domLoading,\n        'Total Load Time': timing.loadEventEnd - timing.navigationStart\n      };\n\n      console.log('📊 Page Load Performance:', metrics);\n      return metrics;\n    }\n    return {};\n  }\n\n  // Monitor component render\n  monitorRender(componentName, callback) {\n    this.startMeasure(`${componentName}-render`);\n    const result = callback();\n    this.endMeasure(`${componentName}-render`);\n    return result;\n  }\n\n  // Get memory usage (if available)\n  getMemoryUsage() {\n    if ('memory' in performance) {\n      return {\n        usedJSHeapSize: (performance.memory.usedJSHeapSize / 1048576).toFixed(2) + ' MB',\n        totalJSHeapSize: (performance.memory.totalJSHeapSize / 1048576).toFixed(2) + ' MB',\n        jsHeapSizeLimit: (performance.memory.jsHeapSizeLimit / 1048576).toFixed(2) + ' MB'\n      };\n    }\n    return null;\n  }\n\n  // Report performance to console\n  report() {\n    console.log('📊 Performance Report:');\n    console.table(this.getAllMetrics());\n    \n    const memory = this.getMemoryUsage();\n    if (memory) {\n      console.log('💾 Memory Usage:', memory);\n    }\n  }\n}\n\n// Create singleton instance\nconst performanceMonitor = new PerformanceMonitor();\n\n// Make available globally for debugging\nif (typeof window !== 'undefined') {\n  window.performanceMonitor = performanceMonitor;\n}\n\n// Export utilities\nexport const startMeasure = (name) => performanceMonitor.startMeasure(name);\nexport const endMeasure = (name) => performanceMonitor.endMeasure(name);\nexport const getMetric = (name) => performanceMonitor.getMetric(name);\nexport const getAllMetrics = () => performanceMonitor.getAllMetrics();\nexport const clearMetrics = () => performanceMonitor.clearMetrics();\nexport const logPageLoad = () => performanceMonitor.logPageLoad();\nexport const monitorRender = (name, callback) => performanceMonitor.monitorRender(name, callback);\nexport const getMemoryUsage = () => performanceMonitor.getMemoryUsage();\nexport const report = () => performanceMonitor.report();\n\nexport default performanceMonitor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}