{"ast":null,"code":"// Notification service\nimport{supabase}from'../lib/supabase';import{handleSupabaseError}from'../lib/supabase-utils';const notificationService={// Get user notifications\nasync getUserNotifications(userId){try{const{data,error}=await supabase.from('notifications').select('*').eq('user_id',userId).order('created_at',{ascending:false}).limit(50);if(error){return{success:false,error:handleSupabaseError(error),data:[]};}return{success:true,data:data||[]};}catch(error){return{success:false,error:handleSupabaseError(error),data:[]};}},// Create a notification\nasync createNotification(notificationData){try{const{data,error}=await supabase.from('notifications').insert([{...notificationData,read:false,created_at:new Date().toISOString()}]).select().single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Mark notification as read\nasync markAsRead(notificationId){try{const{data,error}=await supabase.from('notifications').update({read:true}).eq('id',notificationId).select().single();if(error){return{success:false,error:handleSupabaseError(error)};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error)};}},// Mark all notifications as read\nasync markAllAsRead(userId){try{const{error}=await supabase.from('notifications').update({read:true}).eq('user_id',userId).eq('read',false);if(error){return{success:false,error:handleSupabaseError(error)};}return{success:true};}catch(error){return{success:false,error:handleSupabaseError(error)};}},// Delete a notification\nasync deleteNotification(notificationId){try{const{error}=await supabase.from('notifications').delete().eq('id',notificationId);if(error){return{success:false,error:handleSupabaseError(error)};}return{success:true};}catch(error){return{success:false,error:handleSupabaseError(error)};}},// Get unread count\nasync getUnreadCount(userId){try{const{count,error}=await supabase.from('notifications').select('*',{count:'exact',head:true}).eq('user_id',userId).eq('read',false);if(error){return{success:false,error:handleSupabaseError(error),count:0};}return{success:true,count:count||0};}catch(error){return{success:false,error:handleSupabaseError(error),count:0};}}};export default notificationService;","map":{"version":3,"names":["supabase","handleSupabaseError","notificationService","getUserNotifications","userId","data","error","from","select","eq","order","ascending","limit","success","createNotification","notificationData","insert","read","created_at","Date","toISOString","single","markAsRead","notificationId","update","markAllAsRead","deleteNotification","delete","getUnreadCount","count","head"],"sources":["/workspace/src/services/notificationService.js"],"sourcesContent":["// Notification service\nimport { supabase } from '../lib/supabase';\nimport { handleSupabaseError } from '../lib/supabase-utils';\n\nconst notificationService = {\n  // Get user notifications\n  async getUserNotifications(userId) {\n    try {\n      const { data, error } = await supabase\n        .from('notifications')\n        .select('*')\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false })\n        .limit(50);\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: [] };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: [] };\n    }\n  },\n\n  // Create a notification\n  async createNotification(notificationData) {\n    try {\n      const { data, error } = await supabase\n        .from('notifications')\n        .insert([{\n          ...notificationData,\n          read: false,\n          created_at: new Date().toISOString()\n        }])\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Mark notification as read\n  async markAsRead(notificationId) {\n    try {\n      const { data, error } = await supabase\n        .from('notifications')\n        .update({ read: true })\n        .eq('id', notificationId)\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error) };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error) };\n    }\n  },\n\n  // Mark all notifications as read\n  async markAllAsRead(userId) {\n    try {\n      const { error } = await supabase\n        .from('notifications')\n        .update({ read: true })\n        .eq('user_id', userId)\n        .eq('read', false);\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error) };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error) };\n    }\n  },\n\n  // Delete a notification\n  async deleteNotification(notificationId) {\n    try {\n      const { error } = await supabase\n        .from('notifications')\n        .delete()\n        .eq('id', notificationId);\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error) };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error) };\n    }\n  },\n\n  // Get unread count\n  async getUnreadCount(userId) {\n    try {\n      const { count, error } = await supabase\n        .from('notifications')\n        .select('*', { count: 'exact', head: true })\n        .eq('user_id', userId)\n        .eq('read', false);\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), count: 0 };\n      }\n\n      return { success: true, count: count || 0 };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), count: 0 };\n    }\n  }\n};\n\nexport default notificationService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}