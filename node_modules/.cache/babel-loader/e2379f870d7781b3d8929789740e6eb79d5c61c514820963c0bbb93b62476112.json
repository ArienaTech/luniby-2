{"ast":null,"code":"import React from'react';import ReactDOM from'react-dom/client';import*as Sentry from\"@sentry/react\";import'./index.css';import App from'./App';import'./utils/cacheCleanup';// Import cache cleanup utilities\n// Initialize Sentry - use the centralized configuration from lib/sentry\n// Just import it to trigger initialization\nimport'./lib/sentry';import{jsx as _jsx}from\"react/jsx-runtime\";const root=ReactDOM.createRoot(document.getElementById('root'));root.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(App,{})}));// Register service worker for performance optimization\nif('serviceWorker'in navigator){window.addEventListener('load',()=>{navigator.serviceWorker.register('/sw.js').then(registration=>{console.log('✅ Service Worker registered successfully:',registration.scope);// Listen for updates\nregistration.addEventListener('updatefound',()=>{const newWorker=registration.installing;newWorker.addEventListener('statechange',()=>{if(newWorker.state==='installed'&&navigator.serviceWorker.controller){console.log('🔄 New Service Worker available, will update on next visit');}});});}).catch(error=>{console.log('❌ Service Worker registration failed:',error);});// Listen for messages from service worker\nnavigator.serviceWorker.addEventListener('message',event=>{if(event.data.type==='CACHE_UPDATED'){console.log('🔄 Cache updated by Service Worker');// Optionally reload the page to get fresh content\n// window.location.reload();\n}});});// Add global cache clearing function for debugging\nwindow.clearServiceWorkerCache=async()=>{if('serviceWorker'in navigator&&navigator.serviceWorker.controller){const messageChannel=new MessageChannel();return new Promise(resolve=>{messageChannel.port1.onmessage=event=>{if(event.data.success){console.log('✅ Service Worker cache cleared successfully');console.log('🔄 Reloading page to get fresh content...');window.location.reload();resolve(true);}};navigator.serviceWorker.controller.postMessage({type:'CLEAR_CACHE'},[messageChannel.port2]);});}else{console.log('❌ No Service Worker controller available');return false;}};// Legacy emergency cache clear function (kept for compatibility)\nwindow.emergencyClearCache=async()=>{console.log('🚨 Emergency cache clear initiated...');console.log('ℹ️  Note: Using legacy method. Consider using clearAllCaches() for better results.');// Clear all caches manually\nif('caches'in window){const cacheNames=await caches.keys();await Promise.all(cacheNames.map(cacheName=>{console.log('🗑️ Deleting cache:',cacheName);return caches.delete(cacheName);}));}// Unregister service worker\nif('serviceWorker'in navigator){const registrations=await navigator.serviceWorker.getRegistrations();await Promise.all(registrations.map(registration=>{console.log('🗑️ Unregistering service worker');return registration.unregister();}));}console.log('✅ Emergency cache clear completed. Reloading page...');window.location.reload();};// Cache prevention strategies with proper cleanup\nconst initCachePrevention=()=>{let cacheMonitorInterval=null;let maintenanceTimeout=null;let initialCheckTimeout=null;// Monitor cache size and warn if it gets too large\nconst checkCacheSize=async()=>{try{// Check storage quota first\nif(window.checkStorageQuota){await window.checkStorageQuota();}if(window.getCacheInfo){const info=await window.getCacheInfo();const totalCacheItems=info.serviceWorker.caches.length+info.indexedDB.databases.length+info.localStorage.cacheItems.length+info.sessionStorage.itemCount+info.memory.advancedCache+info.memory.requestDeduplicator.pendingRequests+info.memory.requestDeduplicator.cachedRequests;if(totalCacheItems>100){console.warn('⚠️ High cache usage detected:',totalCacheItems,'items');console.warn('💡 Consider running clearAllCaches() to improve performance');// Auto-optimize if usage is very high\nif(totalCacheItems>200&&window.optimizeAllCaches){console.log('🔧 Auto-optimizing caches due to high usage...');await window.optimizeAllCaches();}}}}catch(error){console.error('Error checking cache size:',error);}};// Check cache size periodically\ncacheMonitorInterval=setInterval(checkCacheSize,30*60*1000);// Every 30 minutes\n// Check cache size on page load\ninitialCheckTimeout=setTimeout(checkCacheSize,5000);// After 5 seconds\n// Automatically clean up old caches on app start\nmaintenanceTimeout=setTimeout(async()=>{try{if(window.clearSpecificCache){// Clean up expired items without clearing everything\nconsole.log('🧹 Running automatic cache maintenance...');// Clear sessionStorage (temporary data)\nsessionStorage.clear();// The advancedCache already has automatic cleanup, but we can trigger it\nif(window.advancedCache&&window.advancedCache.cleanup){await window.advancedCache.cleanup();}console.log('✅ Automatic cache maintenance completed');}}catch(error){console.error('Error during automatic cache maintenance:',error);}},10000);// After 10 seconds\n// Cleanup function to prevent memory leaks\nconst cleanup=()=>{if(cacheMonitorInterval){clearInterval(cacheMonitorInterval);cacheMonitorInterval=null;}if(maintenanceTimeout){clearTimeout(maintenanceTimeout);maintenanceTimeout=null;}if(initialCheckTimeout){clearTimeout(initialCheckTimeout);initialCheckTimeout=null;}};// Register cleanup on page unload\nwindow.addEventListener('beforeunload',cleanup);window.addEventListener('pagehide',cleanup);// Return cleanup function for manual cleanup if needed\nreturn cleanup;};// Initialize cache prevention strategies\nconst cacheCleanup=initCachePrevention();// Make cleanup available globally for debugging\nwindow.cleanupCacheMonitoring=cacheCleanup;}","map":{"version":3,"names":["React","ReactDOM","Sentry","App","jsx","_jsx","root","createRoot","document","getElementById","render","StrictMode","children","navigator","window","addEventListener","serviceWorker","register","then","registration","console","log","scope","newWorker","installing","state","controller","catch","error","event","data","type","clearServiceWorkerCache","messageChannel","MessageChannel","Promise","resolve","port1","onmessage","success","location","reload","postMessage","port2","emergencyClearCache","cacheNames","caches","keys","all","map","cacheName","delete","registrations","getRegistrations","unregister","initCachePrevention","cacheMonitorInterval","maintenanceTimeout","initialCheckTimeout","checkCacheSize","checkStorageQuota","getCacheInfo","info","totalCacheItems","length","indexedDB","databases","localStorage","cacheItems","sessionStorage","itemCount","memory","advancedCache","requestDeduplicator","pendingRequests","cachedRequests","warn","optimizeAllCaches","setInterval","setTimeout","clearSpecificCache","clear","cleanup","clearInterval","clearTimeout","cacheCleanup","cleanupCacheMonitoring"],"sources":["/workspace/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport * as Sentry from \"@sentry/react\";\nimport './index.css';\nimport App from './App';\nimport './utils/cacheCleanup'; // Import cache cleanup utilities\n\n// Initialize Sentry - use the centralized configuration from lib/sentry\n// Just import it to trigger initialization\nimport './lib/sentry';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// Register service worker for performance optimization\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/sw.js')\n      .then((registration) => {\n        console.log('✅ Service Worker registered successfully:', registration.scope);\n        \n        // Listen for updates\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          newWorker.addEventListener('statechange', () => {\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              console.log('🔄 New Service Worker available, will update on next visit');\n            }\n          });\n        });\n      })\n      .catch((error) => {\n        console.log('❌ Service Worker registration failed:', error);\n      });\n      \n    // Listen for messages from service worker\n    navigator.serviceWorker.addEventListener('message', (event) => {\n      if (event.data.type === 'CACHE_UPDATED') {\n        console.log('🔄 Cache updated by Service Worker');\n        // Optionally reload the page to get fresh content\n        // window.location.reload();\n      }\n    });\n  });\n  \n  // Add global cache clearing function for debugging\n  window.clearServiceWorkerCache = async () => {\n    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n      const messageChannel = new MessageChannel();\n      \n      return new Promise((resolve) => {\n        messageChannel.port1.onmessage = (event) => {\n          if (event.data.success) {\n            console.log('✅ Service Worker cache cleared successfully');\n            console.log('🔄 Reloading page to get fresh content...');\n            window.location.reload();\n            resolve(true);\n          }\n        };\n        \n        navigator.serviceWorker.controller.postMessage(\n          { type: 'CLEAR_CACHE' },\n          [messageChannel.port2]\n        );\n      });\n    } else {\n      console.log('❌ No Service Worker controller available');\n      return false;\n    }\n  };\n  \n  // Legacy emergency cache clear function (kept for compatibility)\n  window.emergencyClearCache = async () => {\n    console.log('🚨 Emergency cache clear initiated...');\n    console.log('ℹ️  Note: Using legacy method. Consider using clearAllCaches() for better results.');\n    \n    // Clear all caches manually\n    if ('caches' in window) {\n      const cacheNames = await caches.keys();\n      await Promise.all(\n        cacheNames.map(cacheName => {\n          console.log('🗑️ Deleting cache:', cacheName);\n          return caches.delete(cacheName);\n        })\n      );\n    }\n    \n    // Unregister service worker\n    if ('serviceWorker' in navigator) {\n      const registrations = await navigator.serviceWorker.getRegistrations();\n      await Promise.all(\n        registrations.map(registration => {\n          console.log('🗑️ Unregistering service worker');\n          return registration.unregister();\n        })\n      );\n    }\n    \n    console.log('✅ Emergency cache clear completed. Reloading page...');\n    window.location.reload();\n  };\n\n  // Cache prevention strategies with proper cleanup\n  const initCachePrevention = () => {\n    let cacheMonitorInterval = null;\n    let maintenanceTimeout = null;\n    let initialCheckTimeout = null;\n\n    // Monitor cache size and warn if it gets too large\n    const checkCacheSize = async () => {\n      try {\n        // Check storage quota first\n        if (window.checkStorageQuota) {\n          await window.checkStorageQuota();\n        }\n\n        if (window.getCacheInfo) {\n          const info = await window.getCacheInfo();\n          const totalCacheItems = \n            info.serviceWorker.caches.length +\n            info.indexedDB.databases.length +\n            info.localStorage.cacheItems.length +\n            info.sessionStorage.itemCount +\n            info.memory.advancedCache +\n            info.memory.requestDeduplicator.pendingRequests +\n            info.memory.requestDeduplicator.cachedRequests;\n          \n          if (totalCacheItems > 100) {\n            console.warn('⚠️ High cache usage detected:', totalCacheItems, 'items');\n            console.warn('💡 Consider running clearAllCaches() to improve performance');\n            \n            // Auto-optimize if usage is very high\n            if (totalCacheItems > 200 && window.optimizeAllCaches) {\n              console.log('🔧 Auto-optimizing caches due to high usage...');\n              await window.optimizeAllCaches();\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error checking cache size:', error);\n      }\n    };\n\n    // Check cache size periodically\n    cacheMonitorInterval = setInterval(checkCacheSize, 30 * 60 * 1000); // Every 30 minutes\n    \n    // Check cache size on page load\n    initialCheckTimeout = setTimeout(checkCacheSize, 5000); // After 5 seconds\n\n    // Automatically clean up old caches on app start\n    maintenanceTimeout = setTimeout(async () => {\n      try {\n        if (window.clearSpecificCache) {\n          // Clean up expired items without clearing everything\n          console.log('🧹 Running automatic cache maintenance...');\n          \n          // Clear sessionStorage (temporary data)\n          sessionStorage.clear();\n          \n          // The advancedCache already has automatic cleanup, but we can trigger it\n          if (window.advancedCache && window.advancedCache.cleanup) {\n            await window.advancedCache.cleanup();\n          }\n          \n          console.log('✅ Automatic cache maintenance completed');\n        }\n      } catch (error) {\n        console.error('Error during automatic cache maintenance:', error);\n      }\n    }, 10000); // After 10 seconds\n\n    // Cleanup function to prevent memory leaks\n    const cleanup = () => {\n      if (cacheMonitorInterval) {\n        clearInterval(cacheMonitorInterval);\n        cacheMonitorInterval = null;\n      }\n      if (maintenanceTimeout) {\n        clearTimeout(maintenanceTimeout);\n        maintenanceTimeout = null;\n      }\n      if (initialCheckTimeout) {\n        clearTimeout(initialCheckTimeout);\n        initialCheckTimeout = null;\n      }\n    };\n\n    // Register cleanup on page unload\n    window.addEventListener('beforeunload', cleanup);\n    window.addEventListener('pagehide', cleanup);\n\n    // Return cleanup function for manual cleanup if needed\n    return cleanup;\n  };\n\n  // Initialize cache prevention strategies\n  const cacheCleanup = initCachePrevention();\n\n  // Make cleanup available globally for debugging\n  window.cleanupCacheMonitoring = cacheCleanup;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}