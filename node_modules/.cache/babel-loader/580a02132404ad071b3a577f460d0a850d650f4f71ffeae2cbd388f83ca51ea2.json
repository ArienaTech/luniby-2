{"ast":null,"code":"// Payment processing service\nconst paymentService={// Process payment\nasync processPayment(paymentData){try{// Mock payment processing\n// In production, this would integrate with Stripe, PayPal, etc.\nreturn{success:true,data:{transactionId:`txn_${Date.now()}`,status:'completed',amount:paymentData.amount,currency:paymentData.currency||'NZD'}};}catch(error){return{success:false,error:error.message||'Payment processing failed'};}},// Get payment history\nasync getPaymentHistory(userId){try{// Mock payment history\nreturn{success:true,data:[]};}catch(error){return{success:false,error:error.message||'Failed to get payment history',data:[]};}},// Refund payment\nasync refundPayment(transactionId){try{// Mock refund\nreturn{success:true,data:{transactionId,status:'refunded'}};}catch(error){return{success:false,error:error.message||'Refund failed'};}}};export default paymentService;","map":{"version":3,"names":["paymentService","processPayment","paymentData","success","data","transactionId","Date","now","status","amount","currency","error","message","getPaymentHistory","userId","refundPayment"],"sources":["/workspace/src/services/paymentService.js"],"sourcesContent":["// Payment processing service\nconst paymentService = {\n  // Process payment\n  async processPayment(paymentData) {\n    try {\n      // Mock payment processing\n      // In production, this would integrate with Stripe, PayPal, etc.\n      return {\n        success: true,\n        data: {\n          transactionId: `txn_${Date.now()}`,\n          status: 'completed',\n          amount: paymentData.amount,\n          currency: paymentData.currency || 'NZD'\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Payment processing failed'\n      };\n    }\n  },\n\n  // Get payment history\n  async getPaymentHistory(userId) {\n    try {\n      // Mock payment history\n      return {\n        success: true,\n        data: []\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Failed to get payment history',\n        data: []\n      };\n    }\n  },\n\n  // Refund payment\n  async refundPayment(transactionId) {\n    try {\n      // Mock refund\n      return {\n        success: true,\n        data: {\n          transactionId,\n          status: 'refunded'\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Refund failed'\n      };\n    }\n  }\n};\n\nexport default paymentService;\n"],"mappings":"AAAA;AACA,KAAM,CAAAA,cAAc,CAAG,CACrB;AACA,KAAM,CAAAC,cAAcA,CAACC,WAAW,CAAE,CAChC,GAAI,CACF;AACA;AACA,MAAO,CACLC,OAAO,CAAE,IAAI,CACbC,IAAI,CAAE,CACJC,aAAa,CAAE,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAClCC,MAAM,CAAE,WAAW,CACnBC,MAAM,CAAEP,WAAW,CAACO,MAAM,CAC1BC,QAAQ,CAAER,WAAW,CAACQ,QAAQ,EAAI,KACpC,CACF,CAAC,CACH,CAAE,MAAOC,KAAK,CAAE,CACd,MAAO,CACLR,OAAO,CAAE,KAAK,CACdQ,KAAK,CAAEA,KAAK,CAACC,OAAO,EAAI,2BAC1B,CAAC,CACH,CACF,CAAC,CAED;AACA,KAAM,CAAAC,iBAAiBA,CAACC,MAAM,CAAE,CAC9B,GAAI,CACF;AACA,MAAO,CACLX,OAAO,CAAE,IAAI,CACbC,IAAI,CAAE,EACR,CAAC,CACH,CAAE,MAAOO,KAAK,CAAE,CACd,MAAO,CACLR,OAAO,CAAE,KAAK,CACdQ,KAAK,CAAEA,KAAK,CAACC,OAAO,EAAI,+BAA+B,CACvDR,IAAI,CAAE,EACR,CAAC,CACH,CACF,CAAC,CAED;AACA,KAAM,CAAAW,aAAaA,CAACV,aAAa,CAAE,CACjC,GAAI,CACF;AACA,MAAO,CACLF,OAAO,CAAE,IAAI,CACbC,IAAI,CAAE,CACJC,aAAa,CACbG,MAAM,CAAE,UACV,CACF,CAAC,CACH,CAAE,MAAOG,KAAK,CAAE,CACd,MAAO,CACLR,OAAO,CAAE,KAAK,CACdQ,KAAK,CAAEA,KAAK,CAACC,OAAO,EAAI,eAC1B,CAAC,CACH,CACF,CACF,CAAC,CAED,cAAe,CAAAZ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}