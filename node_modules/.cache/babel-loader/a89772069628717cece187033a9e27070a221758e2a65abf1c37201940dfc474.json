{"ast":null,"code":"import { MCP_PROMPT_NAME_ATTRIBUTE, MCP_RESOURCE_URI_ATTRIBUTE, MCP_TOOL_NAME_ATTRIBUTE, MCP_REQUEST_ARGUMENT } from './attributes.js';\n\n/**\n * Method configuration and request processing for MCP server instrumentation\n */\n\n/**\n * Configuration for MCP methods to extract targets and arguments\n * @internal Maps method names to their extraction configuration\n */\nconst METHOD_CONFIGS = {\n  'tools/call': {\n    targetField: 'name',\n    targetAttribute: MCP_TOOL_NAME_ATTRIBUTE,\n    captureArguments: true,\n    argumentsField: 'arguments'\n  },\n  'resources/read': {\n    targetField: 'uri',\n    targetAttribute: MCP_RESOURCE_URI_ATTRIBUTE,\n    captureUri: true\n  },\n  'resources/subscribe': {\n    targetField: 'uri',\n    targetAttribute: MCP_RESOURCE_URI_ATTRIBUTE\n  },\n  'resources/unsubscribe': {\n    targetField: 'uri',\n    targetAttribute: MCP_RESOURCE_URI_ATTRIBUTE\n  },\n  'prompts/get': {\n    targetField: 'name',\n    targetAttribute: MCP_PROMPT_NAME_ATTRIBUTE,\n    captureName: true,\n    captureArguments: true,\n    argumentsField: 'arguments'\n  }\n};\n\n/**\n * Extracts target info from method and params based on method type\n * @param method - MCP method name\n * @param params - Method parameters\n * @returns Target name and attributes for span instrumentation\n */\nfunction extractTargetInfo(method, params) {\n  const config = METHOD_CONFIGS[method];\n  if (!config) {\n    return {\n      attributes: {}\n    };\n  }\n  const target = config.targetField && typeof params?.[config.targetField] === 'string' ? params[config.targetField] : undefined;\n  return {\n    target,\n    attributes: target && config.targetAttribute ? {\n      [config.targetAttribute]: target\n    } : {}\n  };\n}\n\n/**\n * Extracts request arguments based on method type\n * @param method - MCP method name\n * @param params - Method parameters\n * @returns Arguments as span attributes with mcp.request.argument prefix\n */\nfunction getRequestArguments(method, params) {\n  const args = {};\n  const config = METHOD_CONFIGS[method];\n  if (!config) {\n    return args;\n  }\n  if (config.captureArguments && config.argumentsField && params?.[config.argumentsField]) {\n    const argumentsObj = params[config.argumentsField];\n    if (typeof argumentsObj === 'object' && argumentsObj !== null) {\n      for (const [key, value] of Object.entries(argumentsObj)) {\n        args[`${MCP_REQUEST_ARGUMENT}.${key.toLowerCase()}`] = JSON.stringify(value);\n      }\n    }\n  }\n  if (config.captureUri && params?.uri) {\n    args[`${MCP_REQUEST_ARGUMENT}.uri`] = JSON.stringify(params.uri);\n  }\n  if (config.captureName && params?.name) {\n    args[`${MCP_REQUEST_ARGUMENT}.name`] = JSON.stringify(params.name);\n  }\n  return args;\n}\nexport { extractTargetInfo, getRequestArguments };","map":{"version":3,"names":["METHOD_CONFIGS","targetField","targetAttribute","MCP_TOOL_NAME_ATTRIBUTE","captureArguments","argumentsField","MCP_RESOURCE_URI_ATTRIBUTE","captureUri","MCP_PROMPT_NAME_ATTRIBUTE","captureName","extractTargetInfo","method","params","config","attributes","target","undefined","getRequestArguments","args","argumentsObj","key","value","Object","entries","MCP_REQUEST_ARGUMENT","toLowerCase","JSON","stringify","uri","name"],"sources":["/workspace/node_modules/@sentry/core/src/integrations/mcp-server/methodConfig.ts"],"sourcesContent":["/**\n * Method configuration and request processing for MCP server instrumentation\n */\n\nimport {\n  MCP_PROMPT_NAME_ATTRIBUTE,\n  MCP_REQUEST_ARGUMENT,\n  MCP_RESOURCE_URI_ATTRIBUTE,\n  MCP_TOOL_NAME_ATTRIBUTE,\n} from './attributes';\nimport type { MethodConfig } from './types';\n\n/**\n * Configuration for MCP methods to extract targets and arguments\n * @internal Maps method names to their extraction configuration\n */\nconst METHOD_CONFIGS: Record<string, MethodConfig> = {\n  'tools/call': {\n    targetField: 'name',\n    targetAttribute: MCP_TOOL_NAME_ATTRIBUTE,\n    captureArguments: true,\n    argumentsField: 'arguments',\n  },\n  'resources/read': {\n    targetField: 'uri',\n    targetAttribute: MCP_RESOURCE_URI_ATTRIBUTE,\n    captureUri: true,\n  },\n  'resources/subscribe': {\n    targetField: 'uri',\n    targetAttribute: MCP_RESOURCE_URI_ATTRIBUTE,\n  },\n  'resources/unsubscribe': {\n    targetField: 'uri',\n    targetAttribute: MCP_RESOURCE_URI_ATTRIBUTE,\n  },\n  'prompts/get': {\n    targetField: 'name',\n    targetAttribute: MCP_PROMPT_NAME_ATTRIBUTE,\n    captureName: true,\n    captureArguments: true,\n    argumentsField: 'arguments',\n  },\n};\n\n/**\n * Extracts target info from method and params based on method type\n * @param method - MCP method name\n * @param params - Method parameters\n * @returns Target name and attributes for span instrumentation\n */\nexport function extractTargetInfo(\n  method: string,\n  params: Record<string, unknown>,\n): {\n  target?: string;\n  attributes: Record<string, string>;\n} {\n  const config = METHOD_CONFIGS[method as keyof typeof METHOD_CONFIGS];\n  if (!config) {\n    return { attributes: {} };\n  }\n\n  const target =\n    config.targetField && typeof params?.[config.targetField] === 'string'\n      ? (params[config.targetField] as string)\n      : undefined;\n\n  return {\n    target,\n    attributes: target && config.targetAttribute ? { [config.targetAttribute]: target } : {},\n  };\n}\n\n/**\n * Extracts request arguments based on method type\n * @param method - MCP method name\n * @param params - Method parameters\n * @returns Arguments as span attributes with mcp.request.argument prefix\n */\nexport function getRequestArguments(method: string, params: Record<string, unknown>): Record<string, string> {\n  const args: Record<string, string> = {};\n  const config = METHOD_CONFIGS[method as keyof typeof METHOD_CONFIGS];\n\n  if (!config) {\n    return args;\n  }\n\n  if (config.captureArguments && config.argumentsField && params?.[config.argumentsField]) {\n    const argumentsObj = params[config.argumentsField];\n    if (typeof argumentsObj === 'object' && argumentsObj !== null) {\n      for (const [key, value] of Object.entries(argumentsObj as Record<string, unknown>)) {\n        args[`${MCP_REQUEST_ARGUMENT}.${key.toLowerCase()}`] = JSON.stringify(value);\n      }\n    }\n  }\n\n  if (config.captureUri && params?.uri) {\n    args[`${MCP_REQUEST_ARGUMENT}.uri`] = JSON.stringify(params.uri);\n  }\n\n  if (config.captureName && params?.name) {\n    args[`${MCP_REQUEST_ARGUMENT}.name`] = JSON.stringify(params.name);\n  }\n\n  return args;\n}\n"],"mappings":";;AAAA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAiC;EACnD,YAAY,EAAE;IACZC,WAAW,EAAE,MAAM;IACnBC,eAAe,EAAEC,uBAAuB;IACxCC,gBAAgB,EAAE,IAAI;IACtBC,cAAc,EAAE;EACpB,CAAG;EACD,gBAAgB,EAAE;IAChBJ,WAAW,EAAE,KAAK;IAClBC,eAAe,EAAEI,0BAA0B;IAC3CC,UAAU,EAAE;EAChB,CAAG;EACD,qBAAqB,EAAE;IACrBN,WAAW,EAAE,KAAK;IAClBC,eAAe,EAAEI;EACrB,CAAG;EACD,uBAAuB,EAAE;IACvBL,WAAW,EAAE,KAAK;IAClBC,eAAe,EAAEI;EACrB,CAAG;EACD,aAAa,EAAE;IACbL,WAAW,EAAE,MAAM;IACnBC,eAAe,EAAEM,yBAAyB;IAC1CC,WAAW,EAAE,IAAI;IACjBL,gBAAgB,EAAE,IAAI;IACtBC,cAAc,EAAE;EACpB;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACO,SAASK,iBAAiBA,CAC/BC,MAAM,EACNC,MAAM,EAIN;EACA,MAAMC,MAAA,GAASb,cAAc,CAACW,MAAA,CAAsC;EACpE,IAAI,CAACE,MAAM,EAAE;IACX,OAAO;MAAEC,UAAU,EAAE;IAAA,CAAI;EAC7B;EAEE,MAAMC,MAAA,GACJF,MAAM,CAACZ,WAAA,IAAe,OAAOW,MAAM,GAAGC,MAAM,CAACZ,WAAW,MAAM,WACzDW,MAAM,CAACC,MAAM,CAACZ,WAAW,IAC1Be,SAAS;EAEf,OAAO;IACLD,MAAM;IACND,UAAU,EAAEC,MAAA,IAAUF,MAAM,CAACX,eAAA,GAAkB;MAAE,CAACW,MAAM,CAACX,eAAe,GAAGa;IAAA,CAAO,GAAI;EAC1F,CAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,mBAAmBA,CAACN,MAAM,EAAUC,MAAM,EAAmD;EAC3G,MAAMM,IAAI,GAA2B,EAAE;EACvC,MAAML,MAAA,GAASb,cAAc,CAACW,MAAA,CAAsC;EAEpE,IAAI,CAACE,MAAM,EAAE;IACX,OAAOK,IAAI;EACf;EAEE,IAAIL,MAAM,CAACT,gBAAA,IAAoBS,MAAM,CAACR,cAAA,IAAkBO,MAAM,GAAGC,MAAM,CAACR,cAAc,CAAC,EAAE;IACvF,MAAMc,YAAA,GAAeP,MAAM,CAACC,MAAM,CAACR,cAAc,CAAC;IAClD,IAAI,OAAOc,YAAA,KAAiB,YAAYA,YAAA,KAAiB,IAAI,EAAE;MAC7D,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,KAAKC,MAAM,CAACC,OAAO,CAACJ,YAAA,CAAwC,EAAE;QAClFD,IAAI,CAAC,GAACM,oBAAA,IAAAJ,GAAA,CAAAK,WAAA,QAAAC,IAAA,CAAAC,SAAA,CAAAN,KAAA;MACA;IACA;EACA;EAEA,IAAAR,MAAA,CAAAN,UAAA,IAAAK,MAAA,EAAAgB,GAAA;IACAV,IAAA,IAAAM,oBAAA,UAAAE,IAAA,CAAAC,SAAA,CAAAf,MAAA,CAAAgB,GAAA;EACA;EAEA,IAAAf,MAAA,CAAAJ,WAAA,IAAAG,MAAA,EAAAiB,IAAA;IACAX,IAAA,IAAAM,oBAAA,WAAAE,IAAA,CAAAC,SAAA,CAAAf,MAAA,CAAAiB,IAAA;EACA;EAEA,OAAAX,IAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}