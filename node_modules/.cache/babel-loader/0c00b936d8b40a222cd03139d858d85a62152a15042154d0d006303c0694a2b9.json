{"ast":null,"code":"// Triage management service\nimport{supabase}from'../lib/supabase';import{handleSupabaseError}from'../lib/supabase-utils';const triageService={// Create a new triage case\nasync createTriage(triageData){try{const{data,error}=await supabase.from('triage_cases').insert([{...triageData,status:'pending',created_at:new Date().toISOString()}]).select().single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Get triage case by ID\nasync getTriage(triageId){try{const{data,error}=await supabase.from('triage_cases').select('*').eq('id',triageId).single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Get user's triage cases\nasync getUserTriages(userId){try{const{data,error}=await supabase.from('triage_cases').select('*').eq('user_id',userId).order('created_at',{ascending:false});if(error){return{success:false,error:handleSupabaseError(error),data:[]};}return{success:true,data:data||[]};}catch(error){return{success:false,error:handleSupabaseError(error),data:[]};}},// Update triage status\nasync updateTriageStatus(triageId,status){let notes=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';try{const{data,error}=await supabase.from('triage_cases').update({status,notes,updated_at:new Date().toISOString()}).eq('id',triageId).select().single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}}};export default triageService;","map":{"version":3,"names":["supabase","handleSupabaseError","triageService","createTriage","triageData","data","error","from","insert","status","created_at","Date","toISOString","select","single","success","getTriage","triageId","eq","getUserTriages","userId","order","ascending","updateTriageStatus","notes","arguments","length","undefined","update","updated_at"],"sources":["/workspace/src/services/triageService.js"],"sourcesContent":["// Triage management service\nimport { supabase } from '../lib/supabase';\nimport { handleSupabaseError } from '../lib/supabase-utils';\n\nconst triageService = {\n  // Create a new triage case\n  async createTriage(triageData) {\n    try {\n      const { data, error } = await supabase\n        .from('triage_cases')\n        .insert([{\n          ...triageData,\n          status: 'pending',\n          created_at: new Date().toISOString()\n        }])\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Get triage case by ID\n  async getTriage(triageId) {\n    try {\n      const { data, error } = await supabase\n        .from('triage_cases')\n        .select('*')\n        .eq('id', triageId)\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Get user's triage cases\n  async getUserTriages(userId) {\n    try {\n      const { data, error } = await supabase\n        .from('triage_cases')\n        .select('*')\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: [] };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: [] };\n    }\n  },\n\n  // Update triage status\n  async updateTriageStatus(triageId, status, notes = '') {\n    try {\n      const { data, error } = await supabase\n        .from('triage_cases')\n        .update({\n          status,\n          notes,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', triageId)\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  }\n};\n\nexport default triageService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}