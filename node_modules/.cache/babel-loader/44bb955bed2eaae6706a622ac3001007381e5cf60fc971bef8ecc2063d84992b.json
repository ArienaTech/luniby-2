{"ast":null,"code":"import { DEBUG_BUILD } from '../../debug-build.js';\nimport { debug } from '../../utils/debug-logger.js';\nimport { fill } from '../../utils/object.js';\nimport { captureError } from './errorCapture.js';\n\n/**\n * Handler method wrapping for MCP server instrumentation\n *\n * Provides automatic error capture and span correlation for tool, resource,\n * and prompt handlers.\n */\n\n/**\n * Generic function to wrap MCP server method handlers\n * @internal\n * @param serverInstance - MCP server instance\n * @param methodName - Method name to wrap (tool, resource, prompt)\n */\nfunction wrapMethodHandler(serverInstance, methodName) {\n  fill(serverInstance, methodName, originalMethod => {\n    return function (name) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      const handler = args[args.length - 1];\n      if (typeof handler !== 'function') {\n        return originalMethod.call(this, name, ...args);\n      }\n      const wrappedHandler = createWrappedHandler(handler, methodName, name);\n      return originalMethod.call(this, name, ...args.slice(0, -1), wrappedHandler);\n    };\n  });\n}\n\n/**\n * Creates a wrapped handler with span correlation and error capture\n * @internal\n * @param originalHandler - Original handler function\n * @param methodName - MCP method name\n * @param handlerName - Handler identifier\n * @returns Wrapped handler function\n */\nfunction createWrappedHandler(originalHandler, methodName, handlerName) {\n  return function () {\n    for (var _len2 = arguments.length, handlerArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      handlerArgs[_key2] = arguments[_key2];\n    }\n    try {\n      return createErrorCapturingHandler.call(this, originalHandler, methodName, handlerName, handlerArgs);\n    } catch (error) {\n      DEBUG_BUILD && debug.warn('MCP handler wrapping failed:', error);\n      return originalHandler.apply(this, handlerArgs);\n    }\n  };\n}\n\n/**\n * Creates an error-capturing wrapper for handler execution\n * @internal\n * @param originalHandler - Original handler function\n * @param methodName - MCP method name\n * @param handlerName - Handler identifier\n * @param handlerArgs - Handler arguments\n * @param extraHandlerData - Additional handler context\n * @returns Handler execution result\n */\nfunction createErrorCapturingHandler(originalHandler, methodName, handlerName, handlerArgs) {\n  try {\n    const result = originalHandler.apply(this, handlerArgs);\n    if (result && typeof result === 'object' && typeof result.then === 'function') {\n      return Promise.resolve(result).catch(error => {\n        captureHandlerError(error, methodName, handlerName);\n        throw error;\n      });\n    }\n    return result;\n  } catch (error) {\n    captureHandlerError(error, methodName, handlerName);\n    throw error;\n  }\n}\n\n/**\n * Captures handler execution errors based on handler type\n * @internal\n * @param error - Error to capture\n * @param methodName - MCP method name\n * @param handlerName - Handler identifier\n */\nfunction captureHandlerError(error, methodName, handlerName) {\n  try {\n    const extraData = {};\n    if (methodName === 'tool') {\n      extraData.tool_name = handlerName;\n      if (error.name === 'ProtocolValidationError' || error.message.includes('validation') || error.message.includes('protocol')) {\n        captureError(error, 'validation', extraData);\n      } else if (error.name === 'ServerTimeoutError' || error.message.includes('timed out') || error.message.includes('timeout')) {\n        captureError(error, 'timeout', extraData);\n      } else {\n        captureError(error, 'tool_execution', extraData);\n      }\n    } else if (methodName === 'resource') {\n      extraData.resource_uri = handlerName;\n      captureError(error, 'resource_execution', extraData);\n    } else if (methodName === 'prompt') {\n      extraData.prompt_name = handlerName;\n      captureError(error, 'prompt_execution', extraData);\n    }\n  } catch (captureErr) {\n    // noop\n  }\n}\n\n/**\n * Wraps tool handlers to associate them with request spans\n * @param serverInstance - MCP server instance\n */\nfunction wrapToolHandlers(serverInstance) {\n  wrapMethodHandler(serverInstance, 'tool');\n}\n\n/**\n * Wraps resource handlers to associate them with request spans\n * @param serverInstance - MCP server instance\n */\nfunction wrapResourceHandlers(serverInstance) {\n  wrapMethodHandler(serverInstance, 'resource');\n}\n\n/**\n * Wraps prompt handlers to associate them with request spans\n * @param serverInstance - MCP server instance\n */\nfunction wrapPromptHandlers(serverInstance) {\n  wrapMethodHandler(serverInstance, 'prompt');\n}\n\n/**\n * Wraps all MCP handler types (tool, resource, prompt) for span correlation\n * @param serverInstance - MCP server instance\n */\nfunction wrapAllMCPHandlers(serverInstance) {\n  wrapToolHandlers(serverInstance);\n  wrapResourceHandlers(serverInstance);\n  wrapPromptHandlers(serverInstance);\n}\nexport { wrapAllMCPHandlers, wrapPromptHandlers, wrapResourceHandlers, wrapToolHandlers };","map":{"version":3,"names":["wrapMethodHandler","serverInstance","methodName","fill","originalMethod","name","_len","arguments","length","args","Array","_key","handler","call","wrappedHandler","createWrappedHandler","slice","originalHandler","handlerName","_len2","handlerArgs","_key2","createErrorCapturingHandler","error","DEBUG_BUILD","debug","warn","apply","result","then","Promise","resolve","catch","captureHandlerError","extraData","tool_name","message","includes","captureError","resource_uri","prompt_name","captureErr","wrapToolHandlers","wrapResourceHandlers","wrapPromptHandlers","wrapAllMCPHandlers"],"sources":["/workspace/node_modules/@sentry/core/src/integrations/mcp-server/handlers.ts"],"sourcesContent":["/**\n * Handler method wrapping for MCP server instrumentation\n *\n * Provides automatic error capture and span correlation for tool, resource,\n * and prompt handlers.\n */\n\nimport { DEBUG_BUILD } from '../../debug-build';\nimport { debug } from '../../utils/debug-logger';\nimport { fill } from '../../utils/object';\nimport { captureError } from './errorCapture';\nimport type { MCPHandler, MCPServerInstance } from './types';\n\n/**\n * Generic function to wrap MCP server method handlers\n * @internal\n * @param serverInstance - MCP server instance\n * @param methodName - Method name to wrap (tool, resource, prompt)\n */\nfunction wrapMethodHandler(serverInstance: MCPServerInstance, methodName: keyof MCPServerInstance): void {\n  fill(serverInstance, methodName, originalMethod => {\n    return function (this: MCPServerInstance, name: string, ...args: unknown[]) {\n      const handler = args[args.length - 1];\n\n      if (typeof handler !== 'function') {\n        return (originalMethod as (...args: unknown[]) => unknown).call(this, name, ...args);\n      }\n\n      const wrappedHandler = createWrappedHandler(handler as MCPHandler, methodName, name);\n      return (originalMethod as (...args: unknown[]) => unknown).call(this, name, ...args.slice(0, -1), wrappedHandler);\n    };\n  });\n}\n\n/**\n * Creates a wrapped handler with span correlation and error capture\n * @internal\n * @param originalHandler - Original handler function\n * @param methodName - MCP method name\n * @param handlerName - Handler identifier\n * @returns Wrapped handler function\n */\nfunction createWrappedHandler(originalHandler: MCPHandler, methodName: keyof MCPServerInstance, handlerName: string) {\n  return function (this: unknown, ...handlerArgs: unknown[]): unknown {\n    try {\n      return createErrorCapturingHandler.call(this, originalHandler, methodName, handlerName, handlerArgs);\n    } catch (error) {\n      DEBUG_BUILD && debug.warn('MCP handler wrapping failed:', error);\n      return originalHandler.apply(this, handlerArgs);\n    }\n  };\n}\n\n/**\n * Creates an error-capturing wrapper for handler execution\n * @internal\n * @param originalHandler - Original handler function\n * @param methodName - MCP method name\n * @param handlerName - Handler identifier\n * @param handlerArgs - Handler arguments\n * @param extraHandlerData - Additional handler context\n * @returns Handler execution result\n */\nfunction createErrorCapturingHandler(\n  this: MCPServerInstance,\n  originalHandler: MCPHandler,\n  methodName: keyof MCPServerInstance,\n  handlerName: string,\n  handlerArgs: unknown[],\n): unknown {\n  try {\n    const result = originalHandler.apply(this, handlerArgs);\n\n    if (result && typeof result === 'object' && typeof (result as { then?: unknown }).then === 'function') {\n      return Promise.resolve(result).catch(error => {\n        captureHandlerError(error, methodName, handlerName);\n        throw error;\n      });\n    }\n\n    return result;\n  } catch (error) {\n    captureHandlerError(error as Error, methodName, handlerName);\n    throw error;\n  }\n}\n\n/**\n * Captures handler execution errors based on handler type\n * @internal\n * @param error - Error to capture\n * @param methodName - MCP method name\n * @param handlerName - Handler identifier\n */\nfunction captureHandlerError(error: Error, methodName: keyof MCPServerInstance, handlerName: string): void {\n  try {\n    const extraData: Record<string, unknown> = {};\n\n    if (methodName === 'tool') {\n      extraData.tool_name = handlerName;\n\n      if (\n        error.name === 'ProtocolValidationError' ||\n        error.message.includes('validation') ||\n        error.message.includes('protocol')\n      ) {\n        captureError(error, 'validation', extraData);\n      } else if (\n        error.name === 'ServerTimeoutError' ||\n        error.message.includes('timed out') ||\n        error.message.includes('timeout')\n      ) {\n        captureError(error, 'timeout', extraData);\n      } else {\n        captureError(error, 'tool_execution', extraData);\n      }\n    } else if (methodName === 'resource') {\n      extraData.resource_uri = handlerName;\n      captureError(error, 'resource_execution', extraData);\n    } else if (methodName === 'prompt') {\n      extraData.prompt_name = handlerName;\n      captureError(error, 'prompt_execution', extraData);\n    }\n  } catch (captureErr) {\n    // noop\n  }\n}\n\n/**\n * Wraps tool handlers to associate them with request spans\n * @param serverInstance - MCP server instance\n */\nexport function wrapToolHandlers(serverInstance: MCPServerInstance): void {\n  wrapMethodHandler(serverInstance, 'tool');\n}\n\n/**\n * Wraps resource handlers to associate them with request spans\n * @param serverInstance - MCP server instance\n */\nexport function wrapResourceHandlers(serverInstance: MCPServerInstance): void {\n  wrapMethodHandler(serverInstance, 'resource');\n}\n\n/**\n * Wraps prompt handlers to associate them with request spans\n * @param serverInstance - MCP server instance\n */\nexport function wrapPromptHandlers(serverInstance: MCPServerInstance): void {\n  wrapMethodHandler(serverInstance, 'prompt');\n}\n\n/**\n * Wraps all MCP handler types (tool, resource, prompt) for span correlation\n * @param serverInstance - MCP server instance\n */\nexport function wrapAllMCPHandlers(serverInstance: MCPServerInstance): void {\n  wrapToolHandlers(serverInstance);\n  wrapResourceHandlers(serverInstance);\n  wrapPromptHandlers(serverInstance);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}