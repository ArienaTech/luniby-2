{"ast":null,"code":"// Health records management service\nimport{supabase}from'../lib/supabase';import{handleSupabaseError}from'../lib/supabase-utils';const healthRecordService={// Get all health records for a pet\nasync getPetHealthRecords(petId){try{const{data,error}=await supabase.from('health_records').select('*').eq('pet_id',petId).order('record_date',{ascending:false});if(error){return{success:false,error:handleSupabaseError(error),data:[]};}return{success:true,data:data||[]};}catch(error){return{success:false,error:handleSupabaseError(error),data:[]};}},// Get a single health record\nasync getHealthRecord(recordId){try{const{data,error}=await supabase.from('health_records').select('*').eq('id',recordId).single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Create a new health record\nasync createHealthRecord(recordData){try{const{data,error}=await supabase.from('health_records').insert([recordData]).select().single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Update a health record\nasync updateHealthRecord(recordId,updates){try{const{data,error}=await supabase.from('health_records').update(updates).eq('id',recordId).select().single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Delete a health record\nasync deleteHealthRecord(recordId){try{const{error}=await supabase.from('health_records').delete().eq('id',recordId);if(error){return{success:false,error:handleSupabaseError(error)};}return{success:true};}catch(error){return{success:false,error:handleSupabaseError(error)};}},// Get health summary for a pet\nasync getHealthSummary(petId){try{const{data,error}=await supabase.from('health_records').select('*').eq('pet_id',petId).order('record_date',{ascending:false}).limit(5);if(error){return{success:false,error:handleSupabaseError(error),data:[]};}return{success:true,data:data||[]};}catch(error){return{success:false,error:handleSupabaseError(error),data:[]};}}};export default healthRecordService;","map":{"version":3,"names":["supabase","handleSupabaseError","healthRecordService","getPetHealthRecords","petId","data","error","from","select","eq","order","ascending","success","getHealthRecord","recordId","single","createHealthRecord","recordData","insert","updateHealthRecord","updates","update","deleteHealthRecord","delete","getHealthSummary","limit"],"sources":["/workspace/src/services/healthRecordService.js"],"sourcesContent":["// Health records management service\nimport { supabase } from '../lib/supabase';\nimport { handleSupabaseError } from '../lib/supabase-utils';\n\nconst healthRecordService = {\n  // Get all health records for a pet\n  async getPetHealthRecords(petId) {\n    try {\n      const { data, error } = await supabase\n        .from('health_records')\n        .select('*')\n        .eq('pet_id', petId)\n        .order('record_date', { ascending: false });\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: [] };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: [] };\n    }\n  },\n\n  // Get a single health record\n  async getHealthRecord(recordId) {\n    try {\n      const { data, error } = await supabase\n        .from('health_records')\n        .select('*')\n        .eq('id', recordId)\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Create a new health record\n  async createHealthRecord(recordData) {\n    try {\n      const { data, error } = await supabase\n        .from('health_records')\n        .insert([recordData])\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Update a health record\n  async updateHealthRecord(recordId, updates) {\n    try {\n      const { data, error } = await supabase\n        .from('health_records')\n        .update(updates)\n        .eq('id', recordId)\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Delete a health record\n  async deleteHealthRecord(recordId) {\n    try {\n      const { error } = await supabase\n        .from('health_records')\n        .delete()\n        .eq('id', recordId);\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error) };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error) };\n    }\n  },\n\n  // Get health summary for a pet\n  async getHealthSummary(petId) {\n    try {\n      const { data, error } = await supabase\n        .from('health_records')\n        .select('*')\n        .eq('pet_id', petId)\n        .order('record_date', { ascending: false })\n        .limit(5);\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: [] };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: [] };\n    }\n  }\n};\n\nexport default healthRecordService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}