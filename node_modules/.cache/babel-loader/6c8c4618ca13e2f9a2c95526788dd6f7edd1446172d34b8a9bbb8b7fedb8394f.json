{"ast":null,"code":"// Network connection monitoring utility\nclass ConnectionMonitor{constructor(){this.online=navigator.onLine;this.listeners=new Set();this.connectionQuality='good';this.initialized=false;if(typeof window!=='undefined'){this.initialize();}}initialize(){if(this.initialized)return;// Listen for online/offline events\nwindow.addEventListener('online',()=>{this.online=true;this.connectionQuality='good';this.notifyListeners();console.log('✅ Connection restored');});window.addEventListener('offline',()=>{this.online=false;this.connectionQuality='offline';this.notifyListeners();console.warn('⚠️ Connection lost');});// Monitor connection quality using Network Information API if available\nif('connection'in navigator||'mozConnection'in navigator||'webkitConnection'in navigator){const connection=navigator.connection||navigator.mozConnection||navigator.webkitConnection;if(connection){const updateConnectionQuality=()=>{const effectiveType=connection.effectiveType;switch(effectiveType){case'4g':this.connectionQuality='good';break;case'3g':this.connectionQuality='moderate';break;case'2g':case'slow-2g':this.connectionQuality='poor';break;default:this.connectionQuality='unknown';}this.notifyListeners();};connection.addEventListener('change',updateConnectionQuality);updateConnectionQuality();}}this.initialized=true;console.log('✅ Connection monitor initialized');}// Subscribe to connection changes\nsubscribe(callback){this.listeners.add(callback);return()=>this.listeners.delete(callback);}// Notify all listeners of connection change\nnotifyListeners(){this.listeners.forEach(callback=>{try{callback({online:this.online,quality:this.connectionQuality});}catch(error){console.error('Connection listener error:',error);}});}// Check if online\nisOnline(){return this.online;}// Get connection quality\ngetQuality(){return this.connectionQuality;}// Test connection with a ping\nasync testConnection(){let url=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'/';try{const controller=new AbortController();const timeout=setTimeout(()=>controller.abort(),5000);const response=await fetch(url,{method:'HEAD',cache:'no-cache',signal:controller.signal});clearTimeout(timeout);if(response.ok){this.online=true;return true;}return false;}catch(error){this.online=false;return false;}}}// Create singleton instance\nconst connectionMonitor=new ConnectionMonitor();// Make available globally for debugging\nif(typeof window!=='undefined'){window.connectionMonitor=connectionMonitor;}export default connectionMonitor;","map":{"version":3,"names":["ConnectionMonitor","constructor","online","navigator","onLine","listeners","Set","connectionQuality","initialized","window","initialize","addEventListener","notifyListeners","console","log","warn","connection","mozConnection","webkitConnection","updateConnectionQuality","effectiveType","subscribe","callback","add","delete","forEach","quality","error","isOnline","getQuality","testConnection","url","arguments","length","undefined","controller","AbortController","timeout","setTimeout","abort","response","fetch","method","cache","signal","clearTimeout","ok","connectionMonitor"],"sources":["/workspace/src/lib/connection-monitor.js"],"sourcesContent":["// Network connection monitoring utility\nclass ConnectionMonitor {\n  constructor() {\n    this.online = navigator.onLine;\n    this.listeners = new Set();\n    this.connectionQuality = 'good';\n    this.initialized = false;\n    \n    if (typeof window !== 'undefined') {\n      this.initialize();\n    }\n  }\n\n  initialize() {\n    if (this.initialized) return;\n\n    // Listen for online/offline events\n    window.addEventListener('online', () => {\n      this.online = true;\n      this.connectionQuality = 'good';\n      this.notifyListeners();\n      console.log('✅ Connection restored');\n    });\n\n    window.addEventListener('offline', () => {\n      this.online = false;\n      this.connectionQuality = 'offline';\n      this.notifyListeners();\n      console.warn('⚠️ Connection lost');\n    });\n\n    // Monitor connection quality using Network Information API if available\n    if ('connection' in navigator || 'mozConnection' in navigator || 'webkitConnection' in navigator) {\n      const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n      \n      if (connection) {\n        const updateConnectionQuality = () => {\n          const effectiveType = connection.effectiveType;\n          \n          switch (effectiveType) {\n            case '4g':\n              this.connectionQuality = 'good';\n              break;\n            case '3g':\n              this.connectionQuality = 'moderate';\n              break;\n            case '2g':\n            case 'slow-2g':\n              this.connectionQuality = 'poor';\n              break;\n            default:\n              this.connectionQuality = 'unknown';\n          }\n          \n          this.notifyListeners();\n        };\n\n        connection.addEventListener('change', updateConnectionQuality);\n        updateConnectionQuality();\n      }\n    }\n\n    this.initialized = true;\n    console.log('✅ Connection monitor initialized');\n  }\n\n  // Subscribe to connection changes\n  subscribe(callback) {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  // Notify all listeners of connection change\n  notifyListeners() {\n    this.listeners.forEach(callback => {\n      try {\n        callback({\n          online: this.online,\n          quality: this.connectionQuality\n        });\n      } catch (error) {\n        console.error('Connection listener error:', error);\n      }\n    });\n  }\n\n  // Check if online\n  isOnline() {\n    return this.online;\n  }\n\n  // Get connection quality\n  getQuality() {\n    return this.connectionQuality;\n  }\n\n  // Test connection with a ping\n  async testConnection(url = '/') {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 5000);\n\n      const response = await fetch(url, {\n        method: 'HEAD',\n        cache: 'no-cache',\n        signal: controller.signal\n      });\n\n      clearTimeout(timeout);\n      \n      if (response.ok) {\n        this.online = true;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      this.online = false;\n      return false;\n    }\n  }\n}\n\n// Create singleton instance\nconst connectionMonitor = new ConnectionMonitor();\n\n// Make available globally for debugging\nif (typeof window !== 'undefined') {\n  window.connectionMonitor = connectionMonitor;\n}\n\nexport default connectionMonitor;\n"],"mappings":"AAAA;AACA,KAAM,CAAAA,iBAAkB,CACtBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,MAAM,CAAGC,SAAS,CAACC,MAAM,CAC9B,IAAI,CAACC,SAAS,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,CAC1B,IAAI,CAACC,iBAAiB,CAAG,MAAM,CAC/B,IAAI,CAACC,WAAW,CAAG,KAAK,CAExB,GAAI,MAAO,CAAAC,MAAM,GAAK,WAAW,CAAE,CACjC,IAAI,CAACC,UAAU,CAAC,CAAC,CACnB,CACF,CAEAA,UAAUA,CAAA,CAAG,CACX,GAAI,IAAI,CAACF,WAAW,CAAE,OAEtB;AACAC,MAAM,CAACE,gBAAgB,CAAC,QAAQ,CAAE,IAAM,CACtC,IAAI,CAACT,MAAM,CAAG,IAAI,CAClB,IAAI,CAACK,iBAAiB,CAAG,MAAM,CAC/B,IAAI,CAACK,eAAe,CAAC,CAAC,CACtBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CACtC,CAAC,CAAC,CAEFL,MAAM,CAACE,gBAAgB,CAAC,SAAS,CAAE,IAAM,CACvC,IAAI,CAACT,MAAM,CAAG,KAAK,CACnB,IAAI,CAACK,iBAAiB,CAAG,SAAS,CAClC,IAAI,CAACK,eAAe,CAAC,CAAC,CACtBC,OAAO,CAACE,IAAI,CAAC,oBAAoB,CAAC,CACpC,CAAC,CAAC,CAEF;AACA,GAAI,YAAY,EAAI,CAAAZ,SAAS,EAAI,eAAe,EAAI,CAAAA,SAAS,EAAI,kBAAkB,EAAI,CAAAA,SAAS,CAAE,CAChG,KAAM,CAAAa,UAAU,CAAGb,SAAS,CAACa,UAAU,EAAIb,SAAS,CAACc,aAAa,EAAId,SAAS,CAACe,gBAAgB,CAEhG,GAAIF,UAAU,CAAE,CACd,KAAM,CAAAG,uBAAuB,CAAGA,CAAA,GAAM,CACpC,KAAM,CAAAC,aAAa,CAAGJ,UAAU,CAACI,aAAa,CAE9C,OAAQA,aAAa,EACnB,IAAK,IAAI,CACP,IAAI,CAACb,iBAAiB,CAAG,MAAM,CAC/B,MACF,IAAK,IAAI,CACP,IAAI,CAACA,iBAAiB,CAAG,UAAU,CACnC,MACF,IAAK,IAAI,CACT,IAAK,SAAS,CACZ,IAAI,CAACA,iBAAiB,CAAG,MAAM,CAC/B,MACF,QACE,IAAI,CAACA,iBAAiB,CAAG,SAAS,CACtC,CAEA,IAAI,CAACK,eAAe,CAAC,CAAC,CACxB,CAAC,CAEDI,UAAU,CAACL,gBAAgB,CAAC,QAAQ,CAAEQ,uBAAuB,CAAC,CAC9DA,uBAAuB,CAAC,CAAC,CAC3B,CACF,CAEA,IAAI,CAACX,WAAW,CAAG,IAAI,CACvBK,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CACjD,CAEA;AACAO,SAASA,CAACC,QAAQ,CAAE,CAClB,IAAI,CAACjB,SAAS,CAACkB,GAAG,CAACD,QAAQ,CAAC,CAC5B,MAAO,IAAM,IAAI,CAACjB,SAAS,CAACmB,MAAM,CAACF,QAAQ,CAAC,CAC9C,CAEA;AACAV,eAAeA,CAAA,CAAG,CAChB,IAAI,CAACP,SAAS,CAACoB,OAAO,CAACH,QAAQ,EAAI,CACjC,GAAI,CACFA,QAAQ,CAAC,CACPpB,MAAM,CAAE,IAAI,CAACA,MAAM,CACnBwB,OAAO,CAAE,IAAI,CAACnB,iBAChB,CAAC,CAAC,CACJ,CAAE,MAAOoB,KAAK,CAAE,CACdd,OAAO,CAACc,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CACpD,CACF,CAAC,CAAC,CACJ,CAEA;AACAC,QAAQA,CAAA,CAAG,CACT,MAAO,KAAI,CAAC1B,MAAM,CACpB,CAEA;AACA2B,UAAUA,CAAA,CAAG,CACX,MAAO,KAAI,CAACtB,iBAAiB,CAC/B,CAEA;AACA,KAAM,CAAAuB,cAAcA,CAAA,CAAY,IAAX,CAAAC,GAAG,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,CAC5B,GAAI,CACF,KAAM,CAAAG,UAAU,CAAG,GAAI,CAAAC,eAAe,CAAC,CAAC,CACxC,KAAM,CAAAC,OAAO,CAAGC,UAAU,CAAC,IAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,CAAE,IAAI,CAAC,CAE1D,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACV,GAAG,CAAE,CAChCW,MAAM,CAAE,MAAM,CACdC,KAAK,CAAE,UAAU,CACjBC,MAAM,CAAET,UAAU,CAACS,MACrB,CAAC,CAAC,CAEFC,YAAY,CAACR,OAAO,CAAC,CAErB,GAAIG,QAAQ,CAACM,EAAE,CAAE,CACf,IAAI,CAAC5C,MAAM,CAAG,IAAI,CAClB,MAAO,KAAI,CACb,CACA,MAAO,MAAK,CACd,CAAE,MAAOyB,KAAK,CAAE,CACd,IAAI,CAACzB,MAAM,CAAG,KAAK,CACnB,MAAO,MAAK,CACd,CACF,CACF,CAEA;AACA,KAAM,CAAA6C,iBAAiB,CAAG,GAAI,CAAA/C,iBAAiB,CAAC,CAAC,CAEjD;AACA,GAAI,MAAO,CAAAS,MAAM,GAAK,WAAW,CAAE,CACjCA,MAAM,CAACsC,iBAAiB,CAAGA,iBAAiB,CAC9C,CAEA,cAAe,CAAAA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}