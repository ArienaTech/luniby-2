{"ast":null,"code":"import { DEBUG_BUILD } from '../../debug-build.js';\nimport { debug } from '../../utils/debug-logger.js';\n\n/**\n * Message validation functions for MCP server instrumentation\n *\n * Provides JSON-RPC 2.0 message type validation and MCP server instance validation.\n */\n\n/**\n * Validates if a message is a JSON-RPC request\n * @param message - Message to validate\n * @returns True if message is a JSON-RPC request\n */\nfunction isJsonRpcRequest(message) {\n  return typeof message === 'object' && message !== null && 'jsonrpc' in message && message.jsonrpc === '2.0' && 'method' in message && 'id' in message;\n}\n\n/**\n * Validates if a message is a JSON-RPC notification\n * @param message - Message to validate\n * @returns True if message is a JSON-RPC notification\n */\nfunction isJsonRpcNotification(message) {\n  return typeof message === 'object' && message !== null && 'jsonrpc' in message && message.jsonrpc === '2.0' && 'method' in message && !('id' in message);\n}\n\n/**\n * Validates if a message is a JSON-RPC response\n * @param message - Message to validate\n * @returns True if message is a JSON-RPC response\n */\nfunction isJsonRpcResponse(message) {\n  return typeof message === 'object' && message !== null && 'jsonrpc' in message && message.jsonrpc === '2.0' && 'id' in message && ('result' in message || 'error' in message);\n}\n\n/**\n * Validates MCP server instance with type checking\n * @param instance - Object to validate as MCP server instance\n * @returns True if instance has required MCP server methods\n */\nfunction validateMcpServerInstance(instance) {\n  if (typeof instance === 'object' && instance !== null && 'resource' in instance && 'tool' in instance && 'prompt' in instance && 'connect' in instance) {\n    return true;\n  }\n  DEBUG_BUILD && debug.warn('Did not patch MCP server. Interface is incompatible.');\n  return false;\n}\nexport { isJsonRpcNotification, isJsonRpcRequest, isJsonRpcResponse, validateMcpServerInstance };","map":{"version":3,"names":["isJsonRpcRequest","message","jsonrpc","isJsonRpcNotification","isJsonRpcResponse","validateMcpServerInstance","instance","DEBUG_BUILD","debug","warn"],"sources":["/workspace/node_modules/@sentry/core/src/integrations/mcp-server/validation.ts"],"sourcesContent":["/**\n * Message validation functions for MCP server instrumentation\n *\n * Provides JSON-RPC 2.0 message type validation and MCP server instance validation.\n */\n\nimport { DEBUG_BUILD } from '../../debug-build';\nimport { debug } from '../../utils/debug-logger';\nimport type { JsonRpcNotification, JsonRpcRequest, JsonRpcResponse } from './types';\n\n/**\n * Validates if a message is a JSON-RPC request\n * @param message - Message to validate\n * @returns True if message is a JSON-RPC request\n */\nexport function isJsonRpcRequest(message: unknown): message is JsonRpcRequest {\n  return (\n    typeof message === 'object' &&\n    message !== null &&\n    'jsonrpc' in message &&\n    (message as JsonRpcRequest).jsonrpc === '2.0' &&\n    'method' in message &&\n    'id' in message\n  );\n}\n\n/**\n * Validates if a message is a JSON-RPC notification\n * @param message - Message to validate\n * @returns True if message is a JSON-RPC notification\n */\nexport function isJsonRpcNotification(message: unknown): message is JsonRpcNotification {\n  return (\n    typeof message === 'object' &&\n    message !== null &&\n    'jsonrpc' in message &&\n    (message as JsonRpcNotification).jsonrpc === '2.0' &&\n    'method' in message &&\n    !('id' in message)\n  );\n}\n\n/**\n * Validates if a message is a JSON-RPC response\n * @param message - Message to validate\n * @returns True if message is a JSON-RPC response\n */\nexport function isJsonRpcResponse(message: unknown): message is JsonRpcResponse {\n  return (\n    typeof message === 'object' &&\n    message !== null &&\n    'jsonrpc' in message &&\n    (message as { jsonrpc: string }).jsonrpc === '2.0' &&\n    'id' in message &&\n    ('result' in message || 'error' in message)\n  );\n}\n\n/**\n * Validates MCP server instance with type checking\n * @param instance - Object to validate as MCP server instance\n * @returns True if instance has required MCP server methods\n */\nexport function validateMcpServerInstance(instance: unknown): boolean {\n  if (\n    typeof instance === 'object' &&\n    instance !== null &&\n    'resource' in instance &&\n    'tool' in instance &&\n    'prompt' in instance &&\n    'connect' in instance\n  ) {\n    return true;\n  }\n  DEBUG_BUILD && debug.warn('Did not patch MCP server. Interface is incompatible.');\n  return false;\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACO,SAASA,gBAAgBA,CAACC,OAAO,EAAsC;EAC5E,OACE,OAAOA,OAAA,KAAY,YACnBA,OAAA,KAAY,QACZ,aAAaA,OAAA,IACZA,OAAA,CAA2BC,OAAA,KAAY,SACxC,YAAYD,OAAA,IACZ,QAAQA,OAAA;AAEZ;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASE,qBAAqBA,CAACF,OAAO,EAA2C;EACtF,OACE,OAAOA,OAAA,KAAY,YACnBA,OAAA,KAAY,QACZ,aAAaA,OAAA,IACZA,OAAA,CAAgCC,OAAA,KAAY,SAC7C,YAAYD,OAAA,IACZ,EAAE,QAAQA,OAAO;AAErB;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASG,iBAAiBA,CAACH,OAAO,EAAuC;EAC9E,OACE,OAAOA,OAAA,KAAY,YACnBA,OAAA,KAAY,QACZ,aAAaA,OAAA,IACZA,OAAA,CAAgCC,OAAA,KAAY,SAC7C,QAAQD,OAAA,KACP,YAAYA,OAAA,IAAW,WAAWA,OAAO;AAE9C;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASI,yBAAyBA,CAACC,QAAQ,EAAoB;EACpE,IACE,OAAOA,QAAA,KAAa,YACpBA,QAAA,KAAa,QACb,cAAcA,QAAA,IACd,UAAUA,QAAA,IACV,YAAYA,QAAA,IACZ,aAAaA,QAAA,EACb;IACA,OAAO,IAAI;EACf;EACEC,WAAA,IAAeC,KAAK,CAACC,IAAI,CAAC,sDAAsD,CAAC;EACjF,OAAO,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}