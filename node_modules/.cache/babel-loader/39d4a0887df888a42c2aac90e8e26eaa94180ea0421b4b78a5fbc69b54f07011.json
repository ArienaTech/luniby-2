{"ast":null,"code":"// Role-based utility functions\nimport{supabase}from'../lib/supabase';// User roles constants\nexport const USER_ROLES={PET_OWNER:'pet_owner',VETERINARIAN:'veterinarian',VET_NURSE:'vet_nurse',GROOMER:'groomer',TRAINER:'trainer',BREEDER:'breeder',NUTRITIONIST:'nutritionist',PET_BUSINESS:'pet_business',HOLISTIC_CARE:'holistic_care',ADMIN:'admin',SUPPORT:'support'};// Get dashboard route based on user role\nexport const getDashboardRoute=role=>{const roleRoutes={[USER_ROLES.PET_OWNER]:'/pet-owner-dashboard',[USER_ROLES.VETERINARIAN]:'/veterinarian-portal',[USER_ROLES.VET_NURSE]:'/vet-nurse-dashboard',[USER_ROLES.GROOMER]:'/groomer-dashboard',[USER_ROLES.TRAINER]:'/trainer-dashboard',[USER_ROLES.BREEDER]:'/breeder-dashboard',[USER_ROLES.NUTRITIONIST]:'/nutritionist-dashboard',[USER_ROLES.PET_BUSINESS]:'/pet-business-dashboard',[USER_ROLES.HOLISTIC_CARE]:'/holistic-care-dashboard',[USER_ROLES.ADMIN]:'/admin',[USER_ROLES.SUPPORT]:'/support-dashboard'};return roleRoutes[role]||'/pet-owner-dashboard';// Default to pet owner dashboard\n};// Ensure pet owner access\nexport const ensurePetOwnerAccess=async()=>{try{var _user$user_metadata,_user$app_metadata;const{data:{user},error}=await supabase.auth.getUser();if(error||!user){return{success:false,error:'Not authenticated',shouldRedirect:true,redirectTo:'/signin'};}// Get user role from metadata\nconst userRole=((_user$user_metadata=user.user_metadata)===null||_user$user_metadata===void 0?void 0:_user$user_metadata.role)||((_user$app_metadata=user.app_metadata)===null||_user$app_metadata===void 0?void 0:_user$app_metadata.role)||USER_ROLES.PET_OWNER;// Allow access to pet owners and admins\nif(userRole===USER_ROLES.PET_OWNER||userRole===USER_ROLES.ADMIN){return{success:true,user,role:userRole};}// User has a different role - redirect to their dashboard\nreturn{success:false,error:'Access denied - wrong role',shouldRedirect:true,redirectTo:getDashboardRoute(userRole),role:userRole};}catch(error){console.error('Error checking pet owner access:',error);return{success:false,error:error.message||'Failed to verify access',shouldRedirect:true,redirectTo:'/signin'};}};// Check if user has specific role\nexport const hasRole=async requiredRole=>{try{var _user$user_metadata2,_user$app_metadata2;const{data:{user},error}=await supabase.auth.getUser();if(error||!user){return false;}const userRole=((_user$user_metadata2=user.user_metadata)===null||_user$user_metadata2===void 0?void 0:_user$user_metadata2.role)||((_user$app_metadata2=user.app_metadata)===null||_user$app_metadata2===void 0?void 0:_user$app_metadata2.role);// Admin has access to everything\nif(userRole===USER_ROLES.ADMIN){return true;}return userRole===requiredRole;}catch(error){console.error('Error checking role:',error);return false;}};// Get user role\nexport const getUserRole=async()=>{try{var _user$user_metadata3,_user$app_metadata3;const{data:{user},error}=await supabase.auth.getUser();if(error||!user){return null;}return((_user$user_metadata3=user.user_metadata)===null||_user$user_metadata3===void 0?void 0:_user$user_metadata3.role)||((_user$app_metadata3=user.app_metadata)===null||_user$app_metadata3===void 0?void 0:_user$app_metadata3.role)||USER_ROLES.PET_OWNER;}catch(error){console.error('Error getting user role:',error);return null;}};// Check if user is admin\nexport const isAdmin=async()=>{return await hasRole(USER_ROLES.ADMIN);};// Check if user is provider (any type of service provider)\nexport const isProvider=async()=>{const providerRoles=[USER_ROLES.VETERINARIAN,USER_ROLES.VET_NURSE,USER_ROLES.GROOMER,USER_ROLES.TRAINER,USER_ROLES.BREEDER,USER_ROLES.NUTRITIONIST,USER_ROLES.PET_BUSINESS,USER_ROLES.HOLISTIC_CARE];try{const userRole=await getUserRole();return providerRoles.includes(userRole);}catch(error){return false;}};export default{USER_ROLES,getDashboardRoute,ensurePetOwnerAccess,hasRole,getUserRole,isAdmin,isProvider};","map":{"version":3,"names":["supabase","USER_ROLES","PET_OWNER","VETERINARIAN","VET_NURSE","GROOMER","TRAINER","BREEDER","NUTRITIONIST","PET_BUSINESS","HOLISTIC_CARE","ADMIN","SUPPORT","getDashboardRoute","role","roleRoutes","ensurePetOwnerAccess","_user$user_metadata","_user$app_metadata","data","user","error","auth","getUser","success","shouldRedirect","redirectTo","userRole","user_metadata","app_metadata","console","message","hasRole","requiredRole","_user$user_metadata2","_user$app_metadata2","getUserRole","_user$user_metadata3","_user$app_metadata3","isAdmin","isProvider","providerRoles","includes"],"sources":["/workspace/src/utils/roleUtils.js"],"sourcesContent":["// Role-based utility functions\nimport { supabase } from '../lib/supabase';\n\n// User roles constants\nexport const USER_ROLES = {\n  PET_OWNER: 'pet_owner',\n  VETERINARIAN: 'veterinarian',\n  VET_NURSE: 'vet_nurse',\n  GROOMER: 'groomer',\n  TRAINER: 'trainer',\n  BREEDER: 'breeder',\n  NUTRITIONIST: 'nutritionist',\n  PET_BUSINESS: 'pet_business',\n  HOLISTIC_CARE: 'holistic_care',\n  ADMIN: 'admin',\n  SUPPORT: 'support'\n};\n\n// Get dashboard route based on user role\nexport const getDashboardRoute = (role) => {\n  const roleRoutes = {\n    [USER_ROLES.PET_OWNER]: '/pet-owner-dashboard',\n    [USER_ROLES.VETERINARIAN]: '/veterinarian-portal',\n    [USER_ROLES.VET_NURSE]: '/vet-nurse-dashboard',\n    [USER_ROLES.GROOMER]: '/groomer-dashboard',\n    [USER_ROLES.TRAINER]: '/trainer-dashboard',\n    [USER_ROLES.BREEDER]: '/breeder-dashboard',\n    [USER_ROLES.NUTRITIONIST]: '/nutritionist-dashboard',\n    [USER_ROLES.PET_BUSINESS]: '/pet-business-dashboard',\n    [USER_ROLES.HOLISTIC_CARE]: '/holistic-care-dashboard',\n    [USER_ROLES.ADMIN]: '/admin',\n    [USER_ROLES.SUPPORT]: '/support-dashboard'\n  };\n\n  return roleRoutes[role] || '/pet-owner-dashboard'; // Default to pet owner dashboard\n};\n\n// Ensure pet owner access\nexport const ensurePetOwnerAccess = async () => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return {\n        success: false,\n        error: 'Not authenticated',\n        shouldRedirect: true,\n        redirectTo: '/signin'\n      };\n    }\n\n    // Get user role from metadata\n    const userRole = user.user_metadata?.role || user.app_metadata?.role || USER_ROLES.PET_OWNER;\n\n    // Allow access to pet owners and admins\n    if (userRole === USER_ROLES.PET_OWNER || userRole === USER_ROLES.ADMIN) {\n      return {\n        success: true,\n        user,\n        role: userRole\n      };\n    }\n\n    // User has a different role - redirect to their dashboard\n    return {\n      success: false,\n      error: 'Access denied - wrong role',\n      shouldRedirect: true,\n      redirectTo: getDashboardRoute(userRole),\n      role: userRole\n    };\n  } catch (error) {\n    console.error('Error checking pet owner access:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to verify access',\n      shouldRedirect: true,\n      redirectTo: '/signin'\n    };\n  }\n};\n\n// Check if user has specific role\nexport const hasRole = async (requiredRole) => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return false;\n    }\n\n    const userRole = user.user_metadata?.role || user.app_metadata?.role;\n    \n    // Admin has access to everything\n    if (userRole === USER_ROLES.ADMIN) {\n      return true;\n    }\n\n    return userRole === requiredRole;\n  } catch (error) {\n    console.error('Error checking role:', error);\n    return false;\n  }\n};\n\n// Get user role\nexport const getUserRole = async () => {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      return null;\n    }\n\n    return user.user_metadata?.role || user.app_metadata?.role || USER_ROLES.PET_OWNER;\n  } catch (error) {\n    console.error('Error getting user role:', error);\n    return null;\n  }\n};\n\n// Check if user is admin\nexport const isAdmin = async () => {\n  return await hasRole(USER_ROLES.ADMIN);\n};\n\n// Check if user is provider (any type of service provider)\nexport const isProvider = async () => {\n  const providerRoles = [\n    USER_ROLES.VETERINARIAN,\n    USER_ROLES.VET_NURSE,\n    USER_ROLES.GROOMER,\n    USER_ROLES.TRAINER,\n    USER_ROLES.BREEDER,\n    USER_ROLES.NUTRITIONIST,\n    USER_ROLES.PET_BUSINESS,\n    USER_ROLES.HOLISTIC_CARE\n  ];\n\n  try {\n    const userRole = await getUserRole();\n    return providerRoles.includes(userRole);\n  } catch (error) {\n    return false;\n  }\n};\n\nexport default {\n  USER_ROLES,\n  getDashboardRoute,\n  ensurePetOwnerAccess,\n  hasRole,\n  getUserRole,\n  isAdmin,\n  isProvider\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}