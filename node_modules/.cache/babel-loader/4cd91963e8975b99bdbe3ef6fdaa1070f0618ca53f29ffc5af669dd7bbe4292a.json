{"ast":null,"code":"// Case history management service\nimport{supabase}from'../lib/supabase';import{handleSupabaseError}from'../lib/supabase-utils';const caseHistoryService={// Get case history for a pet\nasync getPetCaseHistory(petId){try{const{data,error}=await supabase.from('case_history').select('*').eq('pet_id',petId).order('created_at',{ascending:false});if(error){return{success:false,error:handleSupabaseError(error),data:[]};}return{success:true,data:data||[]};}catch(error){return{success:false,error:handleSupabaseError(error),data:[]};}},// Get case history for a user\nasync getUserCaseHistory(userId){try{const{data,error}=await supabase.from('case_history').select('*').eq('user_id',userId).order('created_at',{ascending:false});if(error){return{success:false,error:handleSupabaseError(error),data:[]};}return{success:true,data:data||[]};}catch(error){return{success:false,error:handleSupabaseError(error),data:[]};}},// Get a single case\nasync getCase(caseId){try{const{data,error}=await supabase.from('case_history').select('*').eq('id',caseId).single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Create a new case\nasync createCase(caseData){try{const{data,error}=await supabase.from('case_history').insert([caseData]).select().single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}},// Update a case\nasync updateCase(caseId,updates){try{const{data,error}=await supabase.from('case_history').update(updates).eq('id',caseId).select().single();if(error){return{success:false,error:handleSupabaseError(error),data:null};}return{success:true,data};}catch(error){return{success:false,error:handleSupabaseError(error),data:null};}}};export default caseHistoryService;","map":{"version":3,"names":["supabase","handleSupabaseError","caseHistoryService","getPetCaseHistory","petId","data","error","from","select","eq","order","ascending","success","getUserCaseHistory","userId","getCase","caseId","single","createCase","caseData","insert","updateCase","updates","update"],"sources":["/workspace/src/services/caseHistoryService.js"],"sourcesContent":["// Case history management service\nimport { supabase } from '../lib/supabase';\nimport { handleSupabaseError } from '../lib/supabase-utils';\n\nconst caseHistoryService = {\n  // Get case history for a pet\n  async getPetCaseHistory(petId) {\n    try {\n      const { data, error } = await supabase\n        .from('case_history')\n        .select('*')\n        .eq('pet_id', petId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: [] };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: [] };\n    }\n  },\n\n  // Get case history for a user\n  async getUserCaseHistory(userId) {\n    try {\n      const { data, error } = await supabase\n        .from('case_history')\n        .select('*')\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: [] };\n      }\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: [] };\n    }\n  },\n\n  // Get a single case\n  async getCase(caseId) {\n    try {\n      const { data, error } = await supabase\n        .from('case_history')\n        .select('*')\n        .eq('id', caseId)\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Create a new case\n  async createCase(caseData) {\n    try {\n      const { data, error } = await supabase\n        .from('case_history')\n        .insert([caseData])\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  },\n\n  // Update a case\n  async updateCase(caseId, updates) {\n    try {\n      const { data, error } = await supabase\n        .from('case_history')\n        .update(updates)\n        .eq('id', caseId)\n        .select()\n        .single();\n\n      if (error) {\n        return { success: false, error: handleSupabaseError(error), data: null };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: handleSupabaseError(error), data: null };\n    }\n  }\n};\n\nexport default caseHistoryService;\n"],"mappings":"AAAA;AACA,OAASA,QAAQ,KAAQ,iBAAiB,CAC1C,OAASC,mBAAmB,KAAQ,uBAAuB,CAE3D,KAAM,CAAAC,kBAAkB,CAAG,CACzB;AACA,KAAM,CAAAC,iBAAiBA,CAACC,KAAK,CAAE,CAC7B,GAAI,CACF,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAN,QAAQ,CACnCO,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,QAAQ,CAAEL,KAAK,CAAC,CACnBM,KAAK,CAAC,YAAY,CAAE,CAAEC,SAAS,CAAE,KAAM,CAAC,CAAC,CAE5C,GAAIL,KAAK,CAAE,CACT,MAAO,CAAEM,OAAO,CAAE,KAAK,CAAEN,KAAK,CAAEL,mBAAmB,CAACK,KAAK,CAAC,CAAED,IAAI,CAAE,EAAG,CAAC,CACxE,CAEA,MAAO,CAAEO,OAAO,CAAE,IAAI,CAAEP,IAAI,CAAEA,IAAI,EAAI,EAAG,CAAC,CAC5C,CAAE,MAAOC,KAAK,CAAE,CACd,MAAO,CAAEM,OAAO,CAAE,KAAK,CAAEN,KAAK,CAAEL,mBAAmB,CAACK,KAAK,CAAC,CAAED,IAAI,CAAE,EAAG,CAAC,CACxE,CACF,CAAC,CAED;AACA,KAAM,CAAAQ,kBAAkBA,CAACC,MAAM,CAAE,CAC/B,GAAI,CACF,KAAM,CAAET,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAN,QAAQ,CACnCO,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,CAAEK,MAAM,CAAC,CACrBJ,KAAK,CAAC,YAAY,CAAE,CAAEC,SAAS,CAAE,KAAM,CAAC,CAAC,CAE5C,GAAIL,KAAK,CAAE,CACT,MAAO,CAAEM,OAAO,CAAE,KAAK,CAAEN,KAAK,CAAEL,mBAAmB,CAACK,KAAK,CAAC,CAAED,IAAI,CAAE,EAAG,CAAC,CACxE,CAEA,MAAO,CAAEO,OAAO,CAAE,IAAI,CAAEP,IAAI,CAAEA,IAAI,EAAI,EAAG,CAAC,CAC5C,CAAE,MAAOC,KAAK,CAAE,CACd,MAAO,CAAEM,OAAO,CAAE,KAAK,CAAEN,KAAK,CAAEL,mBAAmB,CAACK,KAAK,CAAC,CAAED,IAAI,CAAE,EAAG,CAAC,CACxE,CACF,CAAC,CAED;AACA,KAAM,CAAAU,OAAOA,CAACC,MAAM,CAAE,CACpB,GAAI,CACF,KAAM,CAAEX,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAN,QAAQ,CACnCO,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,CAAEO,MAAM,CAAC,CAChBC,MAAM,CAAC,CAAC,CAEX,GAAIX,KAAK,CAAE,CACT,MAAO,CAAEM,OAAO,CAAE,KAAK,CAAEN,KAAK,CAAEL,mBAAmB,CAACK,KAAK,CAAC,CAAED,IAAI,CAAE,IAAK,CAAC,CAC1E,CAEA,MAAO,CAAEO,OAAO,CAAE,IAAI,CAAEP,IAAK,CAAC,CAChC,CAAE,MAAOC,KAAK,CAAE,CACd,MAAO,CAAEM,OAAO,CAAE,KAAK,CAAEN,KAAK,CAAEL,mBAAmB,CAACK,KAAK,CAAC,CAAED,IAAI,CAAE,IAAK,CAAC,CAC1E,CACF,CAAC,CAED;AACA,KAAM,CAAAa,UAAUA,CAACC,QAAQ,CAAE,CACzB,GAAI,CACF,KAAM,CAAEd,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAN,QAAQ,CACnCO,IAAI,CAAC,cAAc,CAAC,CACpBa,MAAM,CAAC,CAACD,QAAQ,CAAC,CAAC,CAClBX,MAAM,CAAC,CAAC,CACRS,MAAM,CAAC,CAAC,CAEX,GAAIX,KAAK,CAAE,CACT,MAAO,CAAEM,OAAO,CAAE,KAAK,CAAEN,KAAK,CAAEL,mBAAmB,CAACK,KAAK,CAAC,CAAED,IAAI,CAAE,IAAK,CAAC,CAC1E,CAEA,MAAO,CAAEO,OAAO,CAAE,IAAI,CAAEP,IAAK,CAAC,CAChC,CAAE,MAAOC,KAAK,CAAE,CACd,MAAO,CAAEM,OAAO,CAAE,KAAK,CAAEN,KAAK,CAAEL,mBAAmB,CAACK,KAAK,CAAC,CAAED,IAAI,CAAE,IAAK,CAAC,CAC1E,CACF,CAAC,CAED;AACA,KAAM,CAAAgB,UAAUA,CAACL,MAAM,CAAEM,OAAO,CAAE,CAChC,GAAI,CACF,KAAM,CAAEjB,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAN,QAAQ,CACnCO,IAAI,CAAC,cAAc,CAAC,CACpBgB,MAAM,CAACD,OAAO,CAAC,CACfb,EAAE,CAAC,IAAI,CAAEO,MAAM,CAAC,CAChBR,MAAM,CAAC,CAAC,CACRS,MAAM,CAAC,CAAC,CAEX,GAAIX,KAAK,CAAE,CACT,MAAO,CAAEM,OAAO,CAAE,KAAK,CAAEN,KAAK,CAAEL,mBAAmB,CAACK,KAAK,CAAC,CAAED,IAAI,CAAE,IAAK,CAAC,CAC1E,CAEA,MAAO,CAAEO,OAAO,CAAE,IAAI,CAAEP,IAAK,CAAC,CAChC,CAAE,MAAOC,KAAK,CAAE,CACd,MAAO,CAAEM,OAAO,CAAE,KAAK,CAAEN,KAAK,CAAEL,mBAAmB,CAACK,KAAK,CAAC,CAAED,IAAI,CAAE,IAAK,CAAC,CAC1E,CACF,CACF,CAAC,CAED,cAAe,CAAAH,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}