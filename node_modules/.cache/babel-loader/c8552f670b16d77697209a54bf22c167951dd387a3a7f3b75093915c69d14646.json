{"ast":null,"code":"// Cache cleanup utilities\n// Provides functions for managing browser cache, service worker cache, and storage\n// Advanced cache manager with TTL and size limits\nclass AdvancedCache{constructor(){this.maxAge=24*60*60*1000;// 24 hours\nthis.maxSize=100;// max items\n}async cleanup(){try{// Clean up expired localStorage items\nconst now=Date.now();for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&key.startsWith('cache_')){try{const item=JSON.parse(localStorage.getItem(key));if(item&&item.timestamp&&now-item.timestamp>this.maxAge){localStorage.removeItem(key);}}catch(e){// Invalid JSON, remove it\nlocalStorage.removeItem(key);}}}console.log('✅ Cache cleanup completed');}catch(error){console.error('Cache cleanup error:',error);}}}// Request deduplicator to prevent duplicate API calls\nclass RequestDeduplicator{constructor(){this.pendingRequests=new Map();this.cachedRequests=new Map();this.maxCacheAge=5*60*1000;// 5 minutes\n}getPendingRequests(){return this.pendingRequests.size;}getCachedRequests(){return this.cachedRequests.size;}clear(){this.pendingRequests.clear();this.cachedRequests.clear();}}// Initialize global cache utilities\nif(typeof window!=='undefined'){window.advancedCache=new AdvancedCache();window.requestDeduplicator=new RequestDeduplicator();// Get cache info function\nwindow.getCacheInfo=async()=>{var _window$requestDedupl,_window$requestDedupl2;const info={serviceWorker:{registered:'serviceWorker'in navigator,caches:[]},indexedDB:{databases:[]},localStorage:{itemCount:localStorage.length,cacheItems:[]},sessionStorage:{itemCount:sessionStorage.length},memory:{advancedCache:0,requestDeduplicator:{pendingRequests:((_window$requestDedupl=window.requestDeduplicator)===null||_window$requestDedupl===void 0?void 0:_window$requestDedupl.getPendingRequests())||0,cachedRequests:((_window$requestDedupl2=window.requestDeduplicator)===null||_window$requestDedupl2===void 0?void 0:_window$requestDedupl2.getCachedRequests())||0}}};// Get cache names\nif('caches'in window){info.serviceWorker.caches=await caches.keys();}// Count localStorage cache items\nfor(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&key.startsWith('cache_')){info.localStorage.cacheItems.push(key);}}return info;};// Check storage quota\nwindow.checkStorageQuota=async()=>{if('storage'in navigator&&'estimate'in navigator.storage){const estimate=await navigator.storage.estimate();const percentUsed=(estimate.usage/estimate.quota*100).toFixed(2);console.log(`Storage: ${(estimate.usage/1024/1024).toFixed(2)} MB / ${(estimate.quota/1024/1024).toFixed(2)} MB (${percentUsed}%)`);return{usage:estimate.usage,quota:estimate.quota,percentUsed};}return null;};// Clear specific cache\nwindow.clearSpecificCache=async cacheName=>{if('caches'in window){const deleted=await caches.delete(cacheName);if(deleted){console.log(`✅ Cache \"${cacheName}\" cleared`);}return deleted;}return false;};// Optimize all caches\nwindow.optimizeAllCaches=async()=>{console.log('🔧 Optimizing all caches...');// Run advanced cache cleanup\nif(window.advancedCache){await window.advancedCache.cleanup();}// Clear request deduplicator\nif(window.requestDeduplicator){window.requestDeduplicator.clear();}// Clear old session storage\nsessionStorage.clear();console.log('✅ Cache optimization completed');};// Clear all caches\nwindow.clearAllCaches=async()=>{console.log('🗑️ Clearing all caches...');// Clear service worker caches\nif('caches'in window){const cacheNames=await caches.keys();await Promise.all(cacheNames.map(name=>caches.delete(name)));console.log(`✅ Cleared ${cacheNames.length} service worker caches`);}// Clear localStorage cache items\nconst cacheKeys=[];for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&key.startsWith('cache_')){cacheKeys.push(key);}}cacheKeys.forEach(key=>localStorage.removeItem(key));console.log(`✅ Cleared ${cacheKeys.length} localStorage cache items`);// Clear sessionStorage\nsessionStorage.clear();console.log('✅ Cleared sessionStorage');// Clear memory caches\nif(window.requestDeduplicator){window.requestDeduplicator.clear();console.log('✅ Cleared request deduplicator');}console.log('✅ All caches cleared successfully');};}export default{};","map":{"version":3,"names":["AdvancedCache","constructor","maxAge","maxSize","cleanup","now","Date","i","localStorage","length","key","startsWith","item","JSON","parse","getItem","timestamp","removeItem","e","console","log","error","RequestDeduplicator","pendingRequests","Map","cachedRequests","maxCacheAge","getPendingRequests","size","getCachedRequests","clear","window","advancedCache","requestDeduplicator","getCacheInfo","_window$requestDedupl","_window$requestDedupl2","info","serviceWorker","registered","navigator","caches","indexedDB","databases","itemCount","cacheItems","sessionStorage","memory","keys","push","checkStorageQuota","storage","estimate","percentUsed","usage","quota","toFixed","clearSpecificCache","cacheName","deleted","delete","optimizeAllCaches","clearAllCaches","cacheNames","Promise","all","map","name","cacheKeys","forEach"],"sources":["/workspace/src/utils/cacheCleanup.js"],"sourcesContent":["// Cache cleanup utilities\n// Provides functions for managing browser cache, service worker cache, and storage\n\n// Advanced cache manager with TTL and size limits\nclass AdvancedCache {\n  constructor() {\n    this.maxAge = 24 * 60 * 60 * 1000; // 24 hours\n    this.maxSize = 100; // max items\n  }\n\n  async cleanup() {\n    try {\n      // Clean up expired localStorage items\n      const now = Date.now();\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith('cache_')) {\n          try {\n            const item = JSON.parse(localStorage.getItem(key));\n            if (item && item.timestamp && now - item.timestamp > this.maxAge) {\n              localStorage.removeItem(key);\n            }\n          } catch (e) {\n            // Invalid JSON, remove it\n            localStorage.removeItem(key);\n          }\n        }\n      }\n      console.log('✅ Cache cleanup completed');\n    } catch (error) {\n      console.error('Cache cleanup error:', error);\n    }\n  }\n}\n\n// Request deduplicator to prevent duplicate API calls\nclass RequestDeduplicator {\n  constructor() {\n    this.pendingRequests = new Map();\n    this.cachedRequests = new Map();\n    this.maxCacheAge = 5 * 60 * 1000; // 5 minutes\n  }\n\n  getPendingRequests() {\n    return this.pendingRequests.size;\n  }\n\n  getCachedRequests() {\n    return this.cachedRequests.size;\n  }\n\n  clear() {\n    this.pendingRequests.clear();\n    this.cachedRequests.clear();\n  }\n}\n\n// Initialize global cache utilities\nif (typeof window !== 'undefined') {\n  window.advancedCache = new AdvancedCache();\n  window.requestDeduplicator = new RequestDeduplicator();\n\n  // Get cache info function\n  window.getCacheInfo = async () => {\n    const info = {\n      serviceWorker: {\n        registered: 'serviceWorker' in navigator,\n        caches: []\n      },\n      indexedDB: {\n        databases: []\n      },\n      localStorage: {\n        itemCount: localStorage.length,\n        cacheItems: []\n      },\n      sessionStorage: {\n        itemCount: sessionStorage.length\n      },\n      memory: {\n        advancedCache: 0,\n        requestDeduplicator: {\n          pendingRequests: window.requestDeduplicator?.getPendingRequests() || 0,\n          cachedRequests: window.requestDeduplicator?.getCachedRequests() || 0\n        }\n      }\n    };\n\n    // Get cache names\n    if ('caches' in window) {\n      info.serviceWorker.caches = await caches.keys();\n    }\n\n    // Count localStorage cache items\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith('cache_')) {\n        info.localStorage.cacheItems.push(key);\n      }\n    }\n\n    return info;\n  };\n\n  // Check storage quota\n  window.checkStorageQuota = async () => {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      const percentUsed = ((estimate.usage / estimate.quota) * 100).toFixed(2);\n      console.log(`Storage: ${(estimate.usage / 1024 / 1024).toFixed(2)} MB / ${(estimate.quota / 1024 / 1024).toFixed(2)} MB (${percentUsed}%)`);\n      return { usage: estimate.usage, quota: estimate.quota, percentUsed };\n    }\n    return null;\n  };\n\n  // Clear specific cache\n  window.clearSpecificCache = async (cacheName) => {\n    if ('caches' in window) {\n      const deleted = await caches.delete(cacheName);\n      if (deleted) {\n        console.log(`✅ Cache \"${cacheName}\" cleared`);\n      }\n      return deleted;\n    }\n    return false;\n  };\n\n  // Optimize all caches\n  window.optimizeAllCaches = async () => {\n    console.log('🔧 Optimizing all caches...');\n    \n    // Run advanced cache cleanup\n    if (window.advancedCache) {\n      await window.advancedCache.cleanup();\n    }\n\n    // Clear request deduplicator\n    if (window.requestDeduplicator) {\n      window.requestDeduplicator.clear();\n    }\n\n    // Clear old session storage\n    sessionStorage.clear();\n\n    console.log('✅ Cache optimization completed');\n  };\n\n  // Clear all caches\n  window.clearAllCaches = async () => {\n    console.log('🗑️ Clearing all caches...');\n    \n    // Clear service worker caches\n    if ('caches' in window) {\n      const cacheNames = await caches.keys();\n      await Promise.all(cacheNames.map(name => caches.delete(name)));\n      console.log(`✅ Cleared ${cacheNames.length} service worker caches`);\n    }\n\n    // Clear localStorage cache items\n    const cacheKeys = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith('cache_')) {\n        cacheKeys.push(key);\n      }\n    }\n    cacheKeys.forEach(key => localStorage.removeItem(key));\n    console.log(`✅ Cleared ${cacheKeys.length} localStorage cache items`);\n\n    // Clear sessionStorage\n    sessionStorage.clear();\n    console.log('✅ Cleared sessionStorage');\n\n    // Clear memory caches\n    if (window.requestDeduplicator) {\n      window.requestDeduplicator.clear();\n      console.log('✅ Cleared request deduplicator');\n    }\n\n    console.log('✅ All caches cleared successfully');\n  };\n}\n\nexport default {};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}