{"ast":null,"code":"import { getClient } from '../currentScopes.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { addConsoleInstrumentationHandler } from '../instrument/console.js';\nimport { defineIntegration } from '../integration.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '../semanticAttributes.js';\nimport { CONSOLE_LEVELS, debug } from '../utils/debug-logger.js';\nimport { isPrimitive } from '../utils/is.js';\nimport { normalize } from '../utils/normalize.js';\nimport { GLOBAL_OBJ } from '../utils/worldwide.js';\nimport { _INTERNAL_captureLog } from './exports.js';\nconst INTEGRATION_NAME = 'ConsoleLogs';\nconst DEFAULT_ATTRIBUTES = {\n  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.console.logging'\n};\nconst _consoleLoggingIntegration = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const levels = options.levels || CONSOLE_LEVELS;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const {\n        enableLogs,\n        normalizeDepth = 3,\n        normalizeMaxBreadth = 1000\n      } = client.getOptions();\n      if (!enableLogs) {\n        DEBUG_BUILD && debug.warn('`enableLogs` is not enabled, ConsoleLogs integration disabled');\n        return;\n      }\n      addConsoleInstrumentationHandler(_ref => {\n        let {\n          args,\n          level\n        } = _ref;\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n        if (level === 'assert') {\n          if (!args[0]) {\n            const followingArgs = args.slice(1);\n            const assertionMessage = followingArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(followingArgs, normalizeDepth, normalizeMaxBreadth)}` : 'Assertion failed';\n            _INTERNAL_captureLog({\n              level: 'error',\n              message: assertionMessage,\n              attributes: DEFAULT_ATTRIBUTES\n            });\n          }\n          return;\n        }\n        const isLevelLog = level === 'log';\n        _INTERNAL_captureLog({\n          level: isLevelLog ? 'info' : level,\n          message: formatConsoleArgs(args, normalizeDepth, normalizeMaxBreadth),\n          severityNumber: isLevelLog ? 10 : undefined,\n          attributes: DEFAULT_ATTRIBUTES\n        });\n      });\n    }\n  };\n};\n\n/**\n * Captures calls to the `console` API as logs in Sentry. Requires the `enableLogs` option to be enabled.\n *\n * @experimental This feature is experimental and may be changed or removed in future versions.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```ts\n * import * as Sentry from '@sentry/browser';\n *\n * Sentry.init({\n *   enableLogs: true,\n *   integrations: [Sentry.consoleLoggingIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nconst consoleLoggingIntegration = defineIntegration(_consoleLoggingIntegration);\nfunction formatConsoleArgs(values, normalizeDepth, normalizeMaxBreadth) {\n  return 'util' in GLOBAL_OBJ && typeof GLOBAL_OBJ.util.format === 'function' ? GLOBAL_OBJ.util.format(...values) : safeJoinConsoleArgs(values, normalizeDepth, normalizeMaxBreadth);\n}\nfunction safeJoinConsoleArgs(values, normalizeDepth, normalizeMaxBreadth) {\n  return values.map(value => isPrimitive(value) ? String(value) : JSON.stringify(normalize(value, normalizeDepth, normalizeMaxBreadth))).join(' ');\n}\nexport { consoleLoggingIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","DEFAULT_ATTRIBUTES","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","_consoleLoggingIntegration","options","arguments","length","undefined","levels","CONSOLE_LEVELS","name","setup","client","enableLogs","normalizeDepth","normalizeMaxBreadth","getOptions","DEBUG_BUILD","debug","warn","addConsoleInstrumentationHandler","_ref","args","level","getClient","includes","followingArgs","slice","assertionMessage","formatConsoleArgs","_INTERNAL_captureLog","message","attributes","isLevelLog","severityNumber","consoleLoggingIntegration","defineIntegration","values","GLOBAL_OBJ","util","format","safeJoinConsoleArgs","map","value","isPrimitive","String","JSON","stringify","normalize","join"],"sources":["/workspace/node_modules/@sentry/core/src/logs/console-integration.ts"],"sourcesContent":["import { getClient } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { addConsoleInstrumentationHandler } from '../instrument/console';\nimport { defineIntegration } from '../integration';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '../semanticAttributes';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { CONSOLE_LEVELS, debug } from '../utils/debug-logger';\nimport { isPrimitive } from '../utils/is';\nimport { normalize } from '../utils/normalize';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { _INTERNAL_captureLog } from './exports';\n\ninterface CaptureConsoleOptions {\n  levels: ConsoleLevel[];\n}\n\ntype GlobalObjectWithUtil = typeof GLOBAL_OBJ & {\n  util: {\n    format: (...args: unknown[]) => string;\n  };\n};\n\nconst INTEGRATION_NAME = 'ConsoleLogs';\n\nconst DEFAULT_ATTRIBUTES = {\n  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.console.logging',\n};\n\nconst _consoleLoggingIntegration = ((options: Partial<CaptureConsoleOptions> = {}) => {\n  const levels = options.levels || CONSOLE_LEVELS;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const { enableLogs, normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = client.getOptions();\n      if (!enableLogs) {\n        DEBUG_BUILD && debug.warn('`enableLogs` is not enabled, ConsoleLogs integration disabled');\n        return;\n      }\n\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n\n        if (level === 'assert') {\n          if (!args[0]) {\n            const followingArgs = args.slice(1);\n            const assertionMessage =\n              followingArgs.length > 0\n                ? `Assertion failed: ${formatConsoleArgs(followingArgs, normalizeDepth, normalizeMaxBreadth)}`\n                : 'Assertion failed';\n            _INTERNAL_captureLog({ level: 'error', message: assertionMessage, attributes: DEFAULT_ATTRIBUTES });\n          }\n          return;\n        }\n\n        const isLevelLog = level === 'log';\n        _INTERNAL_captureLog({\n          level: isLevelLog ? 'info' : level,\n          message: formatConsoleArgs(args, normalizeDepth, normalizeMaxBreadth),\n          severityNumber: isLevelLog ? 10 : undefined,\n          attributes: DEFAULT_ATTRIBUTES,\n        });\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Captures calls to the `console` API as logs in Sentry. Requires the `enableLogs` option to be enabled.\n *\n * @experimental This feature is experimental and may be changed or removed in future versions.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```ts\n * import * as Sentry from '@sentry/browser';\n *\n * Sentry.init({\n *   enableLogs: true,\n *   integrations: [Sentry.consoleLoggingIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nexport const consoleLoggingIntegration = defineIntegration(_consoleLoggingIntegration);\n\nfunction formatConsoleArgs(values: unknown[], normalizeDepth: number, normalizeMaxBreadth: number): string {\n  return 'util' in GLOBAL_OBJ && typeof (GLOBAL_OBJ as GlobalObjectWithUtil).util.format === 'function'\n    ? (GLOBAL_OBJ as GlobalObjectWithUtil).util.format(...values)\n    : safeJoinConsoleArgs(values, normalizeDepth, normalizeMaxBreadth);\n}\n\nfunction safeJoinConsoleArgs(values: unknown[], normalizeDepth: number, normalizeMaxBreadth: number): string {\n  return values\n    .map(value =>\n      isPrimitive(value) ? String(value) : JSON.stringify(normalize(value, normalizeDepth, normalizeMaxBreadth)),\n    )\n    .join(' ');\n}\n"],"mappings":";;;;;;;;;;AAuBA,MAAMA,gBAAA,GAAmB,aAAa;AAEtC,MAAMC,kBAAA,GAAqB;EACzB,CAACC,gCAAgC,GAAG;AACtC,CAAC;AAED,MAAMC,0BAAA,GAA8B,SAAAA,CAAA,EAAkD;EAAA,IAAjDC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmC,EAAE;EAC/E,MAAMG,MAAA,GAASJ,OAAO,CAACI,MAAA,IAAUC,cAAc;EAE/C,OAAO;IACLC,IAAI,EAAEV,gBAAgB;IACtBW,KAAKA,CAACC,MAAM,EAAE;MACZ,MAAM;QAAEC,UAAU;QAAEC,cAAA,GAAiB,CAAC;QAAEC,mBAAA,GAAsB;MAAA,CAAM,GAAIH,MAAM,CAACI,UAAU,EAAE;MAC3F,IAAI,CAACH,UAAU,EAAE;QACfI,WAAA,IAAeC,KAAK,CAACC,IAAI,CAAC,+DAA+D,CAAC;QAC1F;MACR;MAEMC,gCAAgC,CAACC,IAAA,IAAqB;QAAA,IAApB;UAAEC,IAAI;UAAEC;QAAA,CAAO,GAAAF,IAAA;QAC/C,IAAIG,SAAS,OAAOZ,MAAA,IAAU,CAACJ,MAAM,CAACiB,QAAQ,CAACF,KAAK,CAAC,EAAE;UACrD;QACV;QAEQ,IAAIA,KAAA,KAAU,QAAQ,EAAE;UACtB,IAAI,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE;YACZ,MAAMI,aAAA,GAAgBJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC;YACnC,MAAMC,gBAAA,GACJF,aAAa,CAACpB,MAAA,GAAS,IACnB,qBAAqBuB,iBAAiB,CAACH,aAAa,EAAEZ,cAAc,EAAEC,mBAAmB,CAAC,EAAC,GAC7G;YACAe,oBAAA;cAAAP,KAAA;cAAAQ,OAAA,EAAAH,gBAAA;cAAAI,UAAA,EAAA/B;YAAA;UACA;UACA;QACA;QAEA,MAAAgC,UAAA,GAAAV,KAAA;QACAO,oBAAA;UACAP,KAAA,EAAAU,UAAA,YAAAV,KAAA;UACAQ,OAAA,EAAAF,iBAAA,CAAAP,IAAA,EAAAR,cAAA,EAAAC,mBAAA;UACAmB,cAAA,EAAAD,UAAA,QAAA1B,SAAA;UACAyB,UAAA,EAAA/B;QACA;MACA;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAAkC,yBAAA,GAAAC,iBAAA,CAAAjC,0BAAA;AAEA,SAAA0B,kBAAAQ,MAAA,EAAAvB,cAAA,EAAAC,mBAAA;EACA,iBAAAuB,UAAA,WAAAA,UAAA,CAAAC,IAAA,CAAAC,MAAA,kBACAF,UAAA,CAAAC,IAAA,CAAAC,MAAA,IAAAH,MAAA,IACAI,mBAAA,CAAAJ,MAAA,EAAAvB,cAAA,EAAAC,mBAAA;AACA;AAEA,SAAA0B,oBAAAJ,MAAA,EAAAvB,cAAA,EAAAC,mBAAA;EACA,OAAAsB,MAAA,CACAK,GAAA,CAAAC,KAAA,IACAC,WAAA,CAAAD,KAAA,IAAAE,MAAA,CAAAF,KAAA,IAAAG,IAAA,CAAAC,SAAA,CAAAC,SAAA,CAAAL,KAAA,EAAA7B,cAAA,EAAAC,mBAAA,EACA,EACAkC,IAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}